(()=>{var e={"./node_modules/ansi-html/index.js":e=>{"use strict";e.exports=s;var t=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,r={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},n={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},i={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},o={23:"</i>",24:"</u>",29:"</del>"};function s(e){if(!t.test(e))return e;var r=[],n=e.replace(/\033\[(\d+)*m/g,(function(e,t){var n=i[t];if(n)return~r.indexOf(t)?(r.pop(),"</span>"):(r.push(t),"<"===n[0]?n:'<span style="'+n+';">');var s=o[t];return s?(r.pop(),s):""})),s=r.length;return s>0&&(n+=Array(s+1).join("</span>")),n}function a(e){for(var t in i[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],i[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],i[90]="color:#"+e.darkgrey,n){var r=e[n[t]]||"000";i[t]="color:#"+r,t=parseInt(t),i[(t+10).toString()]="background:#"+r}}[0,21,22,27,28,39,49].forEach((function(e){o[e]="</span>"})),s.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var n in r){var i=e.hasOwnProperty(n)?e[n]:null;if(i){if("reset"===n){if("string"==typeof i&&(i=[i]),!Array.isArray(i)||0===i.length||i.some((function(e){return"string"!=typeof e})))throw new Error("The value of `"+n+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var o=r[n];i[0]||(i[0]=o[0]),1!==i.length&&i[1]||(i=[i[0]]).push(o[1]),i=i.slice(0,2)}else if("string"!=typeof i)throw new Error("The value of `"+n+"` property must be a hex string, e.g.: FF0000");t[n]=i}else t[n]=r[n]}a(t)},s.reset=function(){a(r)},s.tags={},Object.defineProperty?(Object.defineProperty(s.tags,"open",{get:function(){return i}}),Object.defineProperty(s.tags,"close",{get:function(){return o}})):(s.tags.open=i,s.tags.close=o),s.reset()},"./node_modules/decimal.js/decimal.js":function(e,t,r){var n;!function(i){"use strict";var o,s,a,l=9e15,c=1e9,u="0123456789abcdef",h="2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058",d="3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789",p={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-l,maxE:l,crypto:!1},f=!0,m="[DecimalError] ",g=m+"Invalid argument: ",v=m+"Precision limit exceeded",b=m+"crypto unavailable",y=Math.floor,w=Math.pow,x=/^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,k=/^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,S=/^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,A=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,M=1e7,C=h.length-1,N=d.length-1,E={name:"[object Decimal]"};function T(e){var t,r,n,i=e.length-1,o="",s=e[0];if(i>0){for(o+=s,t=1;t<i;t++)(r=7-(n=e[t]+"").length)&&(o+=P(r)),o+=n;(r=7-(n=(s=e[t])+"").length)&&(o+=P(r))}else if(0===s)return"0";for(;s%10==0;)s/=10;return o+s}function q(e,t,r){if(e!==~~e||e<t||e>r)throw Error(g+e)}function z(e,t,r,n){var i,o,s,a;for(o=e[0];o>=10;o/=10)--t;return--t<0?(t+=7,i=0):(i=Math.ceil((t+1)/7),t%=7),o=w(10,7-t),a=e[i]%o|0,null==n?t<3?(0==t?a=a/100|0:1==t&&(a=a/10|0),s=r<4&&99999==a||r>3&&49999==a||5e4==a||0==a):s=(r<4&&a+1==o||r>3&&a+1==o/2)&&(e[i+1]/o/100|0)==w(10,t-2)-1||(a==o/2||0==a)&&0==(e[i+1]/o/100|0):t<4?(0==t?a=a/1e3|0:1==t?a=a/100|0:2==t&&(a=a/10|0),s=(n||r<4)&&9999==a||!n&&r>3&&4999==a):s=((n||r<4)&&a+1==o||!n&&r>3&&a+1==o/2)&&(e[i+1]/o/1e3|0)==w(10,t-3)-1,s}function O(e,t,r){for(var n,i,o=[0],s=0,a=e.length;s<a;){for(i=o.length;i--;)o[i]*=t;for(o[0]+=u.indexOf(e.charAt(s++)),n=0;n<o.length;n++)o[n]>r-1&&(void 0===o[n+1]&&(o[n+1]=0),o[n+1]+=o[n]/r|0,o[n]%=r)}return o.reverse()}E.absoluteValue=E.abs=function(){var e=new this.constructor(this);return e.s<0&&(e.s=1),I(e)},E.ceil=function(){return I(new this.constructor(this),this.e+1,2)},E.comparedTo=E.cmp=function(e){var t,r,n,i,o=this,s=o.d,a=(e=new o.constructor(e)).d,l=o.s,c=e.s;if(!s||!a)return l&&c?l!==c?l:s===a?0:!s^l<0?1:-1:NaN;if(!s[0]||!a[0])return s[0]?l:a[0]?-c:0;if(l!==c)return l;if(o.e!==e.e)return o.e>e.e^l<0?1:-1;for(t=0,r=(n=s.length)<(i=a.length)?n:i;t<r;++t)if(s[t]!==a[t])return s[t]>a[t]^l<0?1:-1;return n===i?0:n>i^l<0?1:-1},E.cosine=E.cos=function(){var e,t,r=this,n=r.constructor;return r.d?r.d[0]?(e=n.precision,t=n.rounding,n.precision=e+Math.max(r.e,r.sd())+7,n.rounding=1,r=function(e,t){var r,n,i=t.d.length;i<32?n=(1/Z(4,r=Math.ceil(i/3))).toString():(r=16,n="2.3283064365386962890625e-10");e.precision+=r,t=Y(e,1,t.times(n),new e(1));for(var o=r;o--;){var s=t.times(t);t=s.times(s).minus(s).times(8).plus(1)}return e.precision-=r,t}(n,J(n,r)),n.precision=e,n.rounding=t,I(2==a||3==a?r.neg():r,e,t,!0)):new n(1):new n(NaN)},E.cubeRoot=E.cbrt=function(){var e,t,r,n,i,o,s,a,l,c,u=this,h=u.constructor;if(!u.isFinite()||u.isZero())return new h(u);for(f=!1,(o=u.s*w(u.s*u,1/3))&&Math.abs(o)!=1/0?n=new h(o.toString()):(r=T(u.d),(o=((e=u.e)-r.length+1)%3)&&(r+=1==o||-2==o?"0":"00"),o=w(r,1/3),e=y((e+1)/3)-(e%3==(e<0?-1:2)),(n=new h(r=o==1/0?"5e"+e:(r=o.toExponential()).slice(0,r.indexOf("e")+1)+e)).s=u.s),s=(e=h.precision)+3;;)if(c=(l=(a=n).times(a).times(a)).plus(u),n=_(c.plus(u).times(a),c.plus(l),s+2,1),T(a.d).slice(0,s)===(r=T(n.d)).slice(0,s)){if("9999"!=(r=r.slice(s-3,s+1))&&(i||"4999"!=r)){+r&&(+r.slice(1)||"5"!=r.charAt(0))||(I(n,e+1,1),t=!n.times(n).times(n).eq(u));break}if(!i&&(I(a,e+1,0),a.times(a).times(a).eq(u))){n=a;break}s+=4,i=1}return f=!0,I(n,e,h.rounding,t)},E.decimalPlaces=E.dp=function(){var e,t=this.d,r=NaN;if(t){if(r=7*((e=t.length-1)-y(this.e/7)),e=t[e])for(;e%10==0;e/=10)r--;r<0&&(r=0)}return r},E.dividedBy=E.div=function(e){return _(this,new this.constructor(e))},E.dividedToIntegerBy=E.divToInt=function(e){var t=this.constructor;return I(_(this,new t(e),0,1,1),t.precision,t.rounding)},E.equals=E.eq=function(e){return 0===this.cmp(e)},E.floor=function(){return I(new this.constructor(this),this.e+1,3)},E.greaterThan=E.gt=function(e){return this.cmp(e)>0},E.greaterThanOrEqualTo=E.gte=function(e){var t=this.cmp(e);return 1==t||0===t},E.hyperbolicCosine=E.cosh=function(){var e,t,r,n,i,o=this,s=o.constructor,a=new s(1);if(!o.isFinite())return new s(o.s?1/0:NaN);if(o.isZero())return a;r=s.precision,n=s.rounding,s.precision=r+Math.max(o.e,o.sd())+4,s.rounding=1,(i=o.d.length)<32?t=(1/Z(4,e=Math.ceil(i/3))).toString():(e=16,t="2.3283064365386962890625e-10"),o=Y(s,1,o.times(t),new s(1),!0);for(var l,c=e,u=new s(8);c--;)l=o.times(o),o=a.minus(l.times(u.minus(l.times(u))));return I(o,s.precision=r,s.rounding=n,!0)},E.hyperbolicSine=E.sinh=function(){var e,t,r,n,i=this,o=i.constructor;if(!i.isFinite()||i.isZero())return new o(i);if(t=o.precision,r=o.rounding,o.precision=t+Math.max(i.e,i.sd())+4,o.rounding=1,(n=i.d.length)<3)i=Y(o,2,i,i,!0);else{e=(e=1.4*Math.sqrt(n))>16?16:0|e,i=Y(o,2,i=i.times(1/Z(5,e)),i,!0);for(var s,a=new o(5),l=new o(16),c=new o(20);e--;)s=i.times(i),i=i.times(a.plus(s.times(l.times(s).plus(c))))}return o.precision=t,o.rounding=r,I(i,t,r,!0)},E.hyperbolicTangent=E.tanh=function(){var e,t,r=this,n=r.constructor;return r.isFinite()?r.isZero()?new n(r):(e=n.precision,t=n.rounding,n.precision=e+7,n.rounding=1,_(r.sinh(),r.cosh(),n.precision=e,n.rounding=t)):new n(r.s)},E.inverseCosine=E.acos=function(){var e,t=this,r=t.constructor,n=t.abs().cmp(1),i=r.precision,o=r.rounding;return-1!==n?0===n?t.isNeg()?B(r,i,o):new r(0):new r(NaN):t.isZero()?B(r,i+4,o).times(.5):(r.precision=i+6,r.rounding=1,t=t.asin(),e=B(r,i+4,o).times(.5),r.precision=i,r.rounding=o,e.minus(t))},E.inverseHyperbolicCosine=E.acosh=function(){var e,t,r=this,n=r.constructor;return r.lte(1)?new n(r.eq(1)?0:NaN):r.isFinite()?(e=n.precision,t=n.rounding,n.precision=e+Math.max(Math.abs(r.e),r.sd())+4,n.rounding=1,f=!1,r=r.times(r).minus(1).sqrt().plus(r),f=!0,n.precision=e,n.rounding=t,r.ln()):new n(r)},E.inverseHyperbolicSine=E.asinh=function(){var e,t,r=this,n=r.constructor;return!r.isFinite()||r.isZero()?new n(r):(e=n.precision,t=n.rounding,n.precision=e+2*Math.max(Math.abs(r.e),r.sd())+6,n.rounding=1,f=!1,r=r.times(r).plus(1).sqrt().plus(r),f=!0,n.precision=e,n.rounding=t,r.ln())},E.inverseHyperbolicTangent=E.atanh=function(){var e,t,r,n,i=this,o=i.constructor;return i.isFinite()?i.e>=0?new o(i.abs().eq(1)?i.s/0:i.isZero()?i:NaN):(e=o.precision,t=o.rounding,n=i.sd(),Math.max(n,e)<2*-i.e-1?I(new o(i),e,t,!0):(o.precision=r=n-i.e,i=_(i.plus(1),new o(1).minus(i),r+e,1),o.precision=e+4,o.rounding=1,i=i.ln(),o.precision=e,o.rounding=t,i.times(.5))):new o(NaN)},E.inverseSine=E.asin=function(){var e,t,r,n,i=this,o=i.constructor;return i.isZero()?new o(i):(t=i.abs().cmp(1),r=o.precision,n=o.rounding,-1!==t?0===t?((e=B(o,r+4,n).times(.5)).s=i.s,e):new o(NaN):(o.precision=r+6,o.rounding=1,i=i.div(new o(1).minus(i.times(i)).sqrt().plus(1)).atan(),o.precision=r,o.rounding=n,i.times(2)))},E.inverseTangent=E.atan=function(){var e,t,r,n,i,o,s,a,l,c=this,u=c.constructor,h=u.precision,d=u.rounding;if(c.isFinite()){if(c.isZero())return new u(c);if(c.abs().eq(1)&&h+4<=N)return(s=B(u,h+4,d).times(.25)).s=c.s,s}else{if(!c.s)return new u(NaN);if(h+4<=N)return(s=B(u,h+4,d).times(.5)).s=c.s,s}for(u.precision=a=h+10,u.rounding=1,e=r=Math.min(28,a/7+2|0);e;--e)c=c.div(c.times(c).plus(1).sqrt().plus(1));for(f=!1,t=Math.ceil(a/7),n=1,l=c.times(c),s=new u(c),i=c;-1!==e;)if(i=i.times(l),o=s.minus(i.div(n+=2)),i=i.times(l),void 0!==(s=o.plus(i.div(n+=2))).d[t])for(e=t;s.d[e]===o.d[e]&&e--;);return r&&(s=s.times(2<<r-1)),f=!0,I(s,u.precision=h,u.rounding=d,!0)},E.isFinite=function(){return!!this.d},E.isInteger=E.isInt=function(){return!!this.d&&y(this.e/7)>this.d.length-2},E.isNaN=function(){return!this.s},E.isNegative=E.isNeg=function(){return this.s<0},E.isPositive=E.isPos=function(){return this.s>0},E.isZero=function(){return!!this.d&&0===this.d[0]},E.lessThan=E.lt=function(e){return this.cmp(e)<0},E.lessThanOrEqualTo=E.lte=function(e){return this.cmp(e)<1},E.logarithm=E.log=function(e){var t,r,n,i,o,s,a,l,c=this,u=c.constructor,h=u.precision,d=u.rounding;if(null==e)e=new u(10),t=!0;else{if(r=(e=new u(e)).d,e.s<0||!r||!r[0]||e.eq(1))return new u(NaN);t=e.eq(10)}if(r=c.d,c.s<0||!r||!r[0]||c.eq(1))return new u(r&&!r[0]?-1/0:1!=c.s?NaN:r?0:1/0);if(t)if(r.length>1)o=!0;else{for(i=r[0];i%10==0;)i/=10;o=1!==i}if(f=!1,s=V(c,a=h+5),n=t?D(u,a+10):V(e,a),z((l=_(s,n,a,1)).d,i=h,d))do{if(s=V(c,a+=10),n=t?D(u,a+10):V(e,a),l=_(s,n,a,1),!o){+T(l.d).slice(i+1,i+15)+1==1e14&&(l=I(l,h+1,0));break}}while(z(l.d,i+=10,d));return f=!0,I(l,h,d)},E.minus=E.sub=function(e){var t,r,n,i,o,s,a,l,c,u,h,d,p=this,m=p.constructor;if(e=new m(e),!p.d||!e.d)return p.s&&e.s?p.d?e.s=-e.s:e=new m(e.d||p.s!==e.s?p:NaN):e=new m(NaN),e;if(p.s!=e.s)return e.s=-e.s,p.plus(e);if(c=p.d,d=e.d,a=m.precision,l=m.rounding,!c[0]||!d[0]){if(d[0])e.s=-e.s;else{if(!c[0])return new m(3===l?-0:0);e=new m(p)}return f?I(e,a,l):e}if(r=y(e.e/7),u=y(p.e/7),c=c.slice(),o=u-r){for((h=o<0)?(t=c,o=-o,s=d.length):(t=d,r=u,s=c.length),o>(n=Math.max(Math.ceil(a/7),s)+2)&&(o=n,t.length=1),t.reverse(),n=o;n--;)t.push(0);t.reverse()}else{for((h=(n=c.length)<(s=d.length))&&(s=n),n=0;n<s;n++)if(c[n]!=d[n]){h=c[n]<d[n];break}o=0}for(h&&(t=c,c=d,d=t,e.s=-e.s),s=c.length,n=d.length-s;n>0;--n)c[s++]=0;for(n=d.length;n>o;){if(c[--n]<d[n]){for(i=n;i&&0===c[--i];)c[i]=M-1;--c[i],c[n]+=M}c[n]-=d[n]}for(;0===c[--s];)c.pop();for(;0===c[0];c.shift())--r;return c[0]?(e.d=c,e.e=j(c,r),f?I(e,a,l):e):new m(3===l?-0:0)},E.modulo=E.mod=function(e){var t,r=this,n=r.constructor;return e=new n(e),!r.d||!e.s||e.d&&!e.d[0]?new n(NaN):!e.d||r.d&&!r.d[0]?I(new n(r),n.precision,n.rounding):(f=!1,9==n.modulo?(t=_(r,e.abs(),0,3,1)).s*=e.s:t=_(r,e,0,n.modulo,1),t=t.times(e),f=!0,r.minus(t))},E.naturalExponential=E.exp=function(){return H(this)},E.naturalLogarithm=E.ln=function(){return V(this)},E.negated=E.neg=function(){var e=new this.constructor(this);return e.s=-e.s,I(e)},E.plus=E.add=function(e){var t,r,n,i,o,s,a,l,c,u,h=this,d=h.constructor;if(e=new d(e),!h.d||!e.d)return h.s&&e.s?h.d||(e=new d(e.d||h.s===e.s?h:NaN)):e=new d(NaN),e;if(h.s!=e.s)return e.s=-e.s,h.minus(e);if(c=h.d,u=e.d,a=d.precision,l=d.rounding,!c[0]||!u[0])return u[0]||(e=new d(h)),f?I(e,a,l):e;if(o=y(h.e/7),n=y(e.e/7),c=c.slice(),i=o-n){for(i<0?(r=c,i=-i,s=u.length):(r=u,n=o,s=c.length),i>(s=(o=Math.ceil(a/7))>s?o+1:s+1)&&(i=s,r.length=1),r.reverse();i--;)r.push(0);r.reverse()}for((s=c.length)-(i=u.length)<0&&(i=s,r=u,u=c,c=r),t=0;i;)t=(c[--i]=c[i]+u[i]+t)/M|0,c[i]%=M;for(t&&(c.unshift(t),++n),s=c.length;0==c[--s];)c.pop();return e.d=c,e.e=j(c,n),f?I(e,a,l):e},E.precision=E.sd=function(e){var t,r=this;if(void 0!==e&&e!==!!e&&1!==e&&0!==e)throw Error(g+e);return r.d?(t=R(r.d),e&&r.e+1>t&&(t=r.e+1)):t=NaN,t},E.round=function(){var e=this,t=e.constructor;return I(new t(e),e.e+1,t.rounding)},E.sine=E.sin=function(){var e,t,r=this,n=r.constructor;return r.isFinite()?r.isZero()?new n(r):(e=n.precision,t=n.rounding,n.precision=e+Math.max(r.e,r.sd())+7,n.rounding=1,r=function(e,t){var r,n=t.d.length;if(n<3)return Y(e,2,t,t);r=(r=1.4*Math.sqrt(n))>16?16:0|r,t=t.times(1/Z(5,r)),t=Y(e,2,t,t);for(var i,o=new e(5),s=new e(16),a=new e(20);r--;)i=t.times(t),t=t.times(o.plus(i.times(s.times(i).minus(a))));return t}(n,J(n,r)),n.precision=e,n.rounding=t,I(a>2?r.neg():r,e,t,!0)):new n(NaN)},E.squareRoot=E.sqrt=function(){var e,t,r,n,i,o,s=this,a=s.d,l=s.e,c=s.s,u=s.constructor;if(1!==c||!a||!a[0])return new u(!c||c<0&&(!a||a[0])?NaN:a?s:1/0);for(f=!1,0==(c=Math.sqrt(+s))||c==1/0?(((t=T(a)).length+l)%2==0&&(t+="0"),c=Math.sqrt(t),l=y((l+1)/2)-(l<0||l%2),n=new u(t=c==1/0?"5e"+l:(t=c.toExponential()).slice(0,t.indexOf("e")+1)+l)):n=new u(c.toString()),r=(l=u.precision)+3;;)if(n=(o=n).plus(_(s,o,r+2,1)).times(.5),T(o.d).slice(0,r)===(t=T(n.d)).slice(0,r)){if("9999"!=(t=t.slice(r-3,r+1))&&(i||"4999"!=t)){+t&&(+t.slice(1)||"5"!=t.charAt(0))||(I(n,l+1,1),e=!n.times(n).eq(s));break}if(!i&&(I(o,l+1,0),o.times(o).eq(s))){n=o;break}r+=4,i=1}return f=!0,I(n,l,u.rounding,e)},E.tangent=E.tan=function(){var e,t,r=this,n=r.constructor;return r.isFinite()?r.isZero()?new n(r):(e=n.precision,t=n.rounding,n.precision=e+10,n.rounding=1,(r=r.sin()).s=1,r=_(r,new n(1).minus(r.times(r)).sqrt(),e+10,0),n.precision=e,n.rounding=t,I(2==a||4==a?r.neg():r,e,t,!0)):new n(NaN)},E.times=E.mul=function(e){var t,r,n,i,o,s,a,l,c,u=this,h=u.constructor,d=u.d,p=(e=new h(e)).d;if(e.s*=u.s,!(d&&d[0]&&p&&p[0]))return new h(!e.s||d&&!d[0]&&!p||p&&!p[0]&&!d?NaN:d&&p?0*e.s:e.s/0);for(r=y(u.e/7)+y(e.e/7),(l=d.length)<(c=p.length)&&(o=d,d=p,p=o,s=l,l=c,c=s),o=[],n=s=l+c;n--;)o.push(0);for(n=c;--n>=0;){for(t=0,i=l+n;i>n;)a=o[i]+p[n]*d[i-n-1]+t,o[i--]=a%M|0,t=a/M|0;o[i]=(o[i]+t)%M|0}for(;!o[--s];)o.pop();return t?++r:o.shift(),e.d=o,e.e=j(o,r),f?I(e,h.precision,h.rounding):e},E.toBinary=function(e,t){return K(this,2,e,t)},E.toDecimalPlaces=E.toDP=function(e,t){var r=this,n=r.constructor;return r=new n(r),void 0===e?r:(q(e,0,c),void 0===t?t=n.rounding:q(t,0,8),I(r,e+r.e+1,t))},E.toExponential=function(e,t){var r,n=this,i=n.constructor;return void 0===e?r=L(n,!0):(q(e,0,c),void 0===t?t=i.rounding:q(t,0,8),r=L(n=I(new i(n),e+1,t),!0,e+1)),n.isNeg()&&!n.isZero()?"-"+r:r},E.toFixed=function(e,t){var r,n,i=this,o=i.constructor;return void 0===e?r=L(i):(q(e,0,c),void 0===t?t=o.rounding:q(t,0,8),r=L(n=I(new o(i),e+i.e+1,t),!1,e+n.e+1)),i.isNeg()&&!i.isZero()?"-"+r:r},E.toFraction=function(e){var t,r,n,i,o,s,a,l,c,u,h,d,p=this,m=p.d,v=p.constructor;if(!m)return new v(p);if(c=r=new v(1),n=l=new v(0),s=(o=(t=new v(n)).e=R(m)-p.e-1)%7,t.d[0]=w(10,s<0?7+s:s),null==e)e=o>0?t:c;else{if(!(a=new v(e)).isInt()||a.lt(c))throw Error(g+a);e=a.gt(t)?o>0?t:c:a}for(f=!1,a=new v(T(m)),u=v.precision,v.precision=o=7*m.length*2;h=_(a,t,0,1,1),1!=(i=r.plus(h.times(n))).cmp(e);)r=n,n=i,i=c,c=l.plus(h.times(i)),l=i,i=t,t=a.minus(h.times(i)),a=i;return i=_(e.minus(r),n,0,1,1),l=l.plus(i.times(c)),r=r.plus(i.times(n)),l.s=c.s=p.s,d=_(c,n,o,1).minus(p).abs().cmp(_(l,r,o,1).minus(p).abs())<1?[c,n]:[l,r],v.precision=u,f=!0,d},E.toHexadecimal=E.toHex=function(e,t){return K(this,16,e,t)},E.toNearest=function(e,t){var r=this,n=r.constructor;if(r=new n(r),null==e){if(!r.d)return r;e=new n(1),t=n.rounding}else{if(e=new n(e),void 0===t?t=n.rounding:q(t,0,8),!r.d)return e.s?r:e;if(!e.d)return e.s&&(e.s=r.s),e}return e.d[0]?(f=!1,r=_(r,e,0,t,1).times(e),f=!0,I(r)):(e.s=r.s,r=e),r},E.toNumber=function(){return+this},E.toOctal=function(e,t){return K(this,8,e,t)},E.toPower=E.pow=function(e){var t,r,n,i,o,s,a=this,l=a.constructor,c=+(e=new l(e));if(!(a.d&&e.d&&a.d[0]&&e.d[0]))return new l(w(+a,c));if((a=new l(a)).eq(1))return a;if(n=l.precision,o=l.rounding,e.eq(1))return I(a,n,o);if((t=y(e.e/7))>=e.d.length-1&&(r=c<0?-c:c)<=9007199254740991)return i=F(l,a,r,n),e.s<0?new l(1).div(i):I(i,n,o);if((s=a.s)<0){if(t<e.d.length-1)return new l(NaN);if(0==(1&e.d[t])&&(s=1),0==a.e&&1==a.d[0]&&1==a.d.length)return a.s=s,a}return(t=0!=(r=w(+a,c))&&isFinite(r)?new l(r+"").e:y(c*(Math.log("0."+T(a.d))/Math.LN10+a.e+1)))>l.maxE+1||t<l.minE-1?new l(t>0?s/0:0):(f=!1,l.rounding=a.s=1,r=Math.min(12,(t+"").length),(i=H(e.times(V(a,n+r)),n)).d&&z((i=I(i,n+5,1)).d,n,o)&&(t=n+10,+T((i=I(H(e.times(V(a,t+r)),t),t+5,1)).d).slice(n+1,n+15)+1==1e14&&(i=I(i,n+1,0))),i.s=s,f=!0,l.rounding=o,I(i,n,o))},E.toPrecision=function(e,t){var r,n=this,i=n.constructor;return void 0===e?r=L(n,n.e<=i.toExpNeg||n.e>=i.toExpPos):(q(e,1,c),void 0===t?t=i.rounding:q(t,0,8),r=L(n=I(new i(n),e,t),e<=n.e||n.e<=i.toExpNeg,e)),n.isNeg()&&!n.isZero()?"-"+r:r},E.toSignificantDigits=E.toSD=function(e,t){var r=this.constructor;return void 0===e?(e=r.precision,t=r.rounding):(q(e,1,c),void 0===t?t=r.rounding:q(t,0,8)),I(new r(this),e,t)},E.toString=function(){var e=this,t=e.constructor,r=L(e,e.e<=t.toExpNeg||e.e>=t.toExpPos);return e.isNeg()&&!e.isZero()?"-"+r:r},E.truncated=E.trunc=function(){return I(new this.constructor(this),this.e+1,1)},E.valueOf=E.toJSON=function(){var e=this,t=e.constructor,r=L(e,e.e<=t.toExpNeg||e.e>=t.toExpPos);return e.isNeg()?"-"+r:r};var _=function(){function e(e,t,r){var n,i=0,o=e.length;for(e=e.slice();o--;)n=e[o]*t+i,e[o]=n%r|0,i=n/r|0;return i&&e.unshift(i),e}function t(e,t,r,n){var i,o;if(r!=n)o=r>n?1:-1;else for(i=o=0;i<r;i++)if(e[i]!=t[i]){o=e[i]>t[i]?1:-1;break}return o}function r(e,t,r,n){for(var i=0;r--;)e[r]-=i,i=e[r]<t[r]?1:0,e[r]=i*n+e[r]-t[r];for(;!e[0]&&e.length>1;)e.shift()}return function(n,i,o,a,l,c){var u,h,d,p,f,m,g,v,b,w,x,k,S,A,C,N,E,T,q,z,O=n.constructor,_=n.s==i.s?1:-1,L=n.d,j=i.d;if(!(L&&L[0]&&j&&j[0]))return new O(n.s&&i.s&&(L?!j||L[0]!=j[0]:j)?L&&0==L[0]||!j?0*_:_/0:NaN);for(c?(f=1,h=n.e-i.e):(c=M,f=7,h=y(n.e/f)-y(i.e/f)),q=j.length,E=L.length,w=(b=new O(_)).d=[],d=0;j[d]==(L[d]||0);d++);if(j[d]>(L[d]||0)&&h--,null==o?(A=o=O.precision,a=O.rounding):A=l?o+(n.e-i.e)+1:o,A<0)w.push(1),m=!0;else{if(A=A/f+2|0,d=0,1==q){for(p=0,j=j[0],A++;(d<E||p)&&A--;d++)C=p*c+(L[d]||0),w[d]=C/j|0,p=C%j|0;m=p||d<E}else{for((p=c/(j[0]+1)|0)>1&&(j=e(j,p,c),L=e(L,p,c),q=j.length,E=L.length),N=q,k=(x=L.slice(0,q)).length;k<q;)x[k++]=0;(z=j.slice()).unshift(0),T=j[0],j[1]>=c/2&&++T;do{p=0,(u=t(j,x,q,k))<0?(S=x[0],q!=k&&(S=S*c+(x[1]||0)),(p=S/T|0)>1?(p>=c&&(p=c-1),1==(u=t(g=e(j,p,c),x,v=g.length,k=x.length))&&(p--,r(g,q<v?z:j,v,c))):(0==p&&(u=p=1),g=j.slice()),(v=g.length)<k&&g.unshift(0),r(x,g,k,c),-1==u&&(u=t(j,x,q,k=x.length))<1&&(p++,r(x,q<k?z:j,k,c)),k=x.length):0===u&&(p++,x=[0]),w[d++]=p,u&&x[0]?x[k++]=L[N]||0:(x=[L[N]],k=1)}while((N++<E||void 0!==x[0])&&A--);m=void 0!==x[0]}w[0]||w.shift()}if(1==f)b.e=h,s=m;else{for(d=1,p=w[0];p>=10;p/=10)d++;b.e=d+h*f-1,I(b,l?o+b.e+1:o,a,m)}return b}}();function I(e,t,r,n){var i,o,s,a,l,c,u,h,d,p=e.constructor;e:if(null!=t){if(!(h=e.d))return e;for(i=1,a=h[0];a>=10;a/=10)i++;if((o=t-i)<0)o+=7,s=t,l=(u=h[d=0])/w(10,i-s-1)%10|0;else if((d=Math.ceil((o+1)/7))>=(a=h.length)){if(!n)break e;for(;a++<=d;)h.push(0);u=l=0,i=1,s=(o%=7)-7+1}else{for(u=a=h[d],i=1;a>=10;a/=10)i++;l=(s=(o%=7)-7+i)<0?0:u/w(10,i-s-1)%10|0}if(n=n||t<0||void 0!==h[d+1]||(s<0?u:u%w(10,i-s-1)),c=r<4?(l||n)&&(0==r||r==(e.s<0?3:2)):l>5||5==l&&(4==r||n||6==r&&(o>0?s>0?u/w(10,i-s):0:h[d-1])%10&1||r==(e.s<0?8:7)),t<1||!h[0])return h.length=0,c?(t-=e.e+1,h[0]=w(10,(7-t%7)%7),e.e=-t||0):h[0]=e.e=0,e;if(0==o?(h.length=d,a=1,d--):(h.length=d+1,a=w(10,7-o),h[d]=s>0?(u/w(10,i-s)%w(10,s)|0)*a:0),c)for(;;){if(0==d){for(o=1,s=h[0];s>=10;s/=10)o++;for(s=h[0]+=a,a=1;s>=10;s/=10)a++;o!=a&&(e.e++,h[0]==M&&(h[0]=1));break}if(h[d]+=a,h[d]!=M)break;h[d--]=0,a=1}for(o=h.length;0===h[--o];)h.pop()}return f&&(e.e>p.maxE?(e.d=null,e.e=NaN):e.e<p.minE&&(e.e=0,e.d=[0])),e}function L(e,t,r){if(!e.isFinite())return G(e);var n,i=e.e,o=T(e.d),s=o.length;return t?(r&&(n=r-s)>0?o=o.charAt(0)+"."+o.slice(1)+P(n):s>1&&(o=o.charAt(0)+"."+o.slice(1)),o=o+(e.e<0?"e":"e+")+e.e):i<0?(o="0."+P(-i-1)+o,r&&(n=r-s)>0&&(o+=P(n))):i>=s?(o+=P(i+1-s),r&&(n=r-i-1)>0&&(o=o+"."+P(n))):((n=i+1)<s&&(o=o.slice(0,n)+"."+o.slice(n)),r&&(n=r-s)>0&&(i+1===s&&(o+="."),o+=P(n))),o}function j(e,t){var r=e[0];for(t*=7;r>=10;r/=10)t++;return t}function D(e,t,r){if(t>C)throw f=!0,r&&(e.precision=r),Error(v);return I(new e(h),t,1,!0)}function B(e,t,r){if(t>N)throw Error(v);return I(new e(d),t,r,!0)}function R(e){var t=e.length-1,r=7*t+1;if(t=e[t]){for(;t%10==0;t/=10)r--;for(t=e[0];t>=10;t/=10)r++}return r}function P(e){for(var t="";e--;)t+="0";return t}function F(e,t,r,n){var i,o=new e(1),s=Math.ceil(n/7+4);for(f=!1;;){if(r%2&&Q((o=o.times(t)).d,s)&&(i=!0),0===(r=y(r/2))){r=o.d.length-1,i&&0===o.d[r]&&++o.d[r];break}Q((t=t.times(t)).d,s)}return f=!0,o}function U(e){return 1&e.d[e.d.length-1]}function $(e,t,r){for(var n,i=new e(t[0]),o=0;++o<t.length;){if(!(n=new e(t[o])).s){i=n;break}i[r](n)&&(i=n)}return i}function H(e,t){var r,n,i,o,s,a,l,c=0,u=0,h=0,d=e.constructor,p=d.rounding,m=d.precision;if(!e.d||!e.d[0]||e.e>17)return new d(e.d?e.d[0]?e.s<0?0:1/0:1:e.s?e.s<0?0:e:NaN);for(null==t?(f=!1,l=m):l=t,a=new d(.03125);e.e>-2;)e=e.times(a),h+=5;for(l+=n=Math.log(w(2,h))/Math.LN10*2+5|0,r=o=s=new d(1),d.precision=l;;){if(o=I(o.times(e),l,1),r=r.times(++u),T((a=s.plus(_(o,r,l,1))).d).slice(0,l)===T(s.d).slice(0,l)){for(i=h;i--;)s=I(s.times(s),l,1);if(null!=t)return d.precision=m,s;if(!(c<3&&z(s.d,l-n,p,c)))return I(s,d.precision=m,p,f=!0);d.precision=l+=10,r=o=a=new d(1),u=0,c++}s=a}}function V(e,t){var r,n,i,o,s,a,l,c,u,h,d,p=1,m=e,g=m.d,v=m.constructor,b=v.rounding,y=v.precision;if(m.s<0||!g||!g[0]||!m.e&&1==g[0]&&1==g.length)return new v(g&&!g[0]?-1/0:1!=m.s?NaN:g?0:m);if(null==t?(f=!1,u=y):u=t,v.precision=u+=10,n=(r=T(g)).charAt(0),!(Math.abs(o=m.e)<15e14))return c=D(v,u+2,y).times(o+""),m=V(new v(n+"."+r.slice(1)),u-10).plus(c),v.precision=y,null==t?I(m,y,b,f=!0):m;for(;n<7&&1!=n||1==n&&r.charAt(1)>3;)n=(r=T((m=m.times(e)).d)).charAt(0),p++;for(o=m.e,n>1?(m=new v("0."+r),o++):m=new v(n+"."+r.slice(1)),h=m,l=s=m=_(m.minus(1),m.plus(1),u,1),d=I(m.times(m),u,1),i=3;;){if(s=I(s.times(d),u,1),T((c=l.plus(_(s,new v(i),u,1))).d).slice(0,u)===T(l.d).slice(0,u)){if(l=l.times(2),0!==o&&(l=l.plus(D(v,u+2,y).times(o+""))),l=_(l,new v(p),u,1),null!=t)return v.precision=y,l;if(!z(l.d,u-10,b,a))return I(l,v.precision=y,b,f=!0);v.precision=u+=10,c=s=m=_(h.minus(1),h.plus(1),u,1),d=I(m.times(m),u,1),i=a=1}l=c,i+=2}}function G(e){return String(e.s*e.s/0)}function W(e,t){var r,n,i;for((r=t.indexOf("."))>-1&&(t=t.replace(".","")),(n=t.search(/e/i))>0?(r<0&&(r=n),r+=+t.slice(n+1),t=t.substring(0,n)):r<0&&(r=t.length),n=0;48===t.charCodeAt(n);n++);for(i=t.length;48===t.charCodeAt(i-1);--i);if(t=t.slice(n,i)){if(i-=n,e.e=r=r-n-1,e.d=[],n=(r+1)%7,r<0&&(n+=7),n<i){for(n&&e.d.push(+t.slice(0,n)),i-=7;n<i;)e.d.push(+t.slice(n,n+=7));n=7-(t=t.slice(n)).length}else n-=i;for(;n--;)t+="0";e.d.push(+t),f&&(e.e>e.constructor.maxE?(e.d=null,e.e=NaN):e.e<e.constructor.minE&&(e.e=0,e.d=[0]))}else e.e=0,e.d=[0];return e}function X(e,t){var r,n,i,s,a,l,c,u,h;if("Infinity"===t||"NaN"===t)return+t||(e.s=NaN),e.e=NaN,e.d=null,e;if(k.test(t))r=16,t=t.toLowerCase();else if(x.test(t))r=2;else{if(!S.test(t))throw Error(g+t);r=8}for((s=t.search(/p/i))>0?(c=+t.slice(s+1),t=t.substring(2,s)):t=t.slice(2),a=(s=t.indexOf("."))>=0,n=e.constructor,a&&(s=(l=(t=t.replace(".","")).length)-s,i=F(n,new n(r),s,2*s)),s=h=(u=O(t,r,M)).length-1;0===u[s];--s)u.pop();return s<0?new n(0*e.s):(e.e=j(u,h),e.d=u,f=!1,a&&(e=_(e,i,4*l)),c&&(e=e.times(Math.abs(c)<54?w(2,c):o.pow(2,c))),f=!0,e)}function Y(e,t,r,n,i){var o,s,a,l,c=e.precision,u=Math.ceil(c/7);for(f=!1,l=r.times(r),a=new e(n);;){if(s=_(a.times(l),new e(t++*t++),c,1),a=i?n.plus(s):n.minus(s),n=_(s.times(l),new e(t++*t++),c,1),void 0!==(s=a.plus(n)).d[u]){for(o=u;s.d[o]===a.d[o]&&o--;);if(-1==o)break}o=a,a=n,n=s,s=o}return f=!0,s.d.length=u+1,s}function Z(e,t){for(var r=e;--t;)r*=e;return r}function J(e,t){var r,n=t.s<0,i=B(e,e.precision,1),o=i.times(.5);if((t=t.abs()).lte(o))return a=n?4:1,t;if((r=t.divToInt(i)).isZero())a=n?3:2;else{if((t=t.minus(r.times(i))).lte(o))return a=U(r)?n?2:3:n?4:1,t;a=U(r)?n?1:4:n?3:2}return t.minus(i).abs()}function K(e,t,r,n){var i,o,a,l,h,d,p,f,m,g=e.constructor,v=void 0!==r;if(v?(q(r,1,c),void 0===n?n=g.rounding:q(n,0,8)):(r=g.precision,n=g.rounding),e.isFinite()){for(v?(i=2,16==t?r=4*r-3:8==t&&(r=3*r-2)):i=t,(a=(p=L(e)).indexOf("."))>=0&&(p=p.replace(".",""),(m=new g(1)).e=p.length-a,m.d=O(L(m),10,i),m.e=m.d.length),o=h=(f=O(p,10,i)).length;0==f[--h];)f.pop();if(f[0]){if(a<0?o--:((e=new g(e)).d=f,e.e=o,f=(e=_(e,m,r,n,0,i)).d,o=e.e,d=s),a=f[r],l=i/2,d=d||void 0!==f[r+1],d=n<4?(void 0!==a||d)&&(0===n||n===(e.s<0?3:2)):a>l||a===l&&(4===n||d||6===n&&1&f[r-1]||n===(e.s<0?8:7)),f.length=r,d)for(;++f[--r]>i-1;)f[r]=0,r||(++o,f.unshift(1));for(h=f.length;!f[h-1];--h);for(a=0,p="";a<h;a++)p+=u.charAt(f[a]);if(v){if(h>1)if(16==t||8==t){for(a=16==t?4:3,--h;h%a;h++)p+="0";for(h=(f=O(p,i,t)).length;!f[h-1];--h);for(a=1,p="1.";a<h;a++)p+=u.charAt(f[a])}else p=p.charAt(0)+"."+p.slice(1);p=p+(o<0?"p":"p+")+o}else if(o<0){for(;++o;)p="0"+p;p="0."+p}else if(++o>h)for(o-=h;o--;)p+="0";else o<h&&(p=p.slice(0,o)+"."+p.slice(o))}else p=v?"0p+0":"0";p=(16==t?"0x":2==t?"0b":8==t?"0o":"")+p}else p=G(e);return e.s<0?"-"+p:p}function Q(e,t){if(e.length>t)return e.length=t,!0}function ee(e){return new this(e).abs()}function te(e){return new this(e).acos()}function re(e){return new this(e).acosh()}function ne(e,t){return new this(e).plus(t)}function ie(e){return new this(e).asin()}function oe(e){return new this(e).asinh()}function se(e){return new this(e).atan()}function ae(e){return new this(e).atanh()}function le(e,t){e=new this(e),t=new this(t);var r,n=this.precision,i=this.rounding,o=n+4;return e.s&&t.s?e.d||t.d?!t.d||e.isZero()?(r=t.s<0?B(this,n,i):new this(0)).s=e.s:!e.d||t.isZero()?(r=B(this,o,1).times(.5)).s=e.s:t.s<0?(this.precision=o,this.rounding=1,r=this.atan(_(e,t,o,1)),t=B(this,o,1),this.precision=n,this.rounding=i,r=e.s<0?r.minus(t):r.plus(t)):r=this.atan(_(e,t,o,1)):(r=B(this,o,1).times(t.s>0?.25:.75)).s=e.s:r=new this(NaN),r}function ce(e){return new this(e).cbrt()}function ue(e){return I(e=new this(e),e.e+1,2)}function he(e){if(!e||"object"!=typeof e)throw Error(m+"Object expected");var t,r,n,i=!0===e.defaults,o=["precision",1,c,"rounding",0,8,"toExpNeg",-l,0,"toExpPos",0,l,"maxE",0,l,"minE",-l,0,"modulo",0,9];for(t=0;t<o.length;t+=3)if(r=o[t],i&&(this[r]=p[r]),void 0!==(n=e[r])){if(!(y(n)===n&&n>=o[t+1]&&n<=o[t+2]))throw Error(g+r+": "+n);this[r]=n}if(r="crypto",i&&(this[r]=p[r]),void 0!==(n=e[r])){if(!0!==n&&!1!==n&&0!==n&&1!==n)throw Error(g+r+": "+n);if(n){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(b);this[r]=!0}else this[r]=!1}return this}function de(e){return new this(e).cos()}function pe(e){return new this(e).cosh()}function fe(e,t){return new this(e).div(t)}function me(e){return new this(e).exp()}function ge(e){return I(e=new this(e),e.e+1,3)}function ve(){var e,t,r=new this(0);for(f=!1,e=0;e<arguments.length;)if((t=new this(arguments[e++])).d)r.d&&(r=r.plus(t.times(t)));else{if(t.s)return f=!0,new this(1/0);r=t}return f=!0,r.sqrt()}function be(e){return e instanceof o||e&&"[object Decimal]"===e.name||!1}function ye(e){return new this(e).ln()}function we(e,t){return new this(e).log(t)}function xe(e){return new this(e).log(2)}function ke(e){return new this(e).log(10)}function Se(){return $(this,arguments,"lt")}function Ae(){return $(this,arguments,"gt")}function Me(e,t){return new this(e).mod(t)}function Ce(e,t){return new this(e).mul(t)}function Ne(e,t){return new this(e).pow(t)}function Ee(e){var t,r,n,i,o=0,s=new this(1),a=[];if(void 0===e?e=this.precision:q(e,1,c),n=Math.ceil(e/7),this.crypto)if(crypto.getRandomValues)for(t=crypto.getRandomValues(new Uint32Array(n));o<n;)(i=t[o])>=429e7?t[o]=crypto.getRandomValues(new Uint32Array(1))[0]:a[o++]=i%1e7;else{if(!crypto.randomBytes)throw Error(b);for(t=crypto.randomBytes(n*=4);o<n;)(i=t[o]+(t[o+1]<<8)+(t[o+2]<<16)+((127&t[o+3])<<24))>=214e7?crypto.randomBytes(4).copy(t,o):(a.push(i%1e7),o+=4);o=n/4}else for(;o<n;)a[o++]=1e7*Math.random()|0;for(e%=7,(n=a[--o])&&e&&(i=w(10,7-e),a[o]=(n/i|0)*i);0===a[o];o--)a.pop();if(o<0)r=0,a=[0];else{for(r=-1;0===a[0];r-=7)a.shift();for(n=1,i=a[0];i>=10;i/=10)n++;n<7&&(r-=7-n)}return s.e=r,s.d=a,s}function Te(e){return I(e=new this(e),e.e+1,this.rounding)}function qe(e){return(e=new this(e)).d?e.d[0]?e.s:0*e.s:e.s||NaN}function ze(e){return new this(e).sin()}function Oe(e){return new this(e).sinh()}function _e(e){return new this(e).sqrt()}function Ie(e,t){return new this(e).sub(t)}function Le(e){return new this(e).tan()}function je(e){return new this(e).tanh()}function De(e){return I(e=new this(e),e.e+1,1)}(o=function e(t){var r,n,i;function o(e){var t,r,n,i=this;if(!(i instanceof o))return new o(e);if(i.constructor=o,e instanceof o)return i.s=e.s,void(f?!e.d||e.e>o.maxE?(i.e=NaN,i.d=null):e.e<o.minE?(i.e=0,i.d=[0]):(i.e=e.e,i.d=e.d.slice()):(i.e=e.e,i.d=e.d?e.d.slice():e.d));if("number"===(n=typeof e)){if(0===e)return i.s=1/e<0?-1:1,i.e=0,void(i.d=[0]);if(e<0?(e=-e,i.s=-1):i.s=1,e===~~e&&e<1e7){for(t=0,r=e;r>=10;r/=10)t++;return void(f?t>o.maxE?(i.e=NaN,i.d=null):t<o.minE?(i.e=0,i.d=[0]):(i.e=t,i.d=[e]):(i.e=t,i.d=[e]))}return 0*e!=0?(e||(i.s=NaN),i.e=NaN,void(i.d=null)):W(i,e.toString())}if("string"!==n)throw Error(g+e);return 45===(r=e.charCodeAt(0))?(e=e.slice(1),i.s=-1):(43===r&&(e=e.slice(1)),i.s=1),A.test(e)?W(i,e):X(i,e)}if(o.prototype=E,o.ROUND_UP=0,o.ROUND_DOWN=1,o.ROUND_CEIL=2,o.ROUND_FLOOR=3,o.ROUND_HALF_UP=4,o.ROUND_HALF_DOWN=5,o.ROUND_HALF_EVEN=6,o.ROUND_HALF_CEIL=7,o.ROUND_HALF_FLOOR=8,o.EUCLID=9,o.config=o.set=he,o.clone=e,o.isDecimal=be,o.abs=ee,o.acos=te,o.acosh=re,o.add=ne,o.asin=ie,o.asinh=oe,o.atan=se,o.atanh=ae,o.atan2=le,o.cbrt=ce,o.ceil=ue,o.cos=de,o.cosh=pe,o.div=fe,o.exp=me,o.floor=ge,o.hypot=ve,o.ln=ye,o.log=we,o.log10=ke,o.log2=xe,o.max=Se,o.min=Ae,o.mod=Me,o.mul=Ce,o.pow=Ne,o.random=Ee,o.round=Te,o.sign=qe,o.sin=ze,o.sinh=Oe,o.sqrt=_e,o.sub=Ie,o.tan=Le,o.tanh=je,o.trunc=De,void 0===t&&(t={}),t&&!0!==t.defaults)for(i=["precision","rounding","toExpNeg","toExpPos","maxE","minE","modulo","crypto"],r=0;r<i.length;)t.hasOwnProperty(n=i[r++])||(t[n]=this[n]);return o.config(t),o}(p)).default=o.Decimal=o,h=new o(h),d=new o(d),void 0===(n=function(){return o}.call(t,r,t,e))||(e.exports=n)}()},"./node_modules/events/events.js":e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(r,n){function i(){void 0!==o&&e.removeListener("error",o),r([].slice.call(arguments))}var o;"error"!==t&&(o=function(r){e.removeListener(t,i),n(r)},e.once("error",o)),e.once(t,i)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var s=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function c(e,t,r,n){var i,o,s,c;if(a(r),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),s=o[t]),void 0===s)s=o[t]=r,++e._eventsCount;else if("function"==typeof s?s=o[t]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(i=l(e))>0&&s.length>i&&!s.warned){s.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=s.length,c=u,console&&console.warn&&console.warn(c)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=u.bind(n);return i.listener=r,n.wrapFn=i,i}function d(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):f(i,i.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function f(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");s=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return l(this)},o.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var i="error"===e,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var l=o[e];if(void 0===l)return!1;if("function"==typeof l)n(l,this,t);else{var c=l.length,u=f(l,c);for(r=0;r<c;++r)n(u[r],this,t)}return!0},o.prototype.addListener=function(e,t){return c(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return c(this,e,t,!0)},o.prototype.once=function(e,t){return a(t),this.on(e,h(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,h(this,e,t)),this},o.prototype.removeListener=function(e,t){var r,n,i,o,s;if(a(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){s=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,s||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},o.prototype.listeners=function(e){return d(this,e,!0)},o.prototype.rawListeners=function(e){return d(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},"./node_modules/fraction.js/fraction.js":function(e,t){var r;!function(n){"use strict";var i={s:1,n:0,d:1};function o(e){function t(){var t=Error.apply(this,arguments);t.name=this.name=e,this.stack=t.stack,this.message=t.message}function r(){}return r.prototype=Error.prototype,t.prototype=new r,t}var s=d.DivisionByZero=o("DivisionByZero"),a=d.InvalidParameter=o("InvalidParameter");function l(e,t){return isNaN(e=parseInt(e,10))&&c(),e*t}function c(){throw new a}var u=function(e,t){var r,n=0,o=1,a=1,u=0,h=0,d=0,p=1,f=1,m=0,g=1,v=1,b=1,y=1e7;if(null==e);else if(void 0!==t)a=(n=e)*(o=t);else switch(typeof e){case"object":"d"in e&&"n"in e?(n=e.n,o=e.d,"s"in e&&(n*=e.s)):0 in e?(n=e[0],1 in e&&(o=e[1])):c(),a=n*o;break;case"number":if(e<0&&(a=e,e=-e),e%1==0)n=e;else if(e>0){for(e>=1&&(e/=f=Math.pow(10,Math.floor(1+Math.log(e)/Math.LN10)));g<=y&&b<=y;){if(e===(r=(m+v)/(g+b))){g+b<=y?(n=m+v,o=g+b):b>g?(n=v,o=b):(n=m,o=g);break}e>r?(m+=v,g+=b):(v+=m,b+=g),g>y?(n=v,o=b):(n=m,o=g)}n*=f}else(isNaN(e)||isNaN(t))&&(o=n=NaN);break;case"string":if(null===(g=e.match(/\d+|./g))&&c(),"-"===g[m]?(a=-1,m++):"+"===g[m]&&m++,g.length===m+1?h=l(g[m++],a):"."===g[m+1]||"."===g[m]?("."!==g[m]&&(u=l(g[m++],a)),(++m+1===g.length||"("===g[m+1]&&")"===g[m+3]||"'"===g[m+1]&&"'"===g[m+3])&&(h=l(g[m],a),p=Math.pow(10,g[m].length),m++),("("===g[m]&&")"===g[m+2]||"'"===g[m]&&"'"===g[m+2])&&(d=l(g[m+1],a),f=Math.pow(10,g[m+1].length)-1,m+=3)):"/"===g[m+1]||":"===g[m+1]?(h=l(g[m],a),p=l(g[m+2],1),m+=3):"/"===g[m+3]&&" "===g[m+1]&&(u=l(g[m],a),h=l(g[m+2],a),p=l(g[m+4],1),m+=5),g.length<=m){a=n=d+(o=p*f)*u+f*h;break}default:c()}if(0===o)throw new s;i.s=a<0?-1:1,i.n=Math.abs(n),i.d=Math.abs(o)};function h(e,t){if(!e)return t;if(!t)return e;for(;;){if(!(e%=t))return t;if(!(t%=e))return e}}function d(e,t){if(!(this instanceof d))return new d(e,t);u(e,t),e=d.REDUCE?h(i.d,i.n):1,this.s=i.s,this.n=i.n/e,this.d=i.d/e}d.REDUCE=1,d.prototype={s:1,n:0,d:1,abs:function(){return new d(this.n,this.d)},neg:function(){return new d(-this.s*this.n,this.d)},add:function(e,t){return u(e,t),new d(this.s*this.n*i.d+i.s*this.d*i.n,this.d*i.d)},sub:function(e,t){return u(e,t),new d(this.s*this.n*i.d-i.s*this.d*i.n,this.d*i.d)},mul:function(e,t){return u(e,t),new d(this.s*i.s*this.n*i.n,this.d*i.d)},div:function(e,t){return u(e,t),new d(this.s*i.s*this.n*i.d,this.d*i.n)},clone:function(){return new d(this)},mod:function(e,t){return isNaN(this.n)||isNaN(this.d)?new d(NaN):void 0===e?new d(this.s*this.n%this.d,1):(u(e,t),0===i.n&&0===this.d&&d(0,0),new d(this.s*(i.d*this.n)%(i.n*this.d),i.d*this.d))},gcd:function(e,t){return u(e,t),new d(h(i.n,this.n)*h(i.d,this.d),i.d*this.d)},lcm:function(e,t){return u(e,t),0===i.n&&0===this.n?new d:new d(i.n*this.n,h(i.n,this.n)*h(i.d,this.d))},ceil:function(e){return e=Math.pow(10,e||0),isNaN(this.n)||isNaN(this.d)?new d(NaN):new d(Math.ceil(e*this.s*this.n/this.d),e)},floor:function(e){return e=Math.pow(10,e||0),isNaN(this.n)||isNaN(this.d)?new d(NaN):new d(Math.floor(e*this.s*this.n/this.d),e)},round:function(e){return e=Math.pow(10,e||0),isNaN(this.n)||isNaN(this.d)?new d(NaN):new d(Math.round(e*this.s*this.n/this.d),e)},inverse:function(){return new d(this.s*this.d,this.n)},pow:function(e){return e<0?new d(Math.pow(this.s*this.d,-e),Math.pow(this.n,-e)):new d(Math.pow(this.s*this.n,e),Math.pow(this.d,e))},equals:function(e,t){return u(e,t),this.s*this.n*i.d==i.s*i.n*this.d},compare:function(e,t){u(e,t);var r=this.s*this.n*i.d-i.s*i.n*this.d;return(0<r)-(r<0)},simplify:function(e){if(isNaN(this.n)||isNaN(this.d))return this;var t=this.abs().toContinued();function r(e){return 1===e.length?new d(e[0]):r(e.slice(1)).inverse().add(e[0])}e=e||.001;for(var n=0;n<t.length;n++){var i=r(t.slice(0,n+1));if(i.sub(this.abs()).abs().valueOf()<e)return i.mul(this.s)}return this},divisible:function(e,t){return u(e,t),!(!(i.n*this.d)||this.n*i.d%(i.n*this.d))},valueOf:function(){return this.s*this.n/this.d},toFraction:function(e){var t,r="",n=this.n,i=this.d;return this.s<0&&(r+="-"),1===i?r+=n:(e&&(t=Math.floor(n/i))>0&&(r+=t,r+=" ",n%=i),r+=n,r+="/",r+=i),r},toLatex:function(e){var t,r="",n=this.n,i=this.d;return this.s<0&&(r+="-"),1===i?r+=n:(e&&(t=Math.floor(n/i))>0&&(r+=t,n%=i),r+="\\frac{",r+=n,r+="}{",r+=i,r+="}"),r},toContinued:function(){var e,t=this.n,r=this.d,n=[];if(isNaN(t)||isNaN(r))return n;do{n.push(Math.floor(t/r)),e=t%r,t=r,r=e}while(1!==t);return n},toString:function(e){var t,r=this.n,n=this.d;if(isNaN(r)||isNaN(n))return"NaN";d.REDUCE||(r/=t=h(r,n),n/=t),e=e||15;var i=function(e,t){for(;t%2==0;t/=2);for(;t%5==0;t/=5);if(1===t)return 0;for(var r=10%t,n=1;1!==r;n++)if(r=10*r%t,n>2e3)return 0;return n}(0,n),o=function(e,t,r){for(var n=1,i=function(e,t,r){for(var n=1;t>0;e=e*e%r,t>>=1)1&t&&(n=n*e%r);return n}(10,r,t),o=0;o<300;o++){if(n===i)return o;n=10*n%t,i=10*i%t}return 0}(0,n,i),s=-1===this.s?"-":"";if(s+=r/n|0,r%=n,(r*=10)&&(s+="."),i){for(var a=o;a--;)s+=r/n|0,r%=n,r*=10;s+="(";for(a=i;a--;)s+=r/n|0,r%=n,r*=10;s+=")"}else for(a=e;r&&a--;)s+=r/n|0,r%=n,r*=10;return s}},void 0===(r=function(){return d}.apply(t,[]))||(e.exports=r)}()},"./node_modules/html-entities/lib/html4-entities.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("./node_modules/html-entities/lib/surrogate-pairs.js"),i=["apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams"],o=[39,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,34,38,60,62,338,339,352,353,376,710,732,8194,8195,8201,8204,8205,8206,8207,8211,8212,8216,8217,8218,8220,8221,8222,8224,8225,8240,8249,8250,8364,402,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,977,978,982,8226,8230,8242,8243,8254,8260,8472,8465,8476,8482,8501,8592,8593,8594,8595,8596,8629,8656,8657,8658,8659,8660,8704,8706,8707,8709,8711,8712,8713,8715,8719,8721,8722,8727,8730,8733,8734,8736,8743,8744,8745,8746,8747,8756,8764,8773,8776,8800,8801,8804,8805,8834,8835,8836,8838,8839,8853,8855,8869,8901,8968,8969,8970,8971,9001,9002,9674,9824,9827,9829,9830],s={},a={};!function(){for(var e=0,t=i.length;e<t;){var r=i[e],n=o[e];s[r]=String.fromCharCode(n),a[n]=r,e++}}();var l=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\w\d]+);?/g,(function(e,t){var r;if("#"===t.charAt(0)){var i="x"===t.charAt(1).toLowerCase()?parseInt(t.substr(2),16):parseInt(t.substr(1));(!isNaN(i)||i>=-32768)&&(r=i<=65535?String.fromCharCode(i):n.fromCodePoint(i))}else r=s[t];return r||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var i=a[e.charCodeAt(n)];r+=i?"&"+i+";":e.charAt(n),n++}return r},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",i=0;i<t;){var o=e.charCodeAt(i),s=a[o];s?r+="&"+s+";":o<32||o>126?o>=n.highSurrogateFrom&&o<=n.highSurrogateTo?(r+="&#"+n.getCodePoint(e,i)+";",i++):r+="&#"+o+";":r+=e.charAt(i),i++}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",i=0;i<t;){var o=e.charCodeAt(i);o<=255?r+=e[i++]:(o>=n.highSurrogateFrom&&o<=n.highSurrogateTo?(r+="&#"+n.getCodePoint(e,i)+";",i++):r+="&#"+o+";",i++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html4Entities=l},"./node_modules/html-entities/lib/html5-entities.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("./node_modules/html-entities/lib/surrogate-pairs.js"),i=[["Aacute",[193]],["aacute",[225]],["Abreve",[258]],["abreve",[259]],["ac",[8766]],["acd",[8767]],["acE",[8766,819]],["Acirc",[194]],["acirc",[226]],["acute",[180]],["Acy",[1040]],["acy",[1072]],["AElig",[198]],["aelig",[230]],["af",[8289]],["Afr",[120068]],["afr",[120094]],["Agrave",[192]],["agrave",[224]],["alefsym",[8501]],["aleph",[8501]],["Alpha",[913]],["alpha",[945]],["Amacr",[256]],["amacr",[257]],["amalg",[10815]],["amp",[38]],["AMP",[38]],["andand",[10837]],["And",[10835]],["and",[8743]],["andd",[10844]],["andslope",[10840]],["andv",[10842]],["ang",[8736]],["ange",[10660]],["angle",[8736]],["angmsdaa",[10664]],["angmsdab",[10665]],["angmsdac",[10666]],["angmsdad",[10667]],["angmsdae",[10668]],["angmsdaf",[10669]],["angmsdag",[10670]],["angmsdah",[10671]],["angmsd",[8737]],["angrt",[8735]],["angrtvb",[8894]],["angrtvbd",[10653]],["angsph",[8738]],["angst",[197]],["angzarr",[9084]],["Aogon",[260]],["aogon",[261]],["Aopf",[120120]],["aopf",[120146]],["apacir",[10863]],["ap",[8776]],["apE",[10864]],["ape",[8778]],["apid",[8779]],["apos",[39]],["ApplyFunction",[8289]],["approx",[8776]],["approxeq",[8778]],["Aring",[197]],["aring",[229]],["Ascr",[119964]],["ascr",[119990]],["Assign",[8788]],["ast",[42]],["asymp",[8776]],["asympeq",[8781]],["Atilde",[195]],["atilde",[227]],["Auml",[196]],["auml",[228]],["awconint",[8755]],["awint",[10769]],["backcong",[8780]],["backepsilon",[1014]],["backprime",[8245]],["backsim",[8765]],["backsimeq",[8909]],["Backslash",[8726]],["Barv",[10983]],["barvee",[8893]],["barwed",[8965]],["Barwed",[8966]],["barwedge",[8965]],["bbrk",[9141]],["bbrktbrk",[9142]],["bcong",[8780]],["Bcy",[1041]],["bcy",[1073]],["bdquo",[8222]],["becaus",[8757]],["because",[8757]],["Because",[8757]],["bemptyv",[10672]],["bepsi",[1014]],["bernou",[8492]],["Bernoullis",[8492]],["Beta",[914]],["beta",[946]],["beth",[8502]],["between",[8812]],["Bfr",[120069]],["bfr",[120095]],["bigcap",[8898]],["bigcirc",[9711]],["bigcup",[8899]],["bigodot",[10752]],["bigoplus",[10753]],["bigotimes",[10754]],["bigsqcup",[10758]],["bigstar",[9733]],["bigtriangledown",[9661]],["bigtriangleup",[9651]],["biguplus",[10756]],["bigvee",[8897]],["bigwedge",[8896]],["bkarow",[10509]],["blacklozenge",[10731]],["blacksquare",[9642]],["blacktriangle",[9652]],["blacktriangledown",[9662]],["blacktriangleleft",[9666]],["blacktriangleright",[9656]],["blank",[9251]],["blk12",[9618]],["blk14",[9617]],["blk34",[9619]],["block",[9608]],["bne",[61,8421]],["bnequiv",[8801,8421]],["bNot",[10989]],["bnot",[8976]],["Bopf",[120121]],["bopf",[120147]],["bot",[8869]],["bottom",[8869]],["bowtie",[8904]],["boxbox",[10697]],["boxdl",[9488]],["boxdL",[9557]],["boxDl",[9558]],["boxDL",[9559]],["boxdr",[9484]],["boxdR",[9554]],["boxDr",[9555]],["boxDR",[9556]],["boxh",[9472]],["boxH",[9552]],["boxhd",[9516]],["boxHd",[9572]],["boxhD",[9573]],["boxHD",[9574]],["boxhu",[9524]],["boxHu",[9575]],["boxhU",[9576]],["boxHU",[9577]],["boxminus",[8863]],["boxplus",[8862]],["boxtimes",[8864]],["boxul",[9496]],["boxuL",[9563]],["boxUl",[9564]],["boxUL",[9565]],["boxur",[9492]],["boxuR",[9560]],["boxUr",[9561]],["boxUR",[9562]],["boxv",[9474]],["boxV",[9553]],["boxvh",[9532]],["boxvH",[9578]],["boxVh",[9579]],["boxVH",[9580]],["boxvl",[9508]],["boxvL",[9569]],["boxVl",[9570]],["boxVL",[9571]],["boxvr",[9500]],["boxvR",[9566]],["boxVr",[9567]],["boxVR",[9568]],["bprime",[8245]],["breve",[728]],["Breve",[728]],["brvbar",[166]],["bscr",[119991]],["Bscr",[8492]],["bsemi",[8271]],["bsim",[8765]],["bsime",[8909]],["bsolb",[10693]],["bsol",[92]],["bsolhsub",[10184]],["bull",[8226]],["bullet",[8226]],["bump",[8782]],["bumpE",[10926]],["bumpe",[8783]],["Bumpeq",[8782]],["bumpeq",[8783]],["Cacute",[262]],["cacute",[263]],["capand",[10820]],["capbrcup",[10825]],["capcap",[10827]],["cap",[8745]],["Cap",[8914]],["capcup",[10823]],["capdot",[10816]],["CapitalDifferentialD",[8517]],["caps",[8745,65024]],["caret",[8257]],["caron",[711]],["Cayleys",[8493]],["ccaps",[10829]],["Ccaron",[268]],["ccaron",[269]],["Ccedil",[199]],["ccedil",[231]],["Ccirc",[264]],["ccirc",[265]],["Cconint",[8752]],["ccups",[10828]],["ccupssm",[10832]],["Cdot",[266]],["cdot",[267]],["cedil",[184]],["Cedilla",[184]],["cemptyv",[10674]],["cent",[162]],["centerdot",[183]],["CenterDot",[183]],["cfr",[120096]],["Cfr",[8493]],["CHcy",[1063]],["chcy",[1095]],["check",[10003]],["checkmark",[10003]],["Chi",[935]],["chi",[967]],["circ",[710]],["circeq",[8791]],["circlearrowleft",[8634]],["circlearrowright",[8635]],["circledast",[8859]],["circledcirc",[8858]],["circleddash",[8861]],["CircleDot",[8857]],["circledR",[174]],["circledS",[9416]],["CircleMinus",[8854]],["CirclePlus",[8853]],["CircleTimes",[8855]],["cir",[9675]],["cirE",[10691]],["cire",[8791]],["cirfnint",[10768]],["cirmid",[10991]],["cirscir",[10690]],["ClockwiseContourIntegral",[8754]],["clubs",[9827]],["clubsuit",[9827]],["colon",[58]],["Colon",[8759]],["Colone",[10868]],["colone",[8788]],["coloneq",[8788]],["comma",[44]],["commat",[64]],["comp",[8705]],["compfn",[8728]],["complement",[8705]],["complexes",[8450]],["cong",[8773]],["congdot",[10861]],["Congruent",[8801]],["conint",[8750]],["Conint",[8751]],["ContourIntegral",[8750]],["copf",[120148]],["Copf",[8450]],["coprod",[8720]],["Coproduct",[8720]],["copy",[169]],["COPY",[169]],["copysr",[8471]],["CounterClockwiseContourIntegral",[8755]],["crarr",[8629]],["cross",[10007]],["Cross",[10799]],["Cscr",[119966]],["cscr",[119992]],["csub",[10959]],["csube",[10961]],["csup",[10960]],["csupe",[10962]],["ctdot",[8943]],["cudarrl",[10552]],["cudarrr",[10549]],["cuepr",[8926]],["cuesc",[8927]],["cularr",[8630]],["cularrp",[10557]],["cupbrcap",[10824]],["cupcap",[10822]],["CupCap",[8781]],["cup",[8746]],["Cup",[8915]],["cupcup",[10826]],["cupdot",[8845]],["cupor",[10821]],["cups",[8746,65024]],["curarr",[8631]],["curarrm",[10556]],["curlyeqprec",[8926]],["curlyeqsucc",[8927]],["curlyvee",[8910]],["curlywedge",[8911]],["curren",[164]],["curvearrowleft",[8630]],["curvearrowright",[8631]],["cuvee",[8910]],["cuwed",[8911]],["cwconint",[8754]],["cwint",[8753]],["cylcty",[9005]],["dagger",[8224]],["Dagger",[8225]],["daleth",[8504]],["darr",[8595]],["Darr",[8609]],["dArr",[8659]],["dash",[8208]],["Dashv",[10980]],["dashv",[8867]],["dbkarow",[10511]],["dblac",[733]],["Dcaron",[270]],["dcaron",[271]],["Dcy",[1044]],["dcy",[1076]],["ddagger",[8225]],["ddarr",[8650]],["DD",[8517]],["dd",[8518]],["DDotrahd",[10513]],["ddotseq",[10871]],["deg",[176]],["Del",[8711]],["Delta",[916]],["delta",[948]],["demptyv",[10673]],["dfisht",[10623]],["Dfr",[120071]],["dfr",[120097]],["dHar",[10597]],["dharl",[8643]],["dharr",[8642]],["DiacriticalAcute",[180]],["DiacriticalDot",[729]],["DiacriticalDoubleAcute",[733]],["DiacriticalGrave",[96]],["DiacriticalTilde",[732]],["diam",[8900]],["diamond",[8900]],["Diamond",[8900]],["diamondsuit",[9830]],["diams",[9830]],["die",[168]],["DifferentialD",[8518]],["digamma",[989]],["disin",[8946]],["div",[247]],["divide",[247]],["divideontimes",[8903]],["divonx",[8903]],["DJcy",[1026]],["djcy",[1106]],["dlcorn",[8990]],["dlcrop",[8973]],["dollar",[36]],["Dopf",[120123]],["dopf",[120149]],["Dot",[168]],["dot",[729]],["DotDot",[8412]],["doteq",[8784]],["doteqdot",[8785]],["DotEqual",[8784]],["dotminus",[8760]],["dotplus",[8724]],["dotsquare",[8865]],["doublebarwedge",[8966]],["DoubleContourIntegral",[8751]],["DoubleDot",[168]],["DoubleDownArrow",[8659]],["DoubleLeftArrow",[8656]],["DoubleLeftRightArrow",[8660]],["DoubleLeftTee",[10980]],["DoubleLongLeftArrow",[10232]],["DoubleLongLeftRightArrow",[10234]],["DoubleLongRightArrow",[10233]],["DoubleRightArrow",[8658]],["DoubleRightTee",[8872]],["DoubleUpArrow",[8657]],["DoubleUpDownArrow",[8661]],["DoubleVerticalBar",[8741]],["DownArrowBar",[10515]],["downarrow",[8595]],["DownArrow",[8595]],["Downarrow",[8659]],["DownArrowUpArrow",[8693]],["DownBreve",[785]],["downdownarrows",[8650]],["downharpoonleft",[8643]],["downharpoonright",[8642]],["DownLeftRightVector",[10576]],["DownLeftTeeVector",[10590]],["DownLeftVectorBar",[10582]],["DownLeftVector",[8637]],["DownRightTeeVector",[10591]],["DownRightVectorBar",[10583]],["DownRightVector",[8641]],["DownTeeArrow",[8615]],["DownTee",[8868]],["drbkarow",[10512]],["drcorn",[8991]],["drcrop",[8972]],["Dscr",[119967]],["dscr",[119993]],["DScy",[1029]],["dscy",[1109]],["dsol",[10742]],["Dstrok",[272]],["dstrok",[273]],["dtdot",[8945]],["dtri",[9663]],["dtrif",[9662]],["duarr",[8693]],["duhar",[10607]],["dwangle",[10662]],["DZcy",[1039]],["dzcy",[1119]],["dzigrarr",[10239]],["Eacute",[201]],["eacute",[233]],["easter",[10862]],["Ecaron",[282]],["ecaron",[283]],["Ecirc",[202]],["ecirc",[234]],["ecir",[8790]],["ecolon",[8789]],["Ecy",[1069]],["ecy",[1101]],["eDDot",[10871]],["Edot",[278]],["edot",[279]],["eDot",[8785]],["ee",[8519]],["efDot",[8786]],["Efr",[120072]],["efr",[120098]],["eg",[10906]],["Egrave",[200]],["egrave",[232]],["egs",[10902]],["egsdot",[10904]],["el",[10905]],["Element",[8712]],["elinters",[9191]],["ell",[8467]],["els",[10901]],["elsdot",[10903]],["Emacr",[274]],["emacr",[275]],["empty",[8709]],["emptyset",[8709]],["EmptySmallSquare",[9723]],["emptyv",[8709]],["EmptyVerySmallSquare",[9643]],["emsp13",[8196]],["emsp14",[8197]],["emsp",[8195]],["ENG",[330]],["eng",[331]],["ensp",[8194]],["Eogon",[280]],["eogon",[281]],["Eopf",[120124]],["eopf",[120150]],["epar",[8917]],["eparsl",[10723]],["eplus",[10865]],["epsi",[949]],["Epsilon",[917]],["epsilon",[949]],["epsiv",[1013]],["eqcirc",[8790]],["eqcolon",[8789]],["eqsim",[8770]],["eqslantgtr",[10902]],["eqslantless",[10901]],["Equal",[10869]],["equals",[61]],["EqualTilde",[8770]],["equest",[8799]],["Equilibrium",[8652]],["equiv",[8801]],["equivDD",[10872]],["eqvparsl",[10725]],["erarr",[10609]],["erDot",[8787]],["escr",[8495]],["Escr",[8496]],["esdot",[8784]],["Esim",[10867]],["esim",[8770]],["Eta",[919]],["eta",[951]],["ETH",[208]],["eth",[240]],["Euml",[203]],["euml",[235]],["euro",[8364]],["excl",[33]],["exist",[8707]],["Exists",[8707]],["expectation",[8496]],["exponentiale",[8519]],["ExponentialE",[8519]],["fallingdotseq",[8786]],["Fcy",[1060]],["fcy",[1092]],["female",[9792]],["ffilig",[64259]],["fflig",[64256]],["ffllig",[64260]],["Ffr",[120073]],["ffr",[120099]],["filig",[64257]],["FilledSmallSquare",[9724]],["FilledVerySmallSquare",[9642]],["fjlig",[102,106]],["flat",[9837]],["fllig",[64258]],["fltns",[9649]],["fnof",[402]],["Fopf",[120125]],["fopf",[120151]],["forall",[8704]],["ForAll",[8704]],["fork",[8916]],["forkv",[10969]],["Fouriertrf",[8497]],["fpartint",[10765]],["frac12",[189]],["frac13",[8531]],["frac14",[188]],["frac15",[8533]],["frac16",[8537]],["frac18",[8539]],["frac23",[8532]],["frac25",[8534]],["frac34",[190]],["frac35",[8535]],["frac38",[8540]],["frac45",[8536]],["frac56",[8538]],["frac58",[8541]],["frac78",[8542]],["frasl",[8260]],["frown",[8994]],["fscr",[119995]],["Fscr",[8497]],["gacute",[501]],["Gamma",[915]],["gamma",[947]],["Gammad",[988]],["gammad",[989]],["gap",[10886]],["Gbreve",[286]],["gbreve",[287]],["Gcedil",[290]],["Gcirc",[284]],["gcirc",[285]],["Gcy",[1043]],["gcy",[1075]],["Gdot",[288]],["gdot",[289]],["ge",[8805]],["gE",[8807]],["gEl",[10892]],["gel",[8923]],["geq",[8805]],["geqq",[8807]],["geqslant",[10878]],["gescc",[10921]],["ges",[10878]],["gesdot",[10880]],["gesdoto",[10882]],["gesdotol",[10884]],["gesl",[8923,65024]],["gesles",[10900]],["Gfr",[120074]],["gfr",[120100]],["gg",[8811]],["Gg",[8921]],["ggg",[8921]],["gimel",[8503]],["GJcy",[1027]],["gjcy",[1107]],["gla",[10917]],["gl",[8823]],["glE",[10898]],["glj",[10916]],["gnap",[10890]],["gnapprox",[10890]],["gne",[10888]],["gnE",[8809]],["gneq",[10888]],["gneqq",[8809]],["gnsim",[8935]],["Gopf",[120126]],["gopf",[120152]],["grave",[96]],["GreaterEqual",[8805]],["GreaterEqualLess",[8923]],["GreaterFullEqual",[8807]],["GreaterGreater",[10914]],["GreaterLess",[8823]],["GreaterSlantEqual",[10878]],["GreaterTilde",[8819]],["Gscr",[119970]],["gscr",[8458]],["gsim",[8819]],["gsime",[10894]],["gsiml",[10896]],["gtcc",[10919]],["gtcir",[10874]],["gt",[62]],["GT",[62]],["Gt",[8811]],["gtdot",[8919]],["gtlPar",[10645]],["gtquest",[10876]],["gtrapprox",[10886]],["gtrarr",[10616]],["gtrdot",[8919]],["gtreqless",[8923]],["gtreqqless",[10892]],["gtrless",[8823]],["gtrsim",[8819]],["gvertneqq",[8809,65024]],["gvnE",[8809,65024]],["Hacek",[711]],["hairsp",[8202]],["half",[189]],["hamilt",[8459]],["HARDcy",[1066]],["hardcy",[1098]],["harrcir",[10568]],["harr",[8596]],["hArr",[8660]],["harrw",[8621]],["Hat",[94]],["hbar",[8463]],["Hcirc",[292]],["hcirc",[293]],["hearts",[9829]],["heartsuit",[9829]],["hellip",[8230]],["hercon",[8889]],["hfr",[120101]],["Hfr",[8460]],["HilbertSpace",[8459]],["hksearow",[10533]],["hkswarow",[10534]],["hoarr",[8703]],["homtht",[8763]],["hookleftarrow",[8617]],["hookrightarrow",[8618]],["hopf",[120153]],["Hopf",[8461]],["horbar",[8213]],["HorizontalLine",[9472]],["hscr",[119997]],["Hscr",[8459]],["hslash",[8463]],["Hstrok",[294]],["hstrok",[295]],["HumpDownHump",[8782]],["HumpEqual",[8783]],["hybull",[8259]],["hyphen",[8208]],["Iacute",[205]],["iacute",[237]],["ic",[8291]],["Icirc",[206]],["icirc",[238]],["Icy",[1048]],["icy",[1080]],["Idot",[304]],["IEcy",[1045]],["iecy",[1077]],["iexcl",[161]],["iff",[8660]],["ifr",[120102]],["Ifr",[8465]],["Igrave",[204]],["igrave",[236]],["ii",[8520]],["iiiint",[10764]],["iiint",[8749]],["iinfin",[10716]],["iiota",[8489]],["IJlig",[306]],["ijlig",[307]],["Imacr",[298]],["imacr",[299]],["image",[8465]],["ImaginaryI",[8520]],["imagline",[8464]],["imagpart",[8465]],["imath",[305]],["Im",[8465]],["imof",[8887]],["imped",[437]],["Implies",[8658]],["incare",[8453]],["in",[8712]],["infin",[8734]],["infintie",[10717]],["inodot",[305]],["intcal",[8890]],["int",[8747]],["Int",[8748]],["integers",[8484]],["Integral",[8747]],["intercal",[8890]],["Intersection",[8898]],["intlarhk",[10775]],["intprod",[10812]],["InvisibleComma",[8291]],["InvisibleTimes",[8290]],["IOcy",[1025]],["iocy",[1105]],["Iogon",[302]],["iogon",[303]],["Iopf",[120128]],["iopf",[120154]],["Iota",[921]],["iota",[953]],["iprod",[10812]],["iquest",[191]],["iscr",[119998]],["Iscr",[8464]],["isin",[8712]],["isindot",[8949]],["isinE",[8953]],["isins",[8948]],["isinsv",[8947]],["isinv",[8712]],["it",[8290]],["Itilde",[296]],["itilde",[297]],["Iukcy",[1030]],["iukcy",[1110]],["Iuml",[207]],["iuml",[239]],["Jcirc",[308]],["jcirc",[309]],["Jcy",[1049]],["jcy",[1081]],["Jfr",[120077]],["jfr",[120103]],["jmath",[567]],["Jopf",[120129]],["jopf",[120155]],["Jscr",[119973]],["jscr",[119999]],["Jsercy",[1032]],["jsercy",[1112]],["Jukcy",[1028]],["jukcy",[1108]],["Kappa",[922]],["kappa",[954]],["kappav",[1008]],["Kcedil",[310]],["kcedil",[311]],["Kcy",[1050]],["kcy",[1082]],["Kfr",[120078]],["kfr",[120104]],["kgreen",[312]],["KHcy",[1061]],["khcy",[1093]],["KJcy",[1036]],["kjcy",[1116]],["Kopf",[120130]],["kopf",[120156]],["Kscr",[119974]],["kscr",[12e4]],["lAarr",[8666]],["Lacute",[313]],["lacute",[314]],["laemptyv",[10676]],["lagran",[8466]],["Lambda",[923]],["lambda",[955]],["lang",[10216]],["Lang",[10218]],["langd",[10641]],["langle",[10216]],["lap",[10885]],["Laplacetrf",[8466]],["laquo",[171]],["larrb",[8676]],["larrbfs",[10527]],["larr",[8592]],["Larr",[8606]],["lArr",[8656]],["larrfs",[10525]],["larrhk",[8617]],["larrlp",[8619]],["larrpl",[10553]],["larrsim",[10611]],["larrtl",[8610]],["latail",[10521]],["lAtail",[10523]],["lat",[10923]],["late",[10925]],["lates",[10925,65024]],["lbarr",[10508]],["lBarr",[10510]],["lbbrk",[10098]],["lbrace",[123]],["lbrack",[91]],["lbrke",[10635]],["lbrksld",[10639]],["lbrkslu",[10637]],["Lcaron",[317]],["lcaron",[318]],["Lcedil",[315]],["lcedil",[316]],["lceil",[8968]],["lcub",[123]],["Lcy",[1051]],["lcy",[1083]],["ldca",[10550]],["ldquo",[8220]],["ldquor",[8222]],["ldrdhar",[10599]],["ldrushar",[10571]],["ldsh",[8626]],["le",[8804]],["lE",[8806]],["LeftAngleBracket",[10216]],["LeftArrowBar",[8676]],["leftarrow",[8592]],["LeftArrow",[8592]],["Leftarrow",[8656]],["LeftArrowRightArrow",[8646]],["leftarrowtail",[8610]],["LeftCeiling",[8968]],["LeftDoubleBracket",[10214]],["LeftDownTeeVector",[10593]],["LeftDownVectorBar",[10585]],["LeftDownVector",[8643]],["LeftFloor",[8970]],["leftharpoondown",[8637]],["leftharpoonup",[8636]],["leftleftarrows",[8647]],["leftrightarrow",[8596]],["LeftRightArrow",[8596]],["Leftrightarrow",[8660]],["leftrightarrows",[8646]],["leftrightharpoons",[8651]],["leftrightsquigarrow",[8621]],["LeftRightVector",[10574]],["LeftTeeArrow",[8612]],["LeftTee",[8867]],["LeftTeeVector",[10586]],["leftthreetimes",[8907]],["LeftTriangleBar",[10703]],["LeftTriangle",[8882]],["LeftTriangleEqual",[8884]],["LeftUpDownVector",[10577]],["LeftUpTeeVector",[10592]],["LeftUpVectorBar",[10584]],["LeftUpVector",[8639]],["LeftVectorBar",[10578]],["LeftVector",[8636]],["lEg",[10891]],["leg",[8922]],["leq",[8804]],["leqq",[8806]],["leqslant",[10877]],["lescc",[10920]],["les",[10877]],["lesdot",[10879]],["lesdoto",[10881]],["lesdotor",[10883]],["lesg",[8922,65024]],["lesges",[10899]],["lessapprox",[10885]],["lessdot",[8918]],["lesseqgtr",[8922]],["lesseqqgtr",[10891]],["LessEqualGreater",[8922]],["LessFullEqual",[8806]],["LessGreater",[8822]],["lessgtr",[8822]],["LessLess",[10913]],["lesssim",[8818]],["LessSlantEqual",[10877]],["LessTilde",[8818]],["lfisht",[10620]],["lfloor",[8970]],["Lfr",[120079]],["lfr",[120105]],["lg",[8822]],["lgE",[10897]],["lHar",[10594]],["lhard",[8637]],["lharu",[8636]],["lharul",[10602]],["lhblk",[9604]],["LJcy",[1033]],["ljcy",[1113]],["llarr",[8647]],["ll",[8810]],["Ll",[8920]],["llcorner",[8990]],["Lleftarrow",[8666]],["llhard",[10603]],["lltri",[9722]],["Lmidot",[319]],["lmidot",[320]],["lmoustache",[9136]],["lmoust",[9136]],["lnap",[10889]],["lnapprox",[10889]],["lne",[10887]],["lnE",[8808]],["lneq",[10887]],["lneqq",[8808]],["lnsim",[8934]],["loang",[10220]],["loarr",[8701]],["lobrk",[10214]],["longleftarrow",[10229]],["LongLeftArrow",[10229]],["Longleftarrow",[10232]],["longleftrightarrow",[10231]],["LongLeftRightArrow",[10231]],["Longleftrightarrow",[10234]],["longmapsto",[10236]],["longrightarrow",[10230]],["LongRightArrow",[10230]],["Longrightarrow",[10233]],["looparrowleft",[8619]],["looparrowright",[8620]],["lopar",[10629]],["Lopf",[120131]],["lopf",[120157]],["loplus",[10797]],["lotimes",[10804]],["lowast",[8727]],["lowbar",[95]],["LowerLeftArrow",[8601]],["LowerRightArrow",[8600]],["loz",[9674]],["lozenge",[9674]],["lozf",[10731]],["lpar",[40]],["lparlt",[10643]],["lrarr",[8646]],["lrcorner",[8991]],["lrhar",[8651]],["lrhard",[10605]],["lrm",[8206]],["lrtri",[8895]],["lsaquo",[8249]],["lscr",[120001]],["Lscr",[8466]],["lsh",[8624]],["Lsh",[8624]],["lsim",[8818]],["lsime",[10893]],["lsimg",[10895]],["lsqb",[91]],["lsquo",[8216]],["lsquor",[8218]],["Lstrok",[321]],["lstrok",[322]],["ltcc",[10918]],["ltcir",[10873]],["lt",[60]],["LT",[60]],["Lt",[8810]],["ltdot",[8918]],["lthree",[8907]],["ltimes",[8905]],["ltlarr",[10614]],["ltquest",[10875]],["ltri",[9667]],["ltrie",[8884]],["ltrif",[9666]],["ltrPar",[10646]],["lurdshar",[10570]],["luruhar",[10598]],["lvertneqq",[8808,65024]],["lvnE",[8808,65024]],["macr",[175]],["male",[9794]],["malt",[10016]],["maltese",[10016]],["Map",[10501]],["map",[8614]],["mapsto",[8614]],["mapstodown",[8615]],["mapstoleft",[8612]],["mapstoup",[8613]],["marker",[9646]],["mcomma",[10793]],["Mcy",[1052]],["mcy",[1084]],["mdash",[8212]],["mDDot",[8762]],["measuredangle",[8737]],["MediumSpace",[8287]],["Mellintrf",[8499]],["Mfr",[120080]],["mfr",[120106]],["mho",[8487]],["micro",[181]],["midast",[42]],["midcir",[10992]],["mid",[8739]],["middot",[183]],["minusb",[8863]],["minus",[8722]],["minusd",[8760]],["minusdu",[10794]],["MinusPlus",[8723]],["mlcp",[10971]],["mldr",[8230]],["mnplus",[8723]],["models",[8871]],["Mopf",[120132]],["mopf",[120158]],["mp",[8723]],["mscr",[120002]],["Mscr",[8499]],["mstpos",[8766]],["Mu",[924]],["mu",[956]],["multimap",[8888]],["mumap",[8888]],["nabla",[8711]],["Nacute",[323]],["nacute",[324]],["nang",[8736,8402]],["nap",[8777]],["napE",[10864,824]],["napid",[8779,824]],["napos",[329]],["napprox",[8777]],["natural",[9838]],["naturals",[8469]],["natur",[9838]],["nbsp",[160]],["nbump",[8782,824]],["nbumpe",[8783,824]],["ncap",[10819]],["Ncaron",[327]],["ncaron",[328]],["Ncedil",[325]],["ncedil",[326]],["ncong",[8775]],["ncongdot",[10861,824]],["ncup",[10818]],["Ncy",[1053]],["ncy",[1085]],["ndash",[8211]],["nearhk",[10532]],["nearr",[8599]],["neArr",[8663]],["nearrow",[8599]],["ne",[8800]],["nedot",[8784,824]],["NegativeMediumSpace",[8203]],["NegativeThickSpace",[8203]],["NegativeThinSpace",[8203]],["NegativeVeryThinSpace",[8203]],["nequiv",[8802]],["nesear",[10536]],["nesim",[8770,824]],["NestedGreaterGreater",[8811]],["NestedLessLess",[8810]],["nexist",[8708]],["nexists",[8708]],["Nfr",[120081]],["nfr",[120107]],["ngE",[8807,824]],["nge",[8817]],["ngeq",[8817]],["ngeqq",[8807,824]],["ngeqslant",[10878,824]],["nges",[10878,824]],["nGg",[8921,824]],["ngsim",[8821]],["nGt",[8811,8402]],["ngt",[8815]],["ngtr",[8815]],["nGtv",[8811,824]],["nharr",[8622]],["nhArr",[8654]],["nhpar",[10994]],["ni",[8715]],["nis",[8956]],["nisd",[8954]],["niv",[8715]],["NJcy",[1034]],["njcy",[1114]],["nlarr",[8602]],["nlArr",[8653]],["nldr",[8229]],["nlE",[8806,824]],["nle",[8816]],["nleftarrow",[8602]],["nLeftarrow",[8653]],["nleftrightarrow",[8622]],["nLeftrightarrow",[8654]],["nleq",[8816]],["nleqq",[8806,824]],["nleqslant",[10877,824]],["nles",[10877,824]],["nless",[8814]],["nLl",[8920,824]],["nlsim",[8820]],["nLt",[8810,8402]],["nlt",[8814]],["nltri",[8938]],["nltrie",[8940]],["nLtv",[8810,824]],["nmid",[8740]],["NoBreak",[8288]],["NonBreakingSpace",[160]],["nopf",[120159]],["Nopf",[8469]],["Not",[10988]],["not",[172]],["NotCongruent",[8802]],["NotCupCap",[8813]],["NotDoubleVerticalBar",[8742]],["NotElement",[8713]],["NotEqual",[8800]],["NotEqualTilde",[8770,824]],["NotExists",[8708]],["NotGreater",[8815]],["NotGreaterEqual",[8817]],["NotGreaterFullEqual",[8807,824]],["NotGreaterGreater",[8811,824]],["NotGreaterLess",[8825]],["NotGreaterSlantEqual",[10878,824]],["NotGreaterTilde",[8821]],["NotHumpDownHump",[8782,824]],["NotHumpEqual",[8783,824]],["notin",[8713]],["notindot",[8949,824]],["notinE",[8953,824]],["notinva",[8713]],["notinvb",[8951]],["notinvc",[8950]],["NotLeftTriangleBar",[10703,824]],["NotLeftTriangle",[8938]],["NotLeftTriangleEqual",[8940]],["NotLess",[8814]],["NotLessEqual",[8816]],["NotLessGreater",[8824]],["NotLessLess",[8810,824]],["NotLessSlantEqual",[10877,824]],["NotLessTilde",[8820]],["NotNestedGreaterGreater",[10914,824]],["NotNestedLessLess",[10913,824]],["notni",[8716]],["notniva",[8716]],["notnivb",[8958]],["notnivc",[8957]],["NotPrecedes",[8832]],["NotPrecedesEqual",[10927,824]],["NotPrecedesSlantEqual",[8928]],["NotReverseElement",[8716]],["NotRightTriangleBar",[10704,824]],["NotRightTriangle",[8939]],["NotRightTriangleEqual",[8941]],["NotSquareSubset",[8847,824]],["NotSquareSubsetEqual",[8930]],["NotSquareSuperset",[8848,824]],["NotSquareSupersetEqual",[8931]],["NotSubset",[8834,8402]],["NotSubsetEqual",[8840]],["NotSucceeds",[8833]],["NotSucceedsEqual",[10928,824]],["NotSucceedsSlantEqual",[8929]],["NotSucceedsTilde",[8831,824]],["NotSuperset",[8835,8402]],["NotSupersetEqual",[8841]],["NotTilde",[8769]],["NotTildeEqual",[8772]],["NotTildeFullEqual",[8775]],["NotTildeTilde",[8777]],["NotVerticalBar",[8740]],["nparallel",[8742]],["npar",[8742]],["nparsl",[11005,8421]],["npart",[8706,824]],["npolint",[10772]],["npr",[8832]],["nprcue",[8928]],["nprec",[8832]],["npreceq",[10927,824]],["npre",[10927,824]],["nrarrc",[10547,824]],["nrarr",[8603]],["nrArr",[8655]],["nrarrw",[8605,824]],["nrightarrow",[8603]],["nRightarrow",[8655]],["nrtri",[8939]],["nrtrie",[8941]],["nsc",[8833]],["nsccue",[8929]],["nsce",[10928,824]],["Nscr",[119977]],["nscr",[120003]],["nshortmid",[8740]],["nshortparallel",[8742]],["nsim",[8769]],["nsime",[8772]],["nsimeq",[8772]],["nsmid",[8740]],["nspar",[8742]],["nsqsube",[8930]],["nsqsupe",[8931]],["nsub",[8836]],["nsubE",[10949,824]],["nsube",[8840]],["nsubset",[8834,8402]],["nsubseteq",[8840]],["nsubseteqq",[10949,824]],["nsucc",[8833]],["nsucceq",[10928,824]],["nsup",[8837]],["nsupE",[10950,824]],["nsupe",[8841]],["nsupset",[8835,8402]],["nsupseteq",[8841]],["nsupseteqq",[10950,824]],["ntgl",[8825]],["Ntilde",[209]],["ntilde",[241]],["ntlg",[8824]],["ntriangleleft",[8938]],["ntrianglelefteq",[8940]],["ntriangleright",[8939]],["ntrianglerighteq",[8941]],["Nu",[925]],["nu",[957]],["num",[35]],["numero",[8470]],["numsp",[8199]],["nvap",[8781,8402]],["nvdash",[8876]],["nvDash",[8877]],["nVdash",[8878]],["nVDash",[8879]],["nvge",[8805,8402]],["nvgt",[62,8402]],["nvHarr",[10500]],["nvinfin",[10718]],["nvlArr",[10498]],["nvle",[8804,8402]],["nvlt",[60,8402]],["nvltrie",[8884,8402]],["nvrArr",[10499]],["nvrtrie",[8885,8402]],["nvsim",[8764,8402]],["nwarhk",[10531]],["nwarr",[8598]],["nwArr",[8662]],["nwarrow",[8598]],["nwnear",[10535]],["Oacute",[211]],["oacute",[243]],["oast",[8859]],["Ocirc",[212]],["ocirc",[244]],["ocir",[8858]],["Ocy",[1054]],["ocy",[1086]],["odash",[8861]],["Odblac",[336]],["odblac",[337]],["odiv",[10808]],["odot",[8857]],["odsold",[10684]],["OElig",[338]],["oelig",[339]],["ofcir",[10687]],["Ofr",[120082]],["ofr",[120108]],["ogon",[731]],["Ograve",[210]],["ograve",[242]],["ogt",[10689]],["ohbar",[10677]],["ohm",[937]],["oint",[8750]],["olarr",[8634]],["olcir",[10686]],["olcross",[10683]],["oline",[8254]],["olt",[10688]],["Omacr",[332]],["omacr",[333]],["Omega",[937]],["omega",[969]],["Omicron",[927]],["omicron",[959]],["omid",[10678]],["ominus",[8854]],["Oopf",[120134]],["oopf",[120160]],["opar",[10679]],["OpenCurlyDoubleQuote",[8220]],["OpenCurlyQuote",[8216]],["operp",[10681]],["oplus",[8853]],["orarr",[8635]],["Or",[10836]],["or",[8744]],["ord",[10845]],["order",[8500]],["orderof",[8500]],["ordf",[170]],["ordm",[186]],["origof",[8886]],["oror",[10838]],["orslope",[10839]],["orv",[10843]],["oS",[9416]],["Oscr",[119978]],["oscr",[8500]],["Oslash",[216]],["oslash",[248]],["osol",[8856]],["Otilde",[213]],["otilde",[245]],["otimesas",[10806]],["Otimes",[10807]],["otimes",[8855]],["Ouml",[214]],["ouml",[246]],["ovbar",[9021]],["OverBar",[8254]],["OverBrace",[9182]],["OverBracket",[9140]],["OverParenthesis",[9180]],["para",[182]],["parallel",[8741]],["par",[8741]],["parsim",[10995]],["parsl",[11005]],["part",[8706]],["PartialD",[8706]],["Pcy",[1055]],["pcy",[1087]],["percnt",[37]],["period",[46]],["permil",[8240]],["perp",[8869]],["pertenk",[8241]],["Pfr",[120083]],["pfr",[120109]],["Phi",[934]],["phi",[966]],["phiv",[981]],["phmmat",[8499]],["phone",[9742]],["Pi",[928]],["pi",[960]],["pitchfork",[8916]],["piv",[982]],["planck",[8463]],["planckh",[8462]],["plankv",[8463]],["plusacir",[10787]],["plusb",[8862]],["pluscir",[10786]],["plus",[43]],["plusdo",[8724]],["plusdu",[10789]],["pluse",[10866]],["PlusMinus",[177]],["plusmn",[177]],["plussim",[10790]],["plustwo",[10791]],["pm",[177]],["Poincareplane",[8460]],["pointint",[10773]],["popf",[120161]],["Popf",[8473]],["pound",[163]],["prap",[10935]],["Pr",[10939]],["pr",[8826]],["prcue",[8828]],["precapprox",[10935]],["prec",[8826]],["preccurlyeq",[8828]],["Precedes",[8826]],["PrecedesEqual",[10927]],["PrecedesSlantEqual",[8828]],["PrecedesTilde",[8830]],["preceq",[10927]],["precnapprox",[10937]],["precneqq",[10933]],["precnsim",[8936]],["pre",[10927]],["prE",[10931]],["precsim",[8830]],["prime",[8242]],["Prime",[8243]],["primes",[8473]],["prnap",[10937]],["prnE",[10933]],["prnsim",[8936]],["prod",[8719]],["Product",[8719]],["profalar",[9006]],["profline",[8978]],["profsurf",[8979]],["prop",[8733]],["Proportional",[8733]],["Proportion",[8759]],["propto",[8733]],["prsim",[8830]],["prurel",[8880]],["Pscr",[119979]],["pscr",[120005]],["Psi",[936]],["psi",[968]],["puncsp",[8200]],["Qfr",[120084]],["qfr",[120110]],["qint",[10764]],["qopf",[120162]],["Qopf",[8474]],["qprime",[8279]],["Qscr",[119980]],["qscr",[120006]],["quaternions",[8461]],["quatint",[10774]],["quest",[63]],["questeq",[8799]],["quot",[34]],["QUOT",[34]],["rAarr",[8667]],["race",[8765,817]],["Racute",[340]],["racute",[341]],["radic",[8730]],["raemptyv",[10675]],["rang",[10217]],["Rang",[10219]],["rangd",[10642]],["range",[10661]],["rangle",[10217]],["raquo",[187]],["rarrap",[10613]],["rarrb",[8677]],["rarrbfs",[10528]],["rarrc",[10547]],["rarr",[8594]],["Rarr",[8608]],["rArr",[8658]],["rarrfs",[10526]],["rarrhk",[8618]],["rarrlp",[8620]],["rarrpl",[10565]],["rarrsim",[10612]],["Rarrtl",[10518]],["rarrtl",[8611]],["rarrw",[8605]],["ratail",[10522]],["rAtail",[10524]],["ratio",[8758]],["rationals",[8474]],["rbarr",[10509]],["rBarr",[10511]],["RBarr",[10512]],["rbbrk",[10099]],["rbrace",[125]],["rbrack",[93]],["rbrke",[10636]],["rbrksld",[10638]],["rbrkslu",[10640]],["Rcaron",[344]],["rcaron",[345]],["Rcedil",[342]],["rcedil",[343]],["rceil",[8969]],["rcub",[125]],["Rcy",[1056]],["rcy",[1088]],["rdca",[10551]],["rdldhar",[10601]],["rdquo",[8221]],["rdquor",[8221]],["CloseCurlyDoubleQuote",[8221]],["rdsh",[8627]],["real",[8476]],["realine",[8475]],["realpart",[8476]],["reals",[8477]],["Re",[8476]],["rect",[9645]],["reg",[174]],["REG",[174]],["ReverseElement",[8715]],["ReverseEquilibrium",[8651]],["ReverseUpEquilibrium",[10607]],["rfisht",[10621]],["rfloor",[8971]],["rfr",[120111]],["Rfr",[8476]],["rHar",[10596]],["rhard",[8641]],["rharu",[8640]],["rharul",[10604]],["Rho",[929]],["rho",[961]],["rhov",[1009]],["RightAngleBracket",[10217]],["RightArrowBar",[8677]],["rightarrow",[8594]],["RightArrow",[8594]],["Rightarrow",[8658]],["RightArrowLeftArrow",[8644]],["rightarrowtail",[8611]],["RightCeiling",[8969]],["RightDoubleBracket",[10215]],["RightDownTeeVector",[10589]],["RightDownVectorBar",[10581]],["RightDownVector",[8642]],["RightFloor",[8971]],["rightharpoondown",[8641]],["rightharpoonup",[8640]],["rightleftarrows",[8644]],["rightleftharpoons",[8652]],["rightrightarrows",[8649]],["rightsquigarrow",[8605]],["RightTeeArrow",[8614]],["RightTee",[8866]],["RightTeeVector",[10587]],["rightthreetimes",[8908]],["RightTriangleBar",[10704]],["RightTriangle",[8883]],["RightTriangleEqual",[8885]],["RightUpDownVector",[10575]],["RightUpTeeVector",[10588]],["RightUpVectorBar",[10580]],["RightUpVector",[8638]],["RightVectorBar",[10579]],["RightVector",[8640]],["ring",[730]],["risingdotseq",[8787]],["rlarr",[8644]],["rlhar",[8652]],["rlm",[8207]],["rmoustache",[9137]],["rmoust",[9137]],["rnmid",[10990]],["roang",[10221]],["roarr",[8702]],["robrk",[10215]],["ropar",[10630]],["ropf",[120163]],["Ropf",[8477]],["roplus",[10798]],["rotimes",[10805]],["RoundImplies",[10608]],["rpar",[41]],["rpargt",[10644]],["rppolint",[10770]],["rrarr",[8649]],["Rrightarrow",[8667]],["rsaquo",[8250]],["rscr",[120007]],["Rscr",[8475]],["rsh",[8625]],["Rsh",[8625]],["rsqb",[93]],["rsquo",[8217]],["rsquor",[8217]],["CloseCurlyQuote",[8217]],["rthree",[8908]],["rtimes",[8906]],["rtri",[9657]],["rtrie",[8885]],["rtrif",[9656]],["rtriltri",[10702]],["RuleDelayed",[10740]],["ruluhar",[10600]],["rx",[8478]],["Sacute",[346]],["sacute",[347]],["sbquo",[8218]],["scap",[10936]],["Scaron",[352]],["scaron",[353]],["Sc",[10940]],["sc",[8827]],["sccue",[8829]],["sce",[10928]],["scE",[10932]],["Scedil",[350]],["scedil",[351]],["Scirc",[348]],["scirc",[349]],["scnap",[10938]],["scnE",[10934]],["scnsim",[8937]],["scpolint",[10771]],["scsim",[8831]],["Scy",[1057]],["scy",[1089]],["sdotb",[8865]],["sdot",[8901]],["sdote",[10854]],["searhk",[10533]],["searr",[8600]],["seArr",[8664]],["searrow",[8600]],["sect",[167]],["semi",[59]],["seswar",[10537]],["setminus",[8726]],["setmn",[8726]],["sext",[10038]],["Sfr",[120086]],["sfr",[120112]],["sfrown",[8994]],["sharp",[9839]],["SHCHcy",[1065]],["shchcy",[1097]],["SHcy",[1064]],["shcy",[1096]],["ShortDownArrow",[8595]],["ShortLeftArrow",[8592]],["shortmid",[8739]],["shortparallel",[8741]],["ShortRightArrow",[8594]],["ShortUpArrow",[8593]],["shy",[173]],["Sigma",[931]],["sigma",[963]],["sigmaf",[962]],["sigmav",[962]],["sim",[8764]],["simdot",[10858]],["sime",[8771]],["simeq",[8771]],["simg",[10910]],["simgE",[10912]],["siml",[10909]],["simlE",[10911]],["simne",[8774]],["simplus",[10788]],["simrarr",[10610]],["slarr",[8592]],["SmallCircle",[8728]],["smallsetminus",[8726]],["smashp",[10803]],["smeparsl",[10724]],["smid",[8739]],["smile",[8995]],["smt",[10922]],["smte",[10924]],["smtes",[10924,65024]],["SOFTcy",[1068]],["softcy",[1100]],["solbar",[9023]],["solb",[10692]],["sol",[47]],["Sopf",[120138]],["sopf",[120164]],["spades",[9824]],["spadesuit",[9824]],["spar",[8741]],["sqcap",[8851]],["sqcaps",[8851,65024]],["sqcup",[8852]],["sqcups",[8852,65024]],["Sqrt",[8730]],["sqsub",[8847]],["sqsube",[8849]],["sqsubset",[8847]],["sqsubseteq",[8849]],["sqsup",[8848]],["sqsupe",[8850]],["sqsupset",[8848]],["sqsupseteq",[8850]],["square",[9633]],["Square",[9633]],["SquareIntersection",[8851]],["SquareSubset",[8847]],["SquareSubsetEqual",[8849]],["SquareSuperset",[8848]],["SquareSupersetEqual",[8850]],["SquareUnion",[8852]],["squarf",[9642]],["squ",[9633]],["squf",[9642]],["srarr",[8594]],["Sscr",[119982]],["sscr",[120008]],["ssetmn",[8726]],["ssmile",[8995]],["sstarf",[8902]],["Star",[8902]],["star",[9734]],["starf",[9733]],["straightepsilon",[1013]],["straightphi",[981]],["strns",[175]],["sub",[8834]],["Sub",[8912]],["subdot",[10941]],["subE",[10949]],["sube",[8838]],["subedot",[10947]],["submult",[10945]],["subnE",[10955]],["subne",[8842]],["subplus",[10943]],["subrarr",[10617]],["subset",[8834]],["Subset",[8912]],["subseteq",[8838]],["subseteqq",[10949]],["SubsetEqual",[8838]],["subsetneq",[8842]],["subsetneqq",[10955]],["subsim",[10951]],["subsub",[10965]],["subsup",[10963]],["succapprox",[10936]],["succ",[8827]],["succcurlyeq",[8829]],["Succeeds",[8827]],["SucceedsEqual",[10928]],["SucceedsSlantEqual",[8829]],["SucceedsTilde",[8831]],["succeq",[10928]],["succnapprox",[10938]],["succneqq",[10934]],["succnsim",[8937]],["succsim",[8831]],["SuchThat",[8715]],["sum",[8721]],["Sum",[8721]],["sung",[9834]],["sup1",[185]],["sup2",[178]],["sup3",[179]],["sup",[8835]],["Sup",[8913]],["supdot",[10942]],["supdsub",[10968]],["supE",[10950]],["supe",[8839]],["supedot",[10948]],["Superset",[8835]],["SupersetEqual",[8839]],["suphsol",[10185]],["suphsub",[10967]],["suplarr",[10619]],["supmult",[10946]],["supnE",[10956]],["supne",[8843]],["supplus",[10944]],["supset",[8835]],["Supset",[8913]],["supseteq",[8839]],["supseteqq",[10950]],["supsetneq",[8843]],["supsetneqq",[10956]],["supsim",[10952]],["supsub",[10964]],["supsup",[10966]],["swarhk",[10534]],["swarr",[8601]],["swArr",[8665]],["swarrow",[8601]],["swnwar",[10538]],["szlig",[223]],["Tab",[9]],["target",[8982]],["Tau",[932]],["tau",[964]],["tbrk",[9140]],["Tcaron",[356]],["tcaron",[357]],["Tcedil",[354]],["tcedil",[355]],["Tcy",[1058]],["tcy",[1090]],["tdot",[8411]],["telrec",[8981]],["Tfr",[120087]],["tfr",[120113]],["there4",[8756]],["therefore",[8756]],["Therefore",[8756]],["Theta",[920]],["theta",[952]],["thetasym",[977]],["thetav",[977]],["thickapprox",[8776]],["thicksim",[8764]],["ThickSpace",[8287,8202]],["ThinSpace",[8201]],["thinsp",[8201]],["thkap",[8776]],["thksim",[8764]],["THORN",[222]],["thorn",[254]],["tilde",[732]],["Tilde",[8764]],["TildeEqual",[8771]],["TildeFullEqual",[8773]],["TildeTilde",[8776]],["timesbar",[10801]],["timesb",[8864]],["times",[215]],["timesd",[10800]],["tint",[8749]],["toea",[10536]],["topbot",[9014]],["topcir",[10993]],["top",[8868]],["Topf",[120139]],["topf",[120165]],["topfork",[10970]],["tosa",[10537]],["tprime",[8244]],["trade",[8482]],["TRADE",[8482]],["triangle",[9653]],["triangledown",[9663]],["triangleleft",[9667]],["trianglelefteq",[8884]],["triangleq",[8796]],["triangleright",[9657]],["trianglerighteq",[8885]],["tridot",[9708]],["trie",[8796]],["triminus",[10810]],["TripleDot",[8411]],["triplus",[10809]],["trisb",[10701]],["tritime",[10811]],["trpezium",[9186]],["Tscr",[119983]],["tscr",[120009]],["TScy",[1062]],["tscy",[1094]],["TSHcy",[1035]],["tshcy",[1115]],["Tstrok",[358]],["tstrok",[359]],["twixt",[8812]],["twoheadleftarrow",[8606]],["twoheadrightarrow",[8608]],["Uacute",[218]],["uacute",[250]],["uarr",[8593]],["Uarr",[8607]],["uArr",[8657]],["Uarrocir",[10569]],["Ubrcy",[1038]],["ubrcy",[1118]],["Ubreve",[364]],["ubreve",[365]],["Ucirc",[219]],["ucirc",[251]],["Ucy",[1059]],["ucy",[1091]],["udarr",[8645]],["Udblac",[368]],["udblac",[369]],["udhar",[10606]],["ufisht",[10622]],["Ufr",[120088]],["ufr",[120114]],["Ugrave",[217]],["ugrave",[249]],["uHar",[10595]],["uharl",[8639]],["uharr",[8638]],["uhblk",[9600]],["ulcorn",[8988]],["ulcorner",[8988]],["ulcrop",[8975]],["ultri",[9720]],["Umacr",[362]],["umacr",[363]],["uml",[168]],["UnderBar",[95]],["UnderBrace",[9183]],["UnderBracket",[9141]],["UnderParenthesis",[9181]],["Union",[8899]],["UnionPlus",[8846]],["Uogon",[370]],["uogon",[371]],["Uopf",[120140]],["uopf",[120166]],["UpArrowBar",[10514]],["uparrow",[8593]],["UpArrow",[8593]],["Uparrow",[8657]],["UpArrowDownArrow",[8645]],["updownarrow",[8597]],["UpDownArrow",[8597]],["Updownarrow",[8661]],["UpEquilibrium",[10606]],["upharpoonleft",[8639]],["upharpoonright",[8638]],["uplus",[8846]],["UpperLeftArrow",[8598]],["UpperRightArrow",[8599]],["upsi",[965]],["Upsi",[978]],["upsih",[978]],["Upsilon",[933]],["upsilon",[965]],["UpTeeArrow",[8613]],["UpTee",[8869]],["upuparrows",[8648]],["urcorn",[8989]],["urcorner",[8989]],["urcrop",[8974]],["Uring",[366]],["uring",[367]],["urtri",[9721]],["Uscr",[119984]],["uscr",[120010]],["utdot",[8944]],["Utilde",[360]],["utilde",[361]],["utri",[9653]],["utrif",[9652]],["uuarr",[8648]],["Uuml",[220]],["uuml",[252]],["uwangle",[10663]],["vangrt",[10652]],["varepsilon",[1013]],["varkappa",[1008]],["varnothing",[8709]],["varphi",[981]],["varpi",[982]],["varpropto",[8733]],["varr",[8597]],["vArr",[8661]],["varrho",[1009]],["varsigma",[962]],["varsubsetneq",[8842,65024]],["varsubsetneqq",[10955,65024]],["varsupsetneq",[8843,65024]],["varsupsetneqq",[10956,65024]],["vartheta",[977]],["vartriangleleft",[8882]],["vartriangleright",[8883]],["vBar",[10984]],["Vbar",[10987]],["vBarv",[10985]],["Vcy",[1042]],["vcy",[1074]],["vdash",[8866]],["vDash",[8872]],["Vdash",[8873]],["VDash",[8875]],["Vdashl",[10982]],["veebar",[8891]],["vee",[8744]],["Vee",[8897]],["veeeq",[8794]],["vellip",[8942]],["verbar",[124]],["Verbar",[8214]],["vert",[124]],["Vert",[8214]],["VerticalBar",[8739]],["VerticalLine",[124]],["VerticalSeparator",[10072]],["VerticalTilde",[8768]],["VeryThinSpace",[8202]],["Vfr",[120089]],["vfr",[120115]],["vltri",[8882]],["vnsub",[8834,8402]],["vnsup",[8835,8402]],["Vopf",[120141]],["vopf",[120167]],["vprop",[8733]],["vrtri",[8883]],["Vscr",[119985]],["vscr",[120011]],["vsubnE",[10955,65024]],["vsubne",[8842,65024]],["vsupnE",[10956,65024]],["vsupne",[8843,65024]],["Vvdash",[8874]],["vzigzag",[10650]],["Wcirc",[372]],["wcirc",[373]],["wedbar",[10847]],["wedge",[8743]],["Wedge",[8896]],["wedgeq",[8793]],["weierp",[8472]],["Wfr",[120090]],["wfr",[120116]],["Wopf",[120142]],["wopf",[120168]],["wp",[8472]],["wr",[8768]],["wreath",[8768]],["Wscr",[119986]],["wscr",[120012]],["xcap",[8898]],["xcirc",[9711]],["xcup",[8899]],["xdtri",[9661]],["Xfr",[120091]],["xfr",[120117]],["xharr",[10231]],["xhArr",[10234]],["Xi",[926]],["xi",[958]],["xlarr",[10229]],["xlArr",[10232]],["xmap",[10236]],["xnis",[8955]],["xodot",[10752]],["Xopf",[120143]],["xopf",[120169]],["xoplus",[10753]],["xotime",[10754]],["xrarr",[10230]],["xrArr",[10233]],["Xscr",[119987]],["xscr",[120013]],["xsqcup",[10758]],["xuplus",[10756]],["xutri",[9651]],["xvee",[8897]],["xwedge",[8896]],["Yacute",[221]],["yacute",[253]],["YAcy",[1071]],["yacy",[1103]],["Ycirc",[374]],["ycirc",[375]],["Ycy",[1067]],["ycy",[1099]],["yen",[165]],["Yfr",[120092]],["yfr",[120118]],["YIcy",[1031]],["yicy",[1111]],["Yopf",[120144]],["yopf",[120170]],["Yscr",[119988]],["yscr",[120014]],["YUcy",[1070]],["yucy",[1102]],["yuml",[255]],["Yuml",[376]],["Zacute",[377]],["zacute",[378]],["Zcaron",[381]],["zcaron",[382]],["Zcy",[1047]],["zcy",[1079]],["Zdot",[379]],["zdot",[380]],["zeetrf",[8488]],["ZeroWidthSpace",[8203]],["Zeta",[918]],["zeta",[950]],["zfr",[120119]],["Zfr",[8488]],["ZHcy",[1046]],["zhcy",[1078]],["zigrarr",[8669]],["zopf",[120171]],["Zopf",[8484]],["Zscr",[119989]],["zscr",[120015]],["zwj",[8205]],["zwnj",[8204]]],o=[["NewLine",[10]]],s={},a={};!function(e,t){var r=i.length;for(;r--;){var n=i[r],s=n[0],a=n[1],l=a[0],c=a[1],u=l<32||l>126||62===l||60===l||38===l||34===l||39===l,h=void 0;u&&(h=t[l]=t[l]||{}),c?(e[s]=String.fromCharCode(l)+String.fromCharCode(c),u&&(h[c]=s)):(e[s]=String.fromCharCode(l),u&&(h[""]=s))}r=o.length;for(;r--;){var d=o[r],p=(s=d[0],d[1]);l=p[0],c=p[1];e[s]=String.fromCharCode(l)+(c?String.fromCharCode(c):"")}}(s,a);var l=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\w\d]+);?/g,(function(e,t){var r;if("#"===t.charAt(0)){var i="x"===t.charAt(1)?parseInt(t.substr(2).toLowerCase(),16):parseInt(t.substr(1));(!isNaN(i)||i>=-32768)&&(r=i<=65535?String.fromCharCode(i):n.fromCodePoint(i))}else r=s[t];return r||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var i=a[e.charCodeAt(n)];if(i){var o=i[e.charCodeAt(n+1)];if(o?n++:o=i[""],o){r+="&"+o+";",n++;continue}}r+=e.charAt(n),n++}return r},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",i=0;i<t;){var o=e.charCodeAt(i),s=a[o];if(s){var l=s[e.charCodeAt(i+1)];if(l?i++:l=s[""],l){r+="&"+l+";",i++;continue}}o<32||o>126?o>=n.highSurrogateFrom&&o<=n.highSurrogateTo?(r+="&#"+n.getCodePoint(e,i)+";",i++):r+="&#"+o+";":r+=e.charAt(i),i++}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",i=0;i<t;){var o=e.charCodeAt(i);o<=255?r+=e[i++]:o>=n.highSurrogateFrom&&o<=n.highSurrogateTo?(r+="&#"+n.getCodePoint(e,i)+";",i+=2):(r+="&#"+o+";",i++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html5Entities=l},"./node_modules/html-entities/lib/index.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("./node_modules/html-entities/lib/xml-entities.js");t.XmlEntities=n.XmlEntities;var i=r("./node_modules/html-entities/lib/html4-entities.js");t.Html4Entities=i.Html4Entities;var o=r("./node_modules/html-entities/lib/html5-entities.js");t.Html5Entities=o.Html5Entities,t.AllHtmlEntities=o.Html5Entities},"./node_modules/html-entities/lib/surrogate-pairs.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromCodePoint=String.fromCodePoint||function(e){return String.fromCharCode(Math.floor((e-65536)/1024)+55296,(e-65536)%1024+56320)},t.getCodePoint=String.prototype.codePointAt?function(e,t){return e.codePointAt(t)}:function(e,t){return 1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536},t.highSurrogateFrom=55296,t.highSurrogateTo=56319},"./node_modules/html-entities/lib/xml-entities.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("./node_modules/html-entities/lib/surrogate-pairs.js"),i={"&lt":"<","&gt":">","&quot":'"',"&apos":"'","&amp":"&","&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},o={60:"lt",62:"gt",34:"quot",39:"apos",38:"amp"},s={"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"},a=function(){function e(){}return e.prototype.encode=function(e){return e&&e.length?e.replace(/[<>"'&]/g,(function(e){return s[e]})):""},e.encode=function(t){return(new e).encode(t)},e.prototype.decode=function(e){return e&&e.length?e.replace(/&#?[0-9a-zA-Z]+;?/g,(function(e){if("#"===e.charAt(1)){var t="x"===e.charAt(2).toLowerCase()?parseInt(e.substr(3),16):parseInt(e.substr(2));return!isNaN(t)||t>=-32768?t<=65535?String.fromCharCode(t):n.fromCodePoint(t):""}return i[e]||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",i=0;i<t;){var s=e.charCodeAt(i),a=o[s];a?(r+="&"+a+";",i++):(s<32||s>126?s>=n.highSurrogateFrom&&s<=n.highSurrogateTo?(r+="&#"+n.getCodePoint(e,i)+";",i++):r+="&#"+s+";":r+=e.charAt(i),i++)}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",i=0;i<t;){var o=e.charCodeAt(i);o<=255?r+=e[i++]:(o>=n.highSurrogateFrom&&o<=n.highSurrogateTo?(r+="&#"+n.getCodePoint(e,i)+";",i++):r+="&#"+o+";",i++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.XmlEntities=a},"./node_modules/katex/dist/katex.js":function(e){var t;"undefined"!=typeof self&&self,t=function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t,r){},function(e,t,r){"use strict";r.r(t),r(0);var n=function(){function e(e,t,r){this.lexer=void 0,this.start=void 0,this.end=void 0,this.lexer=e,this.start=t,this.end=r}return e.range=function(t,r){return r?t&&t.loc&&r.loc&&t.loc.lexer===r.loc.lexer?new e(t.loc.lexer,t.loc.start,r.loc.end):null:t&&t.loc},e}(),i=function(){function e(e,t){this.text=void 0,this.loc=void 0,this.text=e,this.loc=t}return e.prototype.range=function(t,r){return new e(r,n.range(this,t))},e}(),o=function e(t,r){this.position=void 0;var n,i="KaTeX parse error: "+t,o=r&&r.loc;if(o&&o.start<=o.end){var s=o.lexer.input;n=o.start;var a=o.end;n===s.length?i+=" at end of input: ":i+=" at position "+(n+1)+": ";var l=s.slice(n,a).replace(/[^]/g,"$&̲");i+=(n>15?"…"+s.slice(n-15,n):s.slice(0,n))+l+(a+15<s.length?s.slice(a,a+15)+"…":s.slice(a))}var c=new Error(i);return c.name="ParseError",c.__proto__=e.prototype,c.position=n,c};o.prototype.__proto__=Error.prototype;var s=o,a=/([A-Z])/g,l={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"},c=/[&><"']/g,u=function e(t){return"ordgroup"===t.type||"color"===t.type?1===t.body.length?e(t.body[0]):t:"font"===t.type?e(t.body):t},h={contains:function(e,t){return-1!==e.indexOf(t)},deflt:function(e,t){return void 0===e?t:e},escape:function(e){return String(e).replace(c,(function(e){return l[e]}))},hyphenate:function(e){return e.replace(a,"-$1").toLowerCase()},getBaseElem:u,isCharacterBox:function(e){var t=u(e);return"mathord"===t.type||"textord"===t.type||"atom"===t.type},protocolFromUrl:function(e){var t=/^\s*([^\\/#]*?)(?::|&#0*58|&#x0*3a)/i.exec(e);return null!=t?t[1]:"_relative"}},d=function(){function e(e){this.displayMode=void 0,this.output=void 0,this.leqno=void 0,this.fleqn=void 0,this.throwOnError=void 0,this.errorColor=void 0,this.macros=void 0,this.minRuleThickness=void 0,this.colorIsTextColor=void 0,this.strict=void 0,this.trust=void 0,this.maxSize=void 0,this.maxExpand=void 0,e=e||{},this.displayMode=h.deflt(e.displayMode,!1),this.output=h.deflt(e.output,"htmlAndMathml"),this.leqno=h.deflt(e.leqno,!1),this.fleqn=h.deflt(e.fleqn,!1),this.throwOnError=h.deflt(e.throwOnError,!0),this.errorColor=h.deflt(e.errorColor,"#cc0000"),this.macros=e.macros||{},this.minRuleThickness=Math.max(0,h.deflt(e.minRuleThickness,0)),this.colorIsTextColor=h.deflt(e.colorIsTextColor,!1),this.strict=h.deflt(e.strict,"warn"),this.trust=h.deflt(e.trust,!1),this.maxSize=Math.max(0,h.deflt(e.maxSize,1/0)),this.maxExpand=Math.max(0,h.deflt(e.maxExpand,1e3))}var t=e.prototype;return t.reportNonstrict=function(e,t,r){var n=this.strict;if("function"==typeof n&&(n=n(e,t,r)),n&&"ignore"!==n){if(!0===n||"error"===n)throw new s("LaTeX-incompatible input and strict mode is set to 'error': "+t+" ["+e+"]",r);"warn"===n?"undefined"!=typeof console&&console.warn("LaTeX-incompatible input and strict mode is set to 'warn': "+t+" ["+e+"]"):"undefined"!=typeof console&&console.warn("LaTeX-incompatible input and strict mode is set to unrecognized '"+n+"': "+t+" ["+e+"]")}},t.useStrictBehavior=function(e,t,r){var n=this.strict;if("function"==typeof n)try{n=n(e,t,r)}catch(e){n="error"}return!(!n||"ignore"===n||!0!==n&&"error"!==n&&("warn"===n?("undefined"!=typeof console&&console.warn("LaTeX-incompatible input and strict mode is set to 'warn': "+t+" ["+e+"]"),1):("undefined"!=typeof console&&console.warn("LaTeX-incompatible input and strict mode is set to unrecognized '"+n+"': "+t+" ["+e+"]"),1)))},t.isTrusted=function(e){e.url&&!e.protocol&&(e.protocol=h.protocolFromUrl(e.url));var t="function"==typeof this.trust?this.trust(e):this.trust;return Boolean(t)},e}(),p=function(){function e(e,t,r){this.id=void 0,this.size=void 0,this.cramped=void 0,this.id=e,this.size=t,this.cramped=r}var t=e.prototype;return t.sup=function(){return f[m[this.id]]},t.sub=function(){return f[g[this.id]]},t.fracNum=function(){return f[v[this.id]]},t.fracDen=function(){return f[b[this.id]]},t.cramp=function(){return f[y[this.id]]},t.text=function(){return f[w[this.id]]},t.isTight=function(){return this.size>=2},e}(),f=[new p(0,0,!1),new p(1,0,!0),new p(2,1,!1),new p(3,1,!0),new p(4,2,!1),new p(5,2,!0),new p(6,3,!1),new p(7,3,!0)],m=[4,5,4,5,6,7,6,7],g=[5,5,5,5,7,7,7,7],v=[2,3,4,5,6,7,6,7],b=[3,3,5,5,7,7,7,7],y=[1,1,3,3,5,5,7,7],w=[0,1,2,3,2,3,2,3],x={DISPLAY:f[0],TEXT:f[2],SCRIPT:f[4],SCRIPTSCRIPT:f[6]},k=[{name:"latin",blocks:[[256,591],[768,879]]},{name:"cyrillic",blocks:[[1024,1279]]},{name:"brahmic",blocks:[[2304,4255]]},{name:"georgian",blocks:[[4256,4351]]},{name:"cjk",blocks:[[12288,12543],[19968,40879],[65280,65376]]},{name:"hangul",blocks:[[44032,55215]]}],S=[];function A(e){for(var t=0;t<S.length;t+=2)if(e>=S[t]&&e<=S[t+1])return!0;return!1}k.forEach((function(e){return e.blocks.forEach((function(e){return S.push.apply(S,e)}))}));var M=80,C={doubleleftarrow:"M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",doublerightarrow:"M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",leftarrow:"M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",leftbrace:"M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",leftbraceunder:"M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",leftgroup:"M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",leftgroupunder:"M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",leftharpoon:"M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",leftharpoonplus:"M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",leftharpoondown:"M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",leftharpoondownplus:"M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",lefthook:"M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",leftlinesegment:"M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",leftmapsto:"M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",leftToFrom:"M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",longequal:"M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",midbrace:"M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",midbraceunder:"M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",oiintSize1:"M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z",oiintSize2:"M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z",oiiintSize1:"M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z",oiiintSize2:"M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z",rightarrow:"M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",rightbrace:"M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",rightbraceunder:"M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",rightgroup:"M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",rightgroupunder:"M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",rightharpoon:"M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",rightharpoonplus:"M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",rightharpoondown:"M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",rightharpoondownplus:"M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",righthook:"M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",rightlinesegment:"M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",rightToFrom:"M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",twoheadleftarrow:"M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",twoheadrightarrow:"M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",tilde1:"M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",tilde2:"M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",tilde3:"M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",tilde4:"M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",vec:"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",widehat1:"M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",widehat2:"M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",widehat3:"M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",widehat4:"M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",widecheck1:"M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z",widecheck2:"M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",widecheck3:"M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",widecheck4:"M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",baraboveleftarrow:"M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z",rightarrowabovebar:"M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z",baraboveshortleftharpoon:"M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",rightharpoonaboveshortbar:"M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",shortbaraboveleftharpoon:"M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",shortrightharpoonabovebar:"M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"},N=function(){function e(e){this.children=void 0,this.classes=void 0,this.height=void 0,this.depth=void 0,this.maxFontSize=void 0,this.style=void 0,this.children=e,this.classes=[],this.height=0,this.depth=0,this.maxFontSize=0,this.style={}}var t=e.prototype;return t.hasClass=function(e){return h.contains(this.classes,e)},t.toNode=function(){for(var e=document.createDocumentFragment(),t=0;t<this.children.length;t++)e.appendChild(this.children[t].toNode());return e},t.toMarkup=function(){for(var e="",t=0;t<this.children.length;t++)e+=this.children[t].toMarkup();return e},t.toText=function(){var e=function(e){return e.toText()};return this.children.map(e).join("")},e}(),E=function(e){return e.filter((function(e){return e})).join(" ")},T=function(e,t,r){if(this.classes=e||[],this.attributes={},this.height=0,this.depth=0,this.maxFontSize=0,this.style=r||{},t){t.style.isTight()&&this.classes.push("mtight");var n=t.getColor();n&&(this.style.color=n)}},q=function(e){var t=document.createElement(e);for(var r in t.className=E(this.classes),this.style)this.style.hasOwnProperty(r)&&(t.style[r]=this.style[r]);for(var n in this.attributes)this.attributes.hasOwnProperty(n)&&t.setAttribute(n,this.attributes[n]);for(var i=0;i<this.children.length;i++)t.appendChild(this.children[i].toNode());return t},z=function(e){var t="<"+e;this.classes.length&&(t+=' class="'+h.escape(E(this.classes))+'"');var r="";for(var n in this.style)this.style.hasOwnProperty(n)&&(r+=h.hyphenate(n)+":"+this.style[n]+";");for(var i in r&&(t+=' style="'+h.escape(r)+'"'),this.attributes)this.attributes.hasOwnProperty(i)&&(t+=" "+i+'="'+h.escape(this.attributes[i])+'"');t+=">";for(var o=0;o<this.children.length;o++)t+=this.children[o].toMarkup();return t+="</"+e+">"},O=function(){function e(e,t,r,n){this.children=void 0,this.attributes=void 0,this.classes=void 0,this.height=void 0,this.depth=void 0,this.width=void 0,this.maxFontSize=void 0,this.style=void 0,T.call(this,e,r,n),this.children=t||[]}var t=e.prototype;return t.setAttribute=function(e,t){this.attributes[e]=t},t.hasClass=function(e){return h.contains(this.classes,e)},t.toNode=function(){return q.call(this,"span")},t.toMarkup=function(){return z.call(this,"span")},e}(),_=function(){function e(e,t,r,n){this.children=void 0,this.attributes=void 0,this.classes=void 0,this.height=void 0,this.depth=void 0,this.maxFontSize=void 0,this.style=void 0,T.call(this,t,n),this.children=r||[],this.setAttribute("href",e)}var t=e.prototype;return t.setAttribute=function(e,t){this.attributes[e]=t},t.hasClass=function(e){return h.contains(this.classes,e)},t.toNode=function(){return q.call(this,"a")},t.toMarkup=function(){return z.call(this,"a")},e}(),I=function(){function e(e,t,r){this.src=void 0,this.alt=void 0,this.classes=void 0,this.height=void 0,this.depth=void 0,this.maxFontSize=void 0,this.style=void 0,this.alt=t,this.src=e,this.classes=["mord"],this.style=r}var t=e.prototype;return t.hasClass=function(e){return h.contains(this.classes,e)},t.toNode=function(){var e=document.createElement("img");for(var t in e.src=this.src,e.alt=this.alt,e.className="mord",this.style)this.style.hasOwnProperty(t)&&(e.style[t]=this.style[t]);return e},t.toMarkup=function(){var e="<img  src='"+this.src+" 'alt='"+this.alt+"' ",t="";for(var r in this.style)this.style.hasOwnProperty(r)&&(t+=h.hyphenate(r)+":"+this.style[r]+";");return t&&(e+=' style="'+h.escape(t)+'"'),e+="'/>"},e}(),L={î:"ı̂",ï:"ı̈",í:"ı́",ì:"ı̀"},j=function(){function e(e,t,r,n,i,o,s,a){this.text=void 0,this.height=void 0,this.depth=void 0,this.italic=void 0,this.skew=void 0,this.width=void 0,this.maxFontSize=void 0,this.classes=void 0,this.style=void 0,this.text=e,this.height=t||0,this.depth=r||0,this.italic=n||0,this.skew=i||0,this.width=o||0,this.classes=s||[],this.style=a||{},this.maxFontSize=0;var l=function(e){for(var t=0;t<k.length;t++)for(var r=k[t],n=0;n<r.blocks.length;n++){var i=r.blocks[n];if(e>=i[0]&&e<=i[1])return r.name}return null}(this.text.charCodeAt(0));l&&this.classes.push(l+"_fallback"),/[îïíì]/.test(this.text)&&(this.text=L[this.text])}var t=e.prototype;return t.hasClass=function(e){return h.contains(this.classes,e)},t.toNode=function(){var e=document.createTextNode(this.text),t=null;for(var r in this.italic>0&&((t=document.createElement("span")).style.marginRight=this.italic+"em"),this.classes.length>0&&((t=t||document.createElement("span")).className=E(this.classes)),this.style)this.style.hasOwnProperty(r)&&((t=t||document.createElement("span")).style[r]=this.style[r]);return t?(t.appendChild(e),t):e},t.toMarkup=function(){var e=!1,t="<span";this.classes.length&&(e=!0,t+=' class="',t+=h.escape(E(this.classes)),t+='"');var r="";for(var n in this.italic>0&&(r+="margin-right:"+this.italic+"em;"),this.style)this.style.hasOwnProperty(n)&&(r+=h.hyphenate(n)+":"+this.style[n]+";");r&&(e=!0,t+=' style="'+h.escape(r)+'"');var i=h.escape(this.text);return e?(t+=">",t+=i,t+="</span>"):i},e}(),D=function(){function e(e,t){this.children=void 0,this.attributes=void 0,this.children=e||[],this.attributes=t||{}}var t=e.prototype;return t.toNode=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","svg");for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&e.setAttribute(t,this.attributes[t]);for(var r=0;r<this.children.length;r++)e.appendChild(this.children[r].toNode());return e},t.toMarkup=function(){var e="<svg";for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&(e+=" "+t+"='"+this.attributes[t]+"'");e+=">";for(var r=0;r<this.children.length;r++)e+=this.children[r].toMarkup();return e+="</svg>"},e}(),B=function(){function e(e,t){this.pathName=void 0,this.alternate=void 0,this.pathName=e,this.alternate=t}var t=e.prototype;return t.toNode=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","path");return this.alternate?e.setAttribute("d",this.alternate):e.setAttribute("d",C[this.pathName]),e},t.toMarkup=function(){return this.alternate?"<path d='"+this.alternate+"'/>":"<path d='"+C[this.pathName]+"'/>"},e}(),R=function(){function e(e){this.attributes=void 0,this.attributes=e||{}}var t=e.prototype;return t.toNode=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","line");for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&e.setAttribute(t,this.attributes[t]);return e},t.toMarkup=function(){var e="<line";for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&(e+=" "+t+"='"+this.attributes[t]+"'");return e+="/>"},e}();function P(e){if(e instanceof j)return e;throw new Error("Expected symbolNode but got "+String(e)+".")}var F={"AMS-Regular":{65:[0,.68889,0,0,.72222],66:[0,.68889,0,0,.66667],67:[0,.68889,0,0,.72222],68:[0,.68889,0,0,.72222],69:[0,.68889,0,0,.66667],70:[0,.68889,0,0,.61111],71:[0,.68889,0,0,.77778],72:[0,.68889,0,0,.77778],73:[0,.68889,0,0,.38889],74:[.16667,.68889,0,0,.5],75:[0,.68889,0,0,.77778],76:[0,.68889,0,0,.66667],77:[0,.68889,0,0,.94445],78:[0,.68889,0,0,.72222],79:[.16667,.68889,0,0,.77778],80:[0,.68889,0,0,.61111],81:[.16667,.68889,0,0,.77778],82:[0,.68889,0,0,.72222],83:[0,.68889,0,0,.55556],84:[0,.68889,0,0,.66667],85:[0,.68889,0,0,.72222],86:[0,.68889,0,0,.72222],87:[0,.68889,0,0,1],88:[0,.68889,0,0,.72222],89:[0,.68889,0,0,.72222],90:[0,.68889,0,0,.66667],107:[0,.68889,0,0,.55556],165:[0,.675,.025,0,.75],174:[.15559,.69224,0,0,.94666],240:[0,.68889,0,0,.55556],295:[0,.68889,0,0,.54028],710:[0,.825,0,0,2.33334],732:[0,.9,0,0,2.33334],770:[0,.825,0,0,2.33334],771:[0,.9,0,0,2.33334],989:[.08167,.58167,0,0,.77778],1008:[0,.43056,.04028,0,.66667],8245:[0,.54986,0,0,.275],8463:[0,.68889,0,0,.54028],8487:[0,.68889,0,0,.72222],8498:[0,.68889,0,0,.55556],8502:[0,.68889,0,0,.66667],8503:[0,.68889,0,0,.44445],8504:[0,.68889,0,0,.66667],8513:[0,.68889,0,0,.63889],8592:[-.03598,.46402,0,0,.5],8594:[-.03598,.46402,0,0,.5],8602:[-.13313,.36687,0,0,1],8603:[-.13313,.36687,0,0,1],8606:[.01354,.52239,0,0,1],8608:[.01354,.52239,0,0,1],8610:[.01354,.52239,0,0,1.11111],8611:[.01354,.52239,0,0,1.11111],8619:[0,.54986,0,0,1],8620:[0,.54986,0,0,1],8621:[-.13313,.37788,0,0,1.38889],8622:[-.13313,.36687,0,0,1],8624:[0,.69224,0,0,.5],8625:[0,.69224,0,0,.5],8630:[0,.43056,0,0,1],8631:[0,.43056,0,0,1],8634:[.08198,.58198,0,0,.77778],8635:[.08198,.58198,0,0,.77778],8638:[.19444,.69224,0,0,.41667],8639:[.19444,.69224,0,0,.41667],8642:[.19444,.69224,0,0,.41667],8643:[.19444,.69224,0,0,.41667],8644:[.1808,.675,0,0,1],8646:[.1808,.675,0,0,1],8647:[.1808,.675,0,0,1],8648:[.19444,.69224,0,0,.83334],8649:[.1808,.675,0,0,1],8650:[.19444,.69224,0,0,.83334],8651:[.01354,.52239,0,0,1],8652:[.01354,.52239,0,0,1],8653:[-.13313,.36687,0,0,1],8654:[-.13313,.36687,0,0,1],8655:[-.13313,.36687,0,0,1],8666:[.13667,.63667,0,0,1],8667:[.13667,.63667,0,0,1],8669:[-.13313,.37788,0,0,1],8672:[-.064,.437,0,0,1.334],8674:[-.064,.437,0,0,1.334],8705:[0,.825,0,0,.5],8708:[0,.68889,0,0,.55556],8709:[.08167,.58167,0,0,.77778],8717:[0,.43056,0,0,.42917],8722:[-.03598,.46402,0,0,.5],8724:[.08198,.69224,0,0,.77778],8726:[.08167,.58167,0,0,.77778],8733:[0,.69224,0,0,.77778],8736:[0,.69224,0,0,.72222],8737:[0,.69224,0,0,.72222],8738:[.03517,.52239,0,0,.72222],8739:[.08167,.58167,0,0,.22222],8740:[.25142,.74111,0,0,.27778],8741:[.08167,.58167,0,0,.38889],8742:[.25142,.74111,0,0,.5],8756:[0,.69224,0,0,.66667],8757:[0,.69224,0,0,.66667],8764:[-.13313,.36687,0,0,.77778],8765:[-.13313,.37788,0,0,.77778],8769:[-.13313,.36687,0,0,.77778],8770:[-.03625,.46375,0,0,.77778],8774:[.30274,.79383,0,0,.77778],8776:[-.01688,.48312,0,0,.77778],8778:[.08167,.58167,0,0,.77778],8782:[.06062,.54986,0,0,.77778],8783:[.06062,.54986,0,0,.77778],8785:[.08198,.58198,0,0,.77778],8786:[.08198,.58198,0,0,.77778],8787:[.08198,.58198,0,0,.77778],8790:[0,.69224,0,0,.77778],8791:[.22958,.72958,0,0,.77778],8796:[.08198,.91667,0,0,.77778],8806:[.25583,.75583,0,0,.77778],8807:[.25583,.75583,0,0,.77778],8808:[.25142,.75726,0,0,.77778],8809:[.25142,.75726,0,0,.77778],8812:[.25583,.75583,0,0,.5],8814:[.20576,.70576,0,0,.77778],8815:[.20576,.70576,0,0,.77778],8816:[.30274,.79383,0,0,.77778],8817:[.30274,.79383,0,0,.77778],8818:[.22958,.72958,0,0,.77778],8819:[.22958,.72958,0,0,.77778],8822:[.1808,.675,0,0,.77778],8823:[.1808,.675,0,0,.77778],8828:[.13667,.63667,0,0,.77778],8829:[.13667,.63667,0,0,.77778],8830:[.22958,.72958,0,0,.77778],8831:[.22958,.72958,0,0,.77778],8832:[.20576,.70576,0,0,.77778],8833:[.20576,.70576,0,0,.77778],8840:[.30274,.79383,0,0,.77778],8841:[.30274,.79383,0,0,.77778],8842:[.13597,.63597,0,0,.77778],8843:[.13597,.63597,0,0,.77778],8847:[.03517,.54986,0,0,.77778],8848:[.03517,.54986,0,0,.77778],8858:[.08198,.58198,0,0,.77778],8859:[.08198,.58198,0,0,.77778],8861:[.08198,.58198,0,0,.77778],8862:[0,.675,0,0,.77778],8863:[0,.675,0,0,.77778],8864:[0,.675,0,0,.77778],8865:[0,.675,0,0,.77778],8872:[0,.69224,0,0,.61111],8873:[0,.69224,0,0,.72222],8874:[0,.69224,0,0,.88889],8876:[0,.68889,0,0,.61111],8877:[0,.68889,0,0,.61111],8878:[0,.68889,0,0,.72222],8879:[0,.68889,0,0,.72222],8882:[.03517,.54986,0,0,.77778],8883:[.03517,.54986,0,0,.77778],8884:[.13667,.63667,0,0,.77778],8885:[.13667,.63667,0,0,.77778],8888:[0,.54986,0,0,1.11111],8890:[.19444,.43056,0,0,.55556],8891:[.19444,.69224,0,0,.61111],8892:[.19444,.69224,0,0,.61111],8901:[0,.54986,0,0,.27778],8903:[.08167,.58167,0,0,.77778],8905:[.08167,.58167,0,0,.77778],8906:[.08167,.58167,0,0,.77778],8907:[0,.69224,0,0,.77778],8908:[0,.69224,0,0,.77778],8909:[-.03598,.46402,0,0,.77778],8910:[0,.54986,0,0,.76042],8911:[0,.54986,0,0,.76042],8912:[.03517,.54986,0,0,.77778],8913:[.03517,.54986,0,0,.77778],8914:[0,.54986,0,0,.66667],8915:[0,.54986,0,0,.66667],8916:[0,.69224,0,0,.66667],8918:[.0391,.5391,0,0,.77778],8919:[.0391,.5391,0,0,.77778],8920:[.03517,.54986,0,0,1.33334],8921:[.03517,.54986,0,0,1.33334],8922:[.38569,.88569,0,0,.77778],8923:[.38569,.88569,0,0,.77778],8926:[.13667,.63667,0,0,.77778],8927:[.13667,.63667,0,0,.77778],8928:[.30274,.79383,0,0,.77778],8929:[.30274,.79383,0,0,.77778],8934:[.23222,.74111,0,0,.77778],8935:[.23222,.74111,0,0,.77778],8936:[.23222,.74111,0,0,.77778],8937:[.23222,.74111,0,0,.77778],8938:[.20576,.70576,0,0,.77778],8939:[.20576,.70576,0,0,.77778],8940:[.30274,.79383,0,0,.77778],8941:[.30274,.79383,0,0,.77778],8994:[.19444,.69224,0,0,.77778],8995:[.19444,.69224,0,0,.77778],9416:[.15559,.69224,0,0,.90222],9484:[0,.69224,0,0,.5],9488:[0,.69224,0,0,.5],9492:[0,.37788,0,0,.5],9496:[0,.37788,0,0,.5],9585:[.19444,.68889,0,0,.88889],9586:[.19444,.74111,0,0,.88889],9632:[0,.675,0,0,.77778],9633:[0,.675,0,0,.77778],9650:[0,.54986,0,0,.72222],9651:[0,.54986,0,0,.72222],9654:[.03517,.54986,0,0,.77778],9660:[0,.54986,0,0,.72222],9661:[0,.54986,0,0,.72222],9664:[.03517,.54986,0,0,.77778],9674:[.11111,.69224,0,0,.66667],9733:[.19444,.69224,0,0,.94445],10003:[0,.69224,0,0,.83334],10016:[0,.69224,0,0,.83334],10731:[.11111,.69224,0,0,.66667],10846:[.19444,.75583,0,0,.61111],10877:[.13667,.63667,0,0,.77778],10878:[.13667,.63667,0,0,.77778],10885:[.25583,.75583,0,0,.77778],10886:[.25583,.75583,0,0,.77778],10887:[.13597,.63597,0,0,.77778],10888:[.13597,.63597,0,0,.77778],10889:[.26167,.75726,0,0,.77778],10890:[.26167,.75726,0,0,.77778],10891:[.48256,.98256,0,0,.77778],10892:[.48256,.98256,0,0,.77778],10901:[.13667,.63667,0,0,.77778],10902:[.13667,.63667,0,0,.77778],10933:[.25142,.75726,0,0,.77778],10934:[.25142,.75726,0,0,.77778],10935:[.26167,.75726,0,0,.77778],10936:[.26167,.75726,0,0,.77778],10937:[.26167,.75726,0,0,.77778],10938:[.26167,.75726,0,0,.77778],10949:[.25583,.75583,0,0,.77778],10950:[.25583,.75583,0,0,.77778],10955:[.28481,.79383,0,0,.77778],10956:[.28481,.79383,0,0,.77778],57350:[.08167,.58167,0,0,.22222],57351:[.08167,.58167,0,0,.38889],57352:[.08167,.58167,0,0,.77778],57353:[0,.43056,.04028,0,.66667],57356:[.25142,.75726,0,0,.77778],57357:[.25142,.75726,0,0,.77778],57358:[.41951,.91951,0,0,.77778],57359:[.30274,.79383,0,0,.77778],57360:[.30274,.79383,0,0,.77778],57361:[.41951,.91951,0,0,.77778],57366:[.25142,.75726,0,0,.77778],57367:[.25142,.75726,0,0,.77778],57368:[.25142,.75726,0,0,.77778],57369:[.25142,.75726,0,0,.77778],57370:[.13597,.63597,0,0,.77778],57371:[.13597,.63597,0,0,.77778]},"Caligraphic-Regular":{48:[0,.43056,0,0,.5],49:[0,.43056,0,0,.5],50:[0,.43056,0,0,.5],51:[.19444,.43056,0,0,.5],52:[.19444,.43056,0,0,.5],53:[.19444,.43056,0,0,.5],54:[0,.64444,0,0,.5],55:[.19444,.43056,0,0,.5],56:[0,.64444,0,0,.5],57:[.19444,.43056,0,0,.5],65:[0,.68333,0,.19445,.79847],66:[0,.68333,.03041,.13889,.65681],67:[0,.68333,.05834,.13889,.52653],68:[0,.68333,.02778,.08334,.77139],69:[0,.68333,.08944,.11111,.52778],70:[0,.68333,.09931,.11111,.71875],71:[.09722,.68333,.0593,.11111,.59487],72:[0,.68333,.00965,.11111,.84452],73:[0,.68333,.07382,0,.54452],74:[.09722,.68333,.18472,.16667,.67778],75:[0,.68333,.01445,.05556,.76195],76:[0,.68333,0,.13889,.68972],77:[0,.68333,0,.13889,1.2009],78:[0,.68333,.14736,.08334,.82049],79:[0,.68333,.02778,.11111,.79611],80:[0,.68333,.08222,.08334,.69556],81:[.09722,.68333,0,.11111,.81667],82:[0,.68333,0,.08334,.8475],83:[0,.68333,.075,.13889,.60556],84:[0,.68333,.25417,0,.54464],85:[0,.68333,.09931,.08334,.62583],86:[0,.68333,.08222,0,.61278],87:[0,.68333,.08222,.08334,.98778],88:[0,.68333,.14643,.13889,.7133],89:[.09722,.68333,.08222,.08334,.66834],90:[0,.68333,.07944,.13889,.72473]},"Fraktur-Regular":{33:[0,.69141,0,0,.29574],34:[0,.69141,0,0,.21471],38:[0,.69141,0,0,.73786],39:[0,.69141,0,0,.21201],40:[.24982,.74947,0,0,.38865],41:[.24982,.74947,0,0,.38865],42:[0,.62119,0,0,.27764],43:[.08319,.58283,0,0,.75623],44:[0,.10803,0,0,.27764],45:[.08319,.58283,0,0,.75623],46:[0,.10803,0,0,.27764],47:[.24982,.74947,0,0,.50181],48:[0,.47534,0,0,.50181],49:[0,.47534,0,0,.50181],50:[0,.47534,0,0,.50181],51:[.18906,.47534,0,0,.50181],52:[.18906,.47534,0,0,.50181],53:[.18906,.47534,0,0,.50181],54:[0,.69141,0,0,.50181],55:[.18906,.47534,0,0,.50181],56:[0,.69141,0,0,.50181],57:[.18906,.47534,0,0,.50181],58:[0,.47534,0,0,.21606],59:[.12604,.47534,0,0,.21606],61:[-.13099,.36866,0,0,.75623],63:[0,.69141,0,0,.36245],65:[0,.69141,0,0,.7176],66:[0,.69141,0,0,.88397],67:[0,.69141,0,0,.61254],68:[0,.69141,0,0,.83158],69:[0,.69141,0,0,.66278],70:[.12604,.69141,0,0,.61119],71:[0,.69141,0,0,.78539],72:[.06302,.69141,0,0,.7203],73:[0,.69141,0,0,.55448],74:[.12604,.69141,0,0,.55231],75:[0,.69141,0,0,.66845],76:[0,.69141,0,0,.66602],77:[0,.69141,0,0,1.04953],78:[0,.69141,0,0,.83212],79:[0,.69141,0,0,.82699],80:[.18906,.69141,0,0,.82753],81:[.03781,.69141,0,0,.82699],82:[0,.69141,0,0,.82807],83:[0,.69141,0,0,.82861],84:[0,.69141,0,0,.66899],85:[0,.69141,0,0,.64576],86:[0,.69141,0,0,.83131],87:[0,.69141,0,0,1.04602],88:[0,.69141,0,0,.71922],89:[.18906,.69141,0,0,.83293],90:[.12604,.69141,0,0,.60201],91:[.24982,.74947,0,0,.27764],93:[.24982,.74947,0,0,.27764],94:[0,.69141,0,0,.49965],97:[0,.47534,0,0,.50046],98:[0,.69141,0,0,.51315],99:[0,.47534,0,0,.38946],100:[0,.62119,0,0,.49857],101:[0,.47534,0,0,.40053],102:[.18906,.69141,0,0,.32626],103:[.18906,.47534,0,0,.5037],104:[.18906,.69141,0,0,.52126],105:[0,.69141,0,0,.27899],106:[0,.69141,0,0,.28088],107:[0,.69141,0,0,.38946],108:[0,.69141,0,0,.27953],109:[0,.47534,0,0,.76676],110:[0,.47534,0,0,.52666],111:[0,.47534,0,0,.48885],112:[.18906,.52396,0,0,.50046],113:[.18906,.47534,0,0,.48912],114:[0,.47534,0,0,.38919],115:[0,.47534,0,0,.44266],116:[0,.62119,0,0,.33301],117:[0,.47534,0,0,.5172],118:[0,.52396,0,0,.5118],119:[0,.52396,0,0,.77351],120:[.18906,.47534,0,0,.38865],121:[.18906,.47534,0,0,.49884],122:[.18906,.47534,0,0,.39054],8216:[0,.69141,0,0,.21471],8217:[0,.69141,0,0,.21471],58112:[0,.62119,0,0,.49749],58113:[0,.62119,0,0,.4983],58114:[.18906,.69141,0,0,.33328],58115:[.18906,.69141,0,0,.32923],58116:[.18906,.47534,0,0,.50343],58117:[0,.69141,0,0,.33301],58118:[0,.62119,0,0,.33409],58119:[0,.47534,0,0,.50073]},"Main-Bold":{33:[0,.69444,0,0,.35],34:[0,.69444,0,0,.60278],35:[.19444,.69444,0,0,.95833],36:[.05556,.75,0,0,.575],37:[.05556,.75,0,0,.95833],38:[0,.69444,0,0,.89444],39:[0,.69444,0,0,.31944],40:[.25,.75,0,0,.44722],41:[.25,.75,0,0,.44722],42:[0,.75,0,0,.575],43:[.13333,.63333,0,0,.89444],44:[.19444,.15556,0,0,.31944],45:[0,.44444,0,0,.38333],46:[0,.15556,0,0,.31944],47:[.25,.75,0,0,.575],48:[0,.64444,0,0,.575],49:[0,.64444,0,0,.575],50:[0,.64444,0,0,.575],51:[0,.64444,0,0,.575],52:[0,.64444,0,0,.575],53:[0,.64444,0,0,.575],54:[0,.64444,0,0,.575],55:[0,.64444,0,0,.575],56:[0,.64444,0,0,.575],57:[0,.64444,0,0,.575],58:[0,.44444,0,0,.31944],59:[.19444,.44444,0,0,.31944],60:[.08556,.58556,0,0,.89444],61:[-.10889,.39111,0,0,.89444],62:[.08556,.58556,0,0,.89444],63:[0,.69444,0,0,.54305],64:[0,.69444,0,0,.89444],65:[0,.68611,0,0,.86944],66:[0,.68611,0,0,.81805],67:[0,.68611,0,0,.83055],68:[0,.68611,0,0,.88194],69:[0,.68611,0,0,.75555],70:[0,.68611,0,0,.72361],71:[0,.68611,0,0,.90416],72:[0,.68611,0,0,.9],73:[0,.68611,0,0,.43611],74:[0,.68611,0,0,.59444],75:[0,.68611,0,0,.90138],76:[0,.68611,0,0,.69166],77:[0,.68611,0,0,1.09166],78:[0,.68611,0,0,.9],79:[0,.68611,0,0,.86388],80:[0,.68611,0,0,.78611],81:[.19444,.68611,0,0,.86388],82:[0,.68611,0,0,.8625],83:[0,.68611,0,0,.63889],84:[0,.68611,0,0,.8],85:[0,.68611,0,0,.88472],86:[0,.68611,.01597,0,.86944],87:[0,.68611,.01597,0,1.18888],88:[0,.68611,0,0,.86944],89:[0,.68611,.02875,0,.86944],90:[0,.68611,0,0,.70277],91:[.25,.75,0,0,.31944],92:[.25,.75,0,0,.575],93:[.25,.75,0,0,.31944],94:[0,.69444,0,0,.575],95:[.31,.13444,.03194,0,.575],97:[0,.44444,0,0,.55902],98:[0,.69444,0,0,.63889],99:[0,.44444,0,0,.51111],100:[0,.69444,0,0,.63889],101:[0,.44444,0,0,.52708],102:[0,.69444,.10903,0,.35139],103:[.19444,.44444,.01597,0,.575],104:[0,.69444,0,0,.63889],105:[0,.69444,0,0,.31944],106:[.19444,.69444,0,0,.35139],107:[0,.69444,0,0,.60694],108:[0,.69444,0,0,.31944],109:[0,.44444,0,0,.95833],110:[0,.44444,0,0,.63889],111:[0,.44444,0,0,.575],112:[.19444,.44444,0,0,.63889],113:[.19444,.44444,0,0,.60694],114:[0,.44444,0,0,.47361],115:[0,.44444,0,0,.45361],116:[0,.63492,0,0,.44722],117:[0,.44444,0,0,.63889],118:[0,.44444,.01597,0,.60694],119:[0,.44444,.01597,0,.83055],120:[0,.44444,0,0,.60694],121:[.19444,.44444,.01597,0,.60694],122:[0,.44444,0,0,.51111],123:[.25,.75,0,0,.575],124:[.25,.75,0,0,.31944],125:[.25,.75,0,0,.575],126:[.35,.34444,0,0,.575],168:[0,.69444,0,0,.575],172:[0,.44444,0,0,.76666],176:[0,.69444,0,0,.86944],177:[.13333,.63333,0,0,.89444],184:[.17014,0,0,0,.51111],198:[0,.68611,0,0,1.04166],215:[.13333,.63333,0,0,.89444],216:[.04861,.73472,0,0,.89444],223:[0,.69444,0,0,.59722],230:[0,.44444,0,0,.83055],247:[.13333,.63333,0,0,.89444],248:[.09722,.54167,0,0,.575],305:[0,.44444,0,0,.31944],338:[0,.68611,0,0,1.16944],339:[0,.44444,0,0,.89444],567:[.19444,.44444,0,0,.35139],710:[0,.69444,0,0,.575],711:[0,.63194,0,0,.575],713:[0,.59611,0,0,.575],714:[0,.69444,0,0,.575],715:[0,.69444,0,0,.575],728:[0,.69444,0,0,.575],729:[0,.69444,0,0,.31944],730:[0,.69444,0,0,.86944],732:[0,.69444,0,0,.575],733:[0,.69444,0,0,.575],915:[0,.68611,0,0,.69166],916:[0,.68611,0,0,.95833],920:[0,.68611,0,0,.89444],923:[0,.68611,0,0,.80555],926:[0,.68611,0,0,.76666],928:[0,.68611,0,0,.9],931:[0,.68611,0,0,.83055],933:[0,.68611,0,0,.89444],934:[0,.68611,0,0,.83055],936:[0,.68611,0,0,.89444],937:[0,.68611,0,0,.83055],8211:[0,.44444,.03194,0,.575],8212:[0,.44444,.03194,0,1.14999],8216:[0,.69444,0,0,.31944],8217:[0,.69444,0,0,.31944],8220:[0,.69444,0,0,.60278],8221:[0,.69444,0,0,.60278],8224:[.19444,.69444,0,0,.51111],8225:[.19444,.69444,0,0,.51111],8242:[0,.55556,0,0,.34444],8407:[0,.72444,.15486,0,.575],8463:[0,.69444,0,0,.66759],8465:[0,.69444,0,0,.83055],8467:[0,.69444,0,0,.47361],8472:[.19444,.44444,0,0,.74027],8476:[0,.69444,0,0,.83055],8501:[0,.69444,0,0,.70277],8592:[-.10889,.39111,0,0,1.14999],8593:[.19444,.69444,0,0,.575],8594:[-.10889,.39111,0,0,1.14999],8595:[.19444,.69444,0,0,.575],8596:[-.10889,.39111,0,0,1.14999],8597:[.25,.75,0,0,.575],8598:[.19444,.69444,0,0,1.14999],8599:[.19444,.69444,0,0,1.14999],8600:[.19444,.69444,0,0,1.14999],8601:[.19444,.69444,0,0,1.14999],8636:[-.10889,.39111,0,0,1.14999],8637:[-.10889,.39111,0,0,1.14999],8640:[-.10889,.39111,0,0,1.14999],8641:[-.10889,.39111,0,0,1.14999],8656:[-.10889,.39111,0,0,1.14999],8657:[.19444,.69444,0,0,.70277],8658:[-.10889,.39111,0,0,1.14999],8659:[.19444,.69444,0,0,.70277],8660:[-.10889,.39111,0,0,1.14999],8661:[.25,.75,0,0,.70277],8704:[0,.69444,0,0,.63889],8706:[0,.69444,.06389,0,.62847],8707:[0,.69444,0,0,.63889],8709:[.05556,.75,0,0,.575],8711:[0,.68611,0,0,.95833],8712:[.08556,.58556,0,0,.76666],8715:[.08556,.58556,0,0,.76666],8722:[.13333,.63333,0,0,.89444],8723:[.13333,.63333,0,0,.89444],8725:[.25,.75,0,0,.575],8726:[.25,.75,0,0,.575],8727:[-.02778,.47222,0,0,.575],8728:[-.02639,.47361,0,0,.575],8729:[-.02639,.47361,0,0,.575],8730:[.18,.82,0,0,.95833],8733:[0,.44444,0,0,.89444],8734:[0,.44444,0,0,1.14999],8736:[0,.69224,0,0,.72222],8739:[.25,.75,0,0,.31944],8741:[.25,.75,0,0,.575],8743:[0,.55556,0,0,.76666],8744:[0,.55556,0,0,.76666],8745:[0,.55556,0,0,.76666],8746:[0,.55556,0,0,.76666],8747:[.19444,.69444,.12778,0,.56875],8764:[-.10889,.39111,0,0,.89444],8768:[.19444,.69444,0,0,.31944],8771:[.00222,.50222,0,0,.89444],8776:[.02444,.52444,0,0,.89444],8781:[.00222,.50222,0,0,.89444],8801:[.00222,.50222,0,0,.89444],8804:[.19667,.69667,0,0,.89444],8805:[.19667,.69667,0,0,.89444],8810:[.08556,.58556,0,0,1.14999],8811:[.08556,.58556,0,0,1.14999],8826:[.08556,.58556,0,0,.89444],8827:[.08556,.58556,0,0,.89444],8834:[.08556,.58556,0,0,.89444],8835:[.08556,.58556,0,0,.89444],8838:[.19667,.69667,0,0,.89444],8839:[.19667,.69667,0,0,.89444],8846:[0,.55556,0,0,.76666],8849:[.19667,.69667,0,0,.89444],8850:[.19667,.69667,0,0,.89444],8851:[0,.55556,0,0,.76666],8852:[0,.55556,0,0,.76666],8853:[.13333,.63333,0,0,.89444],8854:[.13333,.63333,0,0,.89444],8855:[.13333,.63333,0,0,.89444],8856:[.13333,.63333,0,0,.89444],8857:[.13333,.63333,0,0,.89444],8866:[0,.69444,0,0,.70277],8867:[0,.69444,0,0,.70277],8868:[0,.69444,0,0,.89444],8869:[0,.69444,0,0,.89444],8900:[-.02639,.47361,0,0,.575],8901:[-.02639,.47361,0,0,.31944],8902:[-.02778,.47222,0,0,.575],8968:[.25,.75,0,0,.51111],8969:[.25,.75,0,0,.51111],8970:[.25,.75,0,0,.51111],8971:[.25,.75,0,0,.51111],8994:[-.13889,.36111,0,0,1.14999],8995:[-.13889,.36111,0,0,1.14999],9651:[.19444,.69444,0,0,1.02222],9657:[-.02778,.47222,0,0,.575],9661:[.19444,.69444,0,0,1.02222],9667:[-.02778,.47222,0,0,.575],9711:[.19444,.69444,0,0,1.14999],9824:[.12963,.69444,0,0,.89444],9825:[.12963,.69444,0,0,.89444],9826:[.12963,.69444,0,0,.89444],9827:[.12963,.69444,0,0,.89444],9837:[0,.75,0,0,.44722],9838:[.19444,.69444,0,0,.44722],9839:[.19444,.69444,0,0,.44722],10216:[.25,.75,0,0,.44722],10217:[.25,.75,0,0,.44722],10815:[0,.68611,0,0,.9],10927:[.19667,.69667,0,0,.89444],10928:[.19667,.69667,0,0,.89444],57376:[.19444,.69444,0,0,0]},"Main-BoldItalic":{33:[0,.69444,.11417,0,.38611],34:[0,.69444,.07939,0,.62055],35:[.19444,.69444,.06833,0,.94444],37:[.05556,.75,.12861,0,.94444],38:[0,.69444,.08528,0,.88555],39:[0,.69444,.12945,0,.35555],40:[.25,.75,.15806,0,.47333],41:[.25,.75,.03306,0,.47333],42:[0,.75,.14333,0,.59111],43:[.10333,.60333,.03306,0,.88555],44:[.19444,.14722,0,0,.35555],45:[0,.44444,.02611,0,.41444],46:[0,.14722,0,0,.35555],47:[.25,.75,.15806,0,.59111],48:[0,.64444,.13167,0,.59111],49:[0,.64444,.13167,0,.59111],50:[0,.64444,.13167,0,.59111],51:[0,.64444,.13167,0,.59111],52:[.19444,.64444,.13167,0,.59111],53:[0,.64444,.13167,0,.59111],54:[0,.64444,.13167,0,.59111],55:[.19444,.64444,.13167,0,.59111],56:[0,.64444,.13167,0,.59111],57:[0,.64444,.13167,0,.59111],58:[0,.44444,.06695,0,.35555],59:[.19444,.44444,.06695,0,.35555],61:[-.10889,.39111,.06833,0,.88555],63:[0,.69444,.11472,0,.59111],64:[0,.69444,.09208,0,.88555],65:[0,.68611,0,0,.86555],66:[0,.68611,.0992,0,.81666],67:[0,.68611,.14208,0,.82666],68:[0,.68611,.09062,0,.87555],69:[0,.68611,.11431,0,.75666],70:[0,.68611,.12903,0,.72722],71:[0,.68611,.07347,0,.89527],72:[0,.68611,.17208,0,.8961],73:[0,.68611,.15681,0,.47166],74:[0,.68611,.145,0,.61055],75:[0,.68611,.14208,0,.89499],76:[0,.68611,0,0,.69777],77:[0,.68611,.17208,0,1.07277],78:[0,.68611,.17208,0,.8961],79:[0,.68611,.09062,0,.85499],80:[0,.68611,.0992,0,.78721],81:[.19444,.68611,.09062,0,.85499],82:[0,.68611,.02559,0,.85944],83:[0,.68611,.11264,0,.64999],84:[0,.68611,.12903,0,.7961],85:[0,.68611,.17208,0,.88083],86:[0,.68611,.18625,0,.86555],87:[0,.68611,.18625,0,1.15999],88:[0,.68611,.15681,0,.86555],89:[0,.68611,.19803,0,.86555],90:[0,.68611,.14208,0,.70888],91:[.25,.75,.1875,0,.35611],93:[.25,.75,.09972,0,.35611],94:[0,.69444,.06709,0,.59111],95:[.31,.13444,.09811,0,.59111],97:[0,.44444,.09426,0,.59111],98:[0,.69444,.07861,0,.53222],99:[0,.44444,.05222,0,.53222],100:[0,.69444,.10861,0,.59111],101:[0,.44444,.085,0,.53222],102:[.19444,.69444,.21778,0,.4],103:[.19444,.44444,.105,0,.53222],104:[0,.69444,.09426,0,.59111],105:[0,.69326,.11387,0,.35555],106:[.19444,.69326,.1672,0,.35555],107:[0,.69444,.11111,0,.53222],108:[0,.69444,.10861,0,.29666],109:[0,.44444,.09426,0,.94444],110:[0,.44444,.09426,0,.64999],111:[0,.44444,.07861,0,.59111],112:[.19444,.44444,.07861,0,.59111],113:[.19444,.44444,.105,0,.53222],114:[0,.44444,.11111,0,.50167],115:[0,.44444,.08167,0,.48694],116:[0,.63492,.09639,0,.385],117:[0,.44444,.09426,0,.62055],118:[0,.44444,.11111,0,.53222],119:[0,.44444,.11111,0,.76777],120:[0,.44444,.12583,0,.56055],121:[.19444,.44444,.105,0,.56166],122:[0,.44444,.13889,0,.49055],126:[.35,.34444,.11472,0,.59111],163:[0,.69444,0,0,.86853],168:[0,.69444,.11473,0,.59111],176:[0,.69444,0,0,.94888],184:[.17014,0,0,0,.53222],198:[0,.68611,.11431,0,1.02277],216:[.04861,.73472,.09062,0,.88555],223:[.19444,.69444,.09736,0,.665],230:[0,.44444,.085,0,.82666],248:[.09722,.54167,.09458,0,.59111],305:[0,.44444,.09426,0,.35555],338:[0,.68611,.11431,0,1.14054],339:[0,.44444,.085,0,.82666],567:[.19444,.44444,.04611,0,.385],710:[0,.69444,.06709,0,.59111],711:[0,.63194,.08271,0,.59111],713:[0,.59444,.10444,0,.59111],714:[0,.69444,.08528,0,.59111],715:[0,.69444,0,0,.59111],728:[0,.69444,.10333,0,.59111],729:[0,.69444,.12945,0,.35555],730:[0,.69444,0,0,.94888],732:[0,.69444,.11472,0,.59111],733:[0,.69444,.11472,0,.59111],915:[0,.68611,.12903,0,.69777],916:[0,.68611,0,0,.94444],920:[0,.68611,.09062,0,.88555],923:[0,.68611,0,0,.80666],926:[0,.68611,.15092,0,.76777],928:[0,.68611,.17208,0,.8961],931:[0,.68611,.11431,0,.82666],933:[0,.68611,.10778,0,.88555],934:[0,.68611,.05632,0,.82666],936:[0,.68611,.10778,0,.88555],937:[0,.68611,.0992,0,.82666],8211:[0,.44444,.09811,0,.59111],8212:[0,.44444,.09811,0,1.18221],8216:[0,.69444,.12945,0,.35555],8217:[0,.69444,.12945,0,.35555],8220:[0,.69444,.16772,0,.62055],8221:[0,.69444,.07939,0,.62055]},"Main-Italic":{33:[0,.69444,.12417,0,.30667],34:[0,.69444,.06961,0,.51444],35:[.19444,.69444,.06616,0,.81777],37:[.05556,.75,.13639,0,.81777],38:[0,.69444,.09694,0,.76666],39:[0,.69444,.12417,0,.30667],40:[.25,.75,.16194,0,.40889],41:[.25,.75,.03694,0,.40889],42:[0,.75,.14917,0,.51111],43:[.05667,.56167,.03694,0,.76666],44:[.19444,.10556,0,0,.30667],45:[0,.43056,.02826,0,.35778],46:[0,.10556,0,0,.30667],47:[.25,.75,.16194,0,.51111],48:[0,.64444,.13556,0,.51111],49:[0,.64444,.13556,0,.51111],50:[0,.64444,.13556,0,.51111],51:[0,.64444,.13556,0,.51111],52:[.19444,.64444,.13556,0,.51111],53:[0,.64444,.13556,0,.51111],54:[0,.64444,.13556,0,.51111],55:[.19444,.64444,.13556,0,.51111],56:[0,.64444,.13556,0,.51111],57:[0,.64444,.13556,0,.51111],58:[0,.43056,.0582,0,.30667],59:[.19444,.43056,.0582,0,.30667],61:[-.13313,.36687,.06616,0,.76666],63:[0,.69444,.1225,0,.51111],64:[0,.69444,.09597,0,.76666],65:[0,.68333,0,0,.74333],66:[0,.68333,.10257,0,.70389],67:[0,.68333,.14528,0,.71555],68:[0,.68333,.09403,0,.755],69:[0,.68333,.12028,0,.67833],70:[0,.68333,.13305,0,.65277],71:[0,.68333,.08722,0,.77361],72:[0,.68333,.16389,0,.74333],73:[0,.68333,.15806,0,.38555],74:[0,.68333,.14028,0,.525],75:[0,.68333,.14528,0,.76888],76:[0,.68333,0,0,.62722],77:[0,.68333,.16389,0,.89666],78:[0,.68333,.16389,0,.74333],79:[0,.68333,.09403,0,.76666],80:[0,.68333,.10257,0,.67833],81:[.19444,.68333,.09403,0,.76666],82:[0,.68333,.03868,0,.72944],83:[0,.68333,.11972,0,.56222],84:[0,.68333,.13305,0,.71555],85:[0,.68333,.16389,0,.74333],86:[0,.68333,.18361,0,.74333],87:[0,.68333,.18361,0,.99888],88:[0,.68333,.15806,0,.74333],89:[0,.68333,.19383,0,.74333],90:[0,.68333,.14528,0,.61333],91:[.25,.75,.1875,0,.30667],93:[.25,.75,.10528,0,.30667],94:[0,.69444,.06646,0,.51111],95:[.31,.12056,.09208,0,.51111],97:[0,.43056,.07671,0,.51111],98:[0,.69444,.06312,0,.46],99:[0,.43056,.05653,0,.46],100:[0,.69444,.10333,0,.51111],101:[0,.43056,.07514,0,.46],102:[.19444,.69444,.21194,0,.30667],103:[.19444,.43056,.08847,0,.46],104:[0,.69444,.07671,0,.51111],105:[0,.65536,.1019,0,.30667],106:[.19444,.65536,.14467,0,.30667],107:[0,.69444,.10764,0,.46],108:[0,.69444,.10333,0,.25555],109:[0,.43056,.07671,0,.81777],110:[0,.43056,.07671,0,.56222],111:[0,.43056,.06312,0,.51111],112:[.19444,.43056,.06312,0,.51111],113:[.19444,.43056,.08847,0,.46],114:[0,.43056,.10764,0,.42166],115:[0,.43056,.08208,0,.40889],116:[0,.61508,.09486,0,.33222],117:[0,.43056,.07671,0,.53666],118:[0,.43056,.10764,0,.46],119:[0,.43056,.10764,0,.66444],120:[0,.43056,.12042,0,.46389],121:[.19444,.43056,.08847,0,.48555],122:[0,.43056,.12292,0,.40889],126:[.35,.31786,.11585,0,.51111],163:[0,.69444,0,0,.76909],168:[0,.66786,.10474,0,.51111],176:[0,.69444,0,0,.83129],184:[.17014,0,0,0,.46],198:[0,.68333,.12028,0,.88277],216:[.04861,.73194,.09403,0,.76666],223:[.19444,.69444,.10514,0,.53666],230:[0,.43056,.07514,0,.71555],248:[.09722,.52778,.09194,0,.51111],305:[0,.43056,0,.02778,.32246],338:[0,.68333,.12028,0,.98499],339:[0,.43056,.07514,0,.71555],567:[.19444,.43056,0,.08334,.38403],710:[0,.69444,.06646,0,.51111],711:[0,.62847,.08295,0,.51111],713:[0,.56167,.10333,0,.51111],714:[0,.69444,.09694,0,.51111],715:[0,.69444,0,0,.51111],728:[0,.69444,.10806,0,.51111],729:[0,.66786,.11752,0,.30667],730:[0,.69444,0,0,.83129],732:[0,.66786,.11585,0,.51111],733:[0,.69444,.1225,0,.51111],915:[0,.68333,.13305,0,.62722],916:[0,.68333,0,0,.81777],920:[0,.68333,.09403,0,.76666],923:[0,.68333,0,0,.69222],926:[0,.68333,.15294,0,.66444],928:[0,.68333,.16389,0,.74333],931:[0,.68333,.12028,0,.71555],933:[0,.68333,.11111,0,.76666],934:[0,.68333,.05986,0,.71555],936:[0,.68333,.11111,0,.76666],937:[0,.68333,.10257,0,.71555],8211:[0,.43056,.09208,0,.51111],8212:[0,.43056,.09208,0,1.02222],8216:[0,.69444,.12417,0,.30667],8217:[0,.69444,.12417,0,.30667],8220:[0,.69444,.1685,0,.51444],8221:[0,.69444,.06961,0,.51444],8463:[0,.68889,0,0,.54028]},"Main-Regular":{32:[0,0,0,0,.25],33:[0,.69444,0,0,.27778],34:[0,.69444,0,0,.5],35:[.19444,.69444,0,0,.83334],36:[.05556,.75,0,0,.5],37:[.05556,.75,0,0,.83334],38:[0,.69444,0,0,.77778],39:[0,.69444,0,0,.27778],40:[.25,.75,0,0,.38889],41:[.25,.75,0,0,.38889],42:[0,.75,0,0,.5],43:[.08333,.58333,0,0,.77778],44:[.19444,.10556,0,0,.27778],45:[0,.43056,0,0,.33333],46:[0,.10556,0,0,.27778],47:[.25,.75,0,0,.5],48:[0,.64444,0,0,.5],49:[0,.64444,0,0,.5],50:[0,.64444,0,0,.5],51:[0,.64444,0,0,.5],52:[0,.64444,0,0,.5],53:[0,.64444,0,0,.5],54:[0,.64444,0,0,.5],55:[0,.64444,0,0,.5],56:[0,.64444,0,0,.5],57:[0,.64444,0,0,.5],58:[0,.43056,0,0,.27778],59:[.19444,.43056,0,0,.27778],60:[.0391,.5391,0,0,.77778],61:[-.13313,.36687,0,0,.77778],62:[.0391,.5391,0,0,.77778],63:[0,.69444,0,0,.47222],64:[0,.69444,0,0,.77778],65:[0,.68333,0,0,.75],66:[0,.68333,0,0,.70834],67:[0,.68333,0,0,.72222],68:[0,.68333,0,0,.76389],69:[0,.68333,0,0,.68056],70:[0,.68333,0,0,.65278],71:[0,.68333,0,0,.78472],72:[0,.68333,0,0,.75],73:[0,.68333,0,0,.36111],74:[0,.68333,0,0,.51389],75:[0,.68333,0,0,.77778],76:[0,.68333,0,0,.625],77:[0,.68333,0,0,.91667],78:[0,.68333,0,0,.75],79:[0,.68333,0,0,.77778],80:[0,.68333,0,0,.68056],81:[.19444,.68333,0,0,.77778],82:[0,.68333,0,0,.73611],83:[0,.68333,0,0,.55556],84:[0,.68333,0,0,.72222],85:[0,.68333,0,0,.75],86:[0,.68333,.01389,0,.75],87:[0,.68333,.01389,0,1.02778],88:[0,.68333,0,0,.75],89:[0,.68333,.025,0,.75],90:[0,.68333,0,0,.61111],91:[.25,.75,0,0,.27778],92:[.25,.75,0,0,.5],93:[.25,.75,0,0,.27778],94:[0,.69444,0,0,.5],95:[.31,.12056,.02778,0,.5],97:[0,.43056,0,0,.5],98:[0,.69444,0,0,.55556],99:[0,.43056,0,0,.44445],100:[0,.69444,0,0,.55556],101:[0,.43056,0,0,.44445],102:[0,.69444,.07778,0,.30556],103:[.19444,.43056,.01389,0,.5],104:[0,.69444,0,0,.55556],105:[0,.66786,0,0,.27778],106:[.19444,.66786,0,0,.30556],107:[0,.69444,0,0,.52778],108:[0,.69444,0,0,.27778],109:[0,.43056,0,0,.83334],110:[0,.43056,0,0,.55556],111:[0,.43056,0,0,.5],112:[.19444,.43056,0,0,.55556],113:[.19444,.43056,0,0,.52778],114:[0,.43056,0,0,.39167],115:[0,.43056,0,0,.39445],116:[0,.61508,0,0,.38889],117:[0,.43056,0,0,.55556],118:[0,.43056,.01389,0,.52778],119:[0,.43056,.01389,0,.72222],120:[0,.43056,0,0,.52778],121:[.19444,.43056,.01389,0,.52778],122:[0,.43056,0,0,.44445],123:[.25,.75,0,0,.5],124:[.25,.75,0,0,.27778],125:[.25,.75,0,0,.5],126:[.35,.31786,0,0,.5],160:[0,0,0,0,.25],167:[.19444,.69444,0,0,.44445],168:[0,.66786,0,0,.5],172:[0,.43056,0,0,.66667],176:[0,.69444,0,0,.75],177:[.08333,.58333,0,0,.77778],182:[.19444,.69444,0,0,.61111],184:[.17014,0,0,0,.44445],198:[0,.68333,0,0,.90278],215:[.08333,.58333,0,0,.77778],216:[.04861,.73194,0,0,.77778],223:[0,.69444,0,0,.5],230:[0,.43056,0,0,.72222],247:[.08333,.58333,0,0,.77778],248:[.09722,.52778,0,0,.5],305:[0,.43056,0,0,.27778],338:[0,.68333,0,0,1.01389],339:[0,.43056,0,0,.77778],567:[.19444,.43056,0,0,.30556],710:[0,.69444,0,0,.5],711:[0,.62847,0,0,.5],713:[0,.56778,0,0,.5],714:[0,.69444,0,0,.5],715:[0,.69444,0,0,.5],728:[0,.69444,0,0,.5],729:[0,.66786,0,0,.27778],730:[0,.69444,0,0,.75],732:[0,.66786,0,0,.5],733:[0,.69444,0,0,.5],915:[0,.68333,0,0,.625],916:[0,.68333,0,0,.83334],920:[0,.68333,0,0,.77778],923:[0,.68333,0,0,.69445],926:[0,.68333,0,0,.66667],928:[0,.68333,0,0,.75],931:[0,.68333,0,0,.72222],933:[0,.68333,0,0,.77778],934:[0,.68333,0,0,.72222],936:[0,.68333,0,0,.77778],937:[0,.68333,0,0,.72222],8211:[0,.43056,.02778,0,.5],8212:[0,.43056,.02778,0,1],8216:[0,.69444,0,0,.27778],8217:[0,.69444,0,0,.27778],8220:[0,.69444,0,0,.5],8221:[0,.69444,0,0,.5],8224:[.19444,.69444,0,0,.44445],8225:[.19444,.69444,0,0,.44445],8230:[0,.12,0,0,1.172],8242:[0,.55556,0,0,.275],8407:[0,.71444,.15382,0,.5],8463:[0,.68889,0,0,.54028],8465:[0,.69444,0,0,.72222],8467:[0,.69444,0,.11111,.41667],8472:[.19444,.43056,0,.11111,.63646],8476:[0,.69444,0,0,.72222],8501:[0,.69444,0,0,.61111],8592:[-.13313,.36687,0,0,1],8593:[.19444,.69444,0,0,.5],8594:[-.13313,.36687,0,0,1],8595:[.19444,.69444,0,0,.5],8596:[-.13313,.36687,0,0,1],8597:[.25,.75,0,0,.5],8598:[.19444,.69444,0,0,1],8599:[.19444,.69444,0,0,1],8600:[.19444,.69444,0,0,1],8601:[.19444,.69444,0,0,1],8614:[.011,.511,0,0,1],8617:[.011,.511,0,0,1.126],8618:[.011,.511,0,0,1.126],8636:[-.13313,.36687,0,0,1],8637:[-.13313,.36687,0,0,1],8640:[-.13313,.36687,0,0,1],8641:[-.13313,.36687,0,0,1],8652:[.011,.671,0,0,1],8656:[-.13313,.36687,0,0,1],8657:[.19444,.69444,0,0,.61111],8658:[-.13313,.36687,0,0,1],8659:[.19444,.69444,0,0,.61111],8660:[-.13313,.36687,0,0,1],8661:[.25,.75,0,0,.61111],8704:[0,.69444,0,0,.55556],8706:[0,.69444,.05556,.08334,.5309],8707:[0,.69444,0,0,.55556],8709:[.05556,.75,0,0,.5],8711:[0,.68333,0,0,.83334],8712:[.0391,.5391,0,0,.66667],8715:[.0391,.5391,0,0,.66667],8722:[.08333,.58333,0,0,.77778],8723:[.08333,.58333,0,0,.77778],8725:[.25,.75,0,0,.5],8726:[.25,.75,0,0,.5],8727:[-.03472,.46528,0,0,.5],8728:[-.05555,.44445,0,0,.5],8729:[-.05555,.44445,0,0,.5],8730:[.2,.8,0,0,.83334],8733:[0,.43056,0,0,.77778],8734:[0,.43056,0,0,1],8736:[0,.69224,0,0,.72222],8739:[.25,.75,0,0,.27778],8741:[.25,.75,0,0,.5],8743:[0,.55556,0,0,.66667],8744:[0,.55556,0,0,.66667],8745:[0,.55556,0,0,.66667],8746:[0,.55556,0,0,.66667],8747:[.19444,.69444,.11111,0,.41667],8764:[-.13313,.36687,0,0,.77778],8768:[.19444,.69444,0,0,.27778],8771:[-.03625,.46375,0,0,.77778],8773:[-.022,.589,0,0,1],8776:[-.01688,.48312,0,0,.77778],8781:[-.03625,.46375,0,0,.77778],8784:[-.133,.67,0,0,.778],8801:[-.03625,.46375,0,0,.77778],8804:[.13597,.63597,0,0,.77778],8805:[.13597,.63597,0,0,.77778],8810:[.0391,.5391,0,0,1],8811:[.0391,.5391,0,0,1],8826:[.0391,.5391,0,0,.77778],8827:[.0391,.5391,0,0,.77778],8834:[.0391,.5391,0,0,.77778],8835:[.0391,.5391,0,0,.77778],8838:[.13597,.63597,0,0,.77778],8839:[.13597,.63597,0,0,.77778],8846:[0,.55556,0,0,.66667],8849:[.13597,.63597,0,0,.77778],8850:[.13597,.63597,0,0,.77778],8851:[0,.55556,0,0,.66667],8852:[0,.55556,0,0,.66667],8853:[.08333,.58333,0,0,.77778],8854:[.08333,.58333,0,0,.77778],8855:[.08333,.58333,0,0,.77778],8856:[.08333,.58333,0,0,.77778],8857:[.08333,.58333,0,0,.77778],8866:[0,.69444,0,0,.61111],8867:[0,.69444,0,0,.61111],8868:[0,.69444,0,0,.77778],8869:[0,.69444,0,0,.77778],8872:[.249,.75,0,0,.867],8900:[-.05555,.44445,0,0,.5],8901:[-.05555,.44445,0,0,.27778],8902:[-.03472,.46528,0,0,.5],8904:[.005,.505,0,0,.9],8942:[.03,.9,0,0,.278],8943:[-.19,.31,0,0,1.172],8945:[-.1,.82,0,0,1.282],8968:[.25,.75,0,0,.44445],8969:[.25,.75,0,0,.44445],8970:[.25,.75,0,0,.44445],8971:[.25,.75,0,0,.44445],8994:[-.14236,.35764,0,0,1],8995:[-.14236,.35764,0,0,1],9136:[.244,.744,0,0,.412],9137:[.244,.744,0,0,.412],9651:[.19444,.69444,0,0,.88889],9657:[-.03472,.46528,0,0,.5],9661:[.19444,.69444,0,0,.88889],9667:[-.03472,.46528,0,0,.5],9711:[.19444,.69444,0,0,1],9824:[.12963,.69444,0,0,.77778],9825:[.12963,.69444,0,0,.77778],9826:[.12963,.69444,0,0,.77778],9827:[.12963,.69444,0,0,.77778],9837:[0,.75,0,0,.38889],9838:[.19444,.69444,0,0,.38889],9839:[.19444,.69444,0,0,.38889],10216:[.25,.75,0,0,.38889],10217:[.25,.75,0,0,.38889],10222:[.244,.744,0,0,.412],10223:[.244,.744,0,0,.412],10229:[.011,.511,0,0,1.609],10230:[.011,.511,0,0,1.638],10231:[.011,.511,0,0,1.859],10232:[.024,.525,0,0,1.609],10233:[.024,.525,0,0,1.638],10234:[.024,.525,0,0,1.858],10236:[.011,.511,0,0,1.638],10815:[0,.68333,0,0,.75],10927:[.13597,.63597,0,0,.77778],10928:[.13597,.63597,0,0,.77778],57376:[.19444,.69444,0,0,0]},"Math-BoldItalic":{65:[0,.68611,0,0,.86944],66:[0,.68611,.04835,0,.8664],67:[0,.68611,.06979,0,.81694],68:[0,.68611,.03194,0,.93812],69:[0,.68611,.05451,0,.81007],70:[0,.68611,.15972,0,.68889],71:[0,.68611,0,0,.88673],72:[0,.68611,.08229,0,.98229],73:[0,.68611,.07778,0,.51111],74:[0,.68611,.10069,0,.63125],75:[0,.68611,.06979,0,.97118],76:[0,.68611,0,0,.75555],77:[0,.68611,.11424,0,1.14201],78:[0,.68611,.11424,0,.95034],79:[0,.68611,.03194,0,.83666],80:[0,.68611,.15972,0,.72309],81:[.19444,.68611,0,0,.86861],82:[0,.68611,.00421,0,.87235],83:[0,.68611,.05382,0,.69271],84:[0,.68611,.15972,0,.63663],85:[0,.68611,.11424,0,.80027],86:[0,.68611,.25555,0,.67778],87:[0,.68611,.15972,0,1.09305],88:[0,.68611,.07778,0,.94722],89:[0,.68611,.25555,0,.67458],90:[0,.68611,.06979,0,.77257],97:[0,.44444,0,0,.63287],98:[0,.69444,0,0,.52083],99:[0,.44444,0,0,.51342],100:[0,.69444,0,0,.60972],101:[0,.44444,0,0,.55361],102:[.19444,.69444,.11042,0,.56806],103:[.19444,.44444,.03704,0,.5449],104:[0,.69444,0,0,.66759],105:[0,.69326,0,0,.4048],106:[.19444,.69326,.0622,0,.47083],107:[0,.69444,.01852,0,.6037],108:[0,.69444,.0088,0,.34815],109:[0,.44444,0,0,1.0324],110:[0,.44444,0,0,.71296],111:[0,.44444,0,0,.58472],112:[.19444,.44444,0,0,.60092],113:[.19444,.44444,.03704,0,.54213],114:[0,.44444,.03194,0,.5287],115:[0,.44444,0,0,.53125],116:[0,.63492,0,0,.41528],117:[0,.44444,0,0,.68102],118:[0,.44444,.03704,0,.56666],119:[0,.44444,.02778,0,.83148],120:[0,.44444,0,0,.65903],121:[.19444,.44444,.03704,0,.59028],122:[0,.44444,.04213,0,.55509],915:[0,.68611,.15972,0,.65694],916:[0,.68611,0,0,.95833],920:[0,.68611,.03194,0,.86722],923:[0,.68611,0,0,.80555],926:[0,.68611,.07458,0,.84125],928:[0,.68611,.08229,0,.98229],931:[0,.68611,.05451,0,.88507],933:[0,.68611,.15972,0,.67083],934:[0,.68611,0,0,.76666],936:[0,.68611,.11653,0,.71402],937:[0,.68611,.04835,0,.8789],945:[0,.44444,0,0,.76064],946:[.19444,.69444,.03403,0,.65972],947:[.19444,.44444,.06389,0,.59003],948:[0,.69444,.03819,0,.52222],949:[0,.44444,0,0,.52882],950:[.19444,.69444,.06215,0,.50833],951:[.19444,.44444,.03704,0,.6],952:[0,.69444,.03194,0,.5618],953:[0,.44444,0,0,.41204],954:[0,.44444,0,0,.66759],955:[0,.69444,0,0,.67083],956:[.19444,.44444,0,0,.70787],957:[0,.44444,.06898,0,.57685],958:[.19444,.69444,.03021,0,.50833],959:[0,.44444,0,0,.58472],960:[0,.44444,.03704,0,.68241],961:[.19444,.44444,0,0,.6118],962:[.09722,.44444,.07917,0,.42361],963:[0,.44444,.03704,0,.68588],964:[0,.44444,.13472,0,.52083],965:[0,.44444,.03704,0,.63055],966:[.19444,.44444,0,0,.74722],967:[.19444,.44444,0,0,.71805],968:[.19444,.69444,.03704,0,.75833],969:[0,.44444,.03704,0,.71782],977:[0,.69444,0,0,.69155],981:[.19444,.69444,0,0,.7125],982:[0,.44444,.03194,0,.975],1009:[.19444,.44444,0,0,.6118],1013:[0,.44444,0,0,.48333]},"Math-Italic":{65:[0,.68333,0,.13889,.75],66:[0,.68333,.05017,.08334,.75851],67:[0,.68333,.07153,.08334,.71472],68:[0,.68333,.02778,.05556,.82792],69:[0,.68333,.05764,.08334,.7382],70:[0,.68333,.13889,.08334,.64306],71:[0,.68333,0,.08334,.78625],72:[0,.68333,.08125,.05556,.83125],73:[0,.68333,.07847,.11111,.43958],74:[0,.68333,.09618,.16667,.55451],75:[0,.68333,.07153,.05556,.84931],76:[0,.68333,0,.02778,.68056],77:[0,.68333,.10903,.08334,.97014],78:[0,.68333,.10903,.08334,.80347],79:[0,.68333,.02778,.08334,.76278],80:[0,.68333,.13889,.08334,.64201],81:[.19444,.68333,0,.08334,.79056],82:[0,.68333,.00773,.08334,.75929],83:[0,.68333,.05764,.08334,.6132],84:[0,.68333,.13889,.08334,.58438],85:[0,.68333,.10903,.02778,.68278],86:[0,.68333,.22222,0,.58333],87:[0,.68333,.13889,0,.94445],88:[0,.68333,.07847,.08334,.82847],89:[0,.68333,.22222,0,.58056],90:[0,.68333,.07153,.08334,.68264],97:[0,.43056,0,0,.52859],98:[0,.69444,0,0,.42917],99:[0,.43056,0,.05556,.43276],100:[0,.69444,0,.16667,.52049],101:[0,.43056,0,.05556,.46563],102:[.19444,.69444,.10764,.16667,.48959],103:[.19444,.43056,.03588,.02778,.47697],104:[0,.69444,0,0,.57616],105:[0,.65952,0,0,.34451],106:[.19444,.65952,.05724,0,.41181],107:[0,.69444,.03148,0,.5206],108:[0,.69444,.01968,.08334,.29838],109:[0,.43056,0,0,.87801],110:[0,.43056,0,0,.60023],111:[0,.43056,0,.05556,.48472],112:[.19444,.43056,0,.08334,.50313],113:[.19444,.43056,.03588,.08334,.44641],114:[0,.43056,.02778,.05556,.45116],115:[0,.43056,0,.05556,.46875],116:[0,.61508,0,.08334,.36111],117:[0,.43056,0,.02778,.57246],118:[0,.43056,.03588,.02778,.48472],119:[0,.43056,.02691,.08334,.71592],120:[0,.43056,0,.02778,.57153],121:[.19444,.43056,.03588,.05556,.49028],122:[0,.43056,.04398,.05556,.46505],915:[0,.68333,.13889,.08334,.61528],916:[0,.68333,0,.16667,.83334],920:[0,.68333,.02778,.08334,.76278],923:[0,.68333,0,.16667,.69445],926:[0,.68333,.07569,.08334,.74236],928:[0,.68333,.08125,.05556,.83125],931:[0,.68333,.05764,.08334,.77986],933:[0,.68333,.13889,.05556,.58333],934:[0,.68333,0,.08334,.66667],936:[0,.68333,.11,.05556,.61222],937:[0,.68333,.05017,.08334,.7724],945:[0,.43056,.0037,.02778,.6397],946:[.19444,.69444,.05278,.08334,.56563],947:[.19444,.43056,.05556,0,.51773],948:[0,.69444,.03785,.05556,.44444],949:[0,.43056,0,.08334,.46632],950:[.19444,.69444,.07378,.08334,.4375],951:[.19444,.43056,.03588,.05556,.49653],952:[0,.69444,.02778,.08334,.46944],953:[0,.43056,0,.05556,.35394],954:[0,.43056,0,0,.57616],955:[0,.69444,0,0,.58334],956:[.19444,.43056,0,.02778,.60255],957:[0,.43056,.06366,.02778,.49398],958:[.19444,.69444,.04601,.11111,.4375],959:[0,.43056,0,.05556,.48472],960:[0,.43056,.03588,0,.57003],961:[.19444,.43056,0,.08334,.51702],962:[.09722,.43056,.07986,.08334,.36285],963:[0,.43056,.03588,0,.57141],964:[0,.43056,.1132,.02778,.43715],965:[0,.43056,.03588,.02778,.54028],966:[.19444,.43056,0,.08334,.65417],967:[.19444,.43056,0,.05556,.62569],968:[.19444,.69444,.03588,.11111,.65139],969:[0,.43056,.03588,0,.62245],977:[0,.69444,0,.08334,.59144],981:[.19444,.69444,0,.08334,.59583],982:[0,.43056,.02778,0,.82813],1009:[.19444,.43056,0,.08334,.51702],1013:[0,.43056,0,.05556,.4059]},"Math-Regular":{65:[0,.68333,0,.13889,.75],66:[0,.68333,.05017,.08334,.75851],67:[0,.68333,.07153,.08334,.71472],68:[0,.68333,.02778,.05556,.82792],69:[0,.68333,.05764,.08334,.7382],70:[0,.68333,.13889,.08334,.64306],71:[0,.68333,0,.08334,.78625],72:[0,.68333,.08125,.05556,.83125],73:[0,.68333,.07847,.11111,.43958],74:[0,.68333,.09618,.16667,.55451],75:[0,.68333,.07153,.05556,.84931],76:[0,.68333,0,.02778,.68056],77:[0,.68333,.10903,.08334,.97014],78:[0,.68333,.10903,.08334,.80347],79:[0,.68333,.02778,.08334,.76278],80:[0,.68333,.13889,.08334,.64201],81:[.19444,.68333,0,.08334,.79056],82:[0,.68333,.00773,.08334,.75929],83:[0,.68333,.05764,.08334,.6132],84:[0,.68333,.13889,.08334,.58438],85:[0,.68333,.10903,.02778,.68278],86:[0,.68333,.22222,0,.58333],87:[0,.68333,.13889,0,.94445],88:[0,.68333,.07847,.08334,.82847],89:[0,.68333,.22222,0,.58056],90:[0,.68333,.07153,.08334,.68264],97:[0,.43056,0,0,.52859],98:[0,.69444,0,0,.42917],99:[0,.43056,0,.05556,.43276],100:[0,.69444,0,.16667,.52049],101:[0,.43056,0,.05556,.46563],102:[.19444,.69444,.10764,.16667,.48959],103:[.19444,.43056,.03588,.02778,.47697],104:[0,.69444,0,0,.57616],105:[0,.65952,0,0,.34451],106:[.19444,.65952,.05724,0,.41181],107:[0,.69444,.03148,0,.5206],108:[0,.69444,.01968,.08334,.29838],109:[0,.43056,0,0,.87801],110:[0,.43056,0,0,.60023],111:[0,.43056,0,.05556,.48472],112:[.19444,.43056,0,.08334,.50313],113:[.19444,.43056,.03588,.08334,.44641],114:[0,.43056,.02778,.05556,.45116],115:[0,.43056,0,.05556,.46875],116:[0,.61508,0,.08334,.36111],117:[0,.43056,0,.02778,.57246],118:[0,.43056,.03588,.02778,.48472],119:[0,.43056,.02691,.08334,.71592],120:[0,.43056,0,.02778,.57153],121:[.19444,.43056,.03588,.05556,.49028],122:[0,.43056,.04398,.05556,.46505],915:[0,.68333,.13889,.08334,.61528],916:[0,.68333,0,.16667,.83334],920:[0,.68333,.02778,.08334,.76278],923:[0,.68333,0,.16667,.69445],926:[0,.68333,.07569,.08334,.74236],928:[0,.68333,.08125,.05556,.83125],931:[0,.68333,.05764,.08334,.77986],933:[0,.68333,.13889,.05556,.58333],934:[0,.68333,0,.08334,.66667],936:[0,.68333,.11,.05556,.61222],937:[0,.68333,.05017,.08334,.7724],945:[0,.43056,.0037,.02778,.6397],946:[.19444,.69444,.05278,.08334,.56563],947:[.19444,.43056,.05556,0,.51773],948:[0,.69444,.03785,.05556,.44444],949:[0,.43056,0,.08334,.46632],950:[.19444,.69444,.07378,.08334,.4375],951:[.19444,.43056,.03588,.05556,.49653],952:[0,.69444,.02778,.08334,.46944],953:[0,.43056,0,.05556,.35394],954:[0,.43056,0,0,.57616],955:[0,.69444,0,0,.58334],956:[.19444,.43056,0,.02778,.60255],957:[0,.43056,.06366,.02778,.49398],958:[.19444,.69444,.04601,.11111,.4375],959:[0,.43056,0,.05556,.48472],960:[0,.43056,.03588,0,.57003],961:[.19444,.43056,0,.08334,.51702],962:[.09722,.43056,.07986,.08334,.36285],963:[0,.43056,.03588,0,.57141],964:[0,.43056,.1132,.02778,.43715],965:[0,.43056,.03588,.02778,.54028],966:[.19444,.43056,0,.08334,.65417],967:[.19444,.43056,0,.05556,.62569],968:[.19444,.69444,.03588,.11111,.65139],969:[0,.43056,.03588,0,.62245],977:[0,.69444,0,.08334,.59144],981:[.19444,.69444,0,.08334,.59583],982:[0,.43056,.02778,0,.82813],1009:[.19444,.43056,0,.08334,.51702],1013:[0,.43056,0,.05556,.4059]},"SansSerif-Bold":{33:[0,.69444,0,0,.36667],34:[0,.69444,0,0,.55834],35:[.19444,.69444,0,0,.91667],36:[.05556,.75,0,0,.55],37:[.05556,.75,0,0,1.02912],38:[0,.69444,0,0,.83056],39:[0,.69444,0,0,.30556],40:[.25,.75,0,0,.42778],41:[.25,.75,0,0,.42778],42:[0,.75,0,0,.55],43:[.11667,.61667,0,0,.85556],44:[.10556,.13056,0,0,.30556],45:[0,.45833,0,0,.36667],46:[0,.13056,0,0,.30556],47:[.25,.75,0,0,.55],48:[0,.69444,0,0,.55],49:[0,.69444,0,0,.55],50:[0,.69444,0,0,.55],51:[0,.69444,0,0,.55],52:[0,.69444,0,0,.55],53:[0,.69444,0,0,.55],54:[0,.69444,0,0,.55],55:[0,.69444,0,0,.55],56:[0,.69444,0,0,.55],57:[0,.69444,0,0,.55],58:[0,.45833,0,0,.30556],59:[.10556,.45833,0,0,.30556],61:[-.09375,.40625,0,0,.85556],63:[0,.69444,0,0,.51945],64:[0,.69444,0,0,.73334],65:[0,.69444,0,0,.73334],66:[0,.69444,0,0,.73334],67:[0,.69444,0,0,.70278],68:[0,.69444,0,0,.79445],69:[0,.69444,0,0,.64167],70:[0,.69444,0,0,.61111],71:[0,.69444,0,0,.73334],72:[0,.69444,0,0,.79445],73:[0,.69444,0,0,.33056],74:[0,.69444,0,0,.51945],75:[0,.69444,0,0,.76389],76:[0,.69444,0,0,.58056],77:[0,.69444,0,0,.97778],78:[0,.69444,0,0,.79445],79:[0,.69444,0,0,.79445],80:[0,.69444,0,0,.70278],81:[.10556,.69444,0,0,.79445],82:[0,.69444,0,0,.70278],83:[0,.69444,0,0,.61111],84:[0,.69444,0,0,.73334],85:[0,.69444,0,0,.76389],86:[0,.69444,.01528,0,.73334],87:[0,.69444,.01528,0,1.03889],88:[0,.69444,0,0,.73334],89:[0,.69444,.0275,0,.73334],90:[0,.69444,0,0,.67223],91:[.25,.75,0,0,.34306],93:[.25,.75,0,0,.34306],94:[0,.69444,0,0,.55],95:[.35,.10833,.03056,0,.55],97:[0,.45833,0,0,.525],98:[0,.69444,0,0,.56111],99:[0,.45833,0,0,.48889],100:[0,.69444,0,0,.56111],101:[0,.45833,0,0,.51111],102:[0,.69444,.07639,0,.33611],103:[.19444,.45833,.01528,0,.55],104:[0,.69444,0,0,.56111],105:[0,.69444,0,0,.25556],106:[.19444,.69444,0,0,.28611],107:[0,.69444,0,0,.53056],108:[0,.69444,0,0,.25556],109:[0,.45833,0,0,.86667],110:[0,.45833,0,0,.56111],111:[0,.45833,0,0,.55],112:[.19444,.45833,0,0,.56111],113:[.19444,.45833,0,0,.56111],114:[0,.45833,.01528,0,.37222],115:[0,.45833,0,0,.42167],116:[0,.58929,0,0,.40417],117:[0,.45833,0,0,.56111],118:[0,.45833,.01528,0,.5],119:[0,.45833,.01528,0,.74445],120:[0,.45833,0,0,.5],121:[.19444,.45833,.01528,0,.5],122:[0,.45833,0,0,.47639],126:[.35,.34444,0,0,.55],168:[0,.69444,0,0,.55],176:[0,.69444,0,0,.73334],180:[0,.69444,0,0,.55],184:[.17014,0,0,0,.48889],305:[0,.45833,0,0,.25556],567:[.19444,.45833,0,0,.28611],710:[0,.69444,0,0,.55],711:[0,.63542,0,0,.55],713:[0,.63778,0,0,.55],728:[0,.69444,0,0,.55],729:[0,.69444,0,0,.30556],730:[0,.69444,0,0,.73334],732:[0,.69444,0,0,.55],733:[0,.69444,0,0,.55],915:[0,.69444,0,0,.58056],916:[0,.69444,0,0,.91667],920:[0,.69444,0,0,.85556],923:[0,.69444,0,0,.67223],926:[0,.69444,0,0,.73334],928:[0,.69444,0,0,.79445],931:[0,.69444,0,0,.79445],933:[0,.69444,0,0,.85556],934:[0,.69444,0,0,.79445],936:[0,.69444,0,0,.85556],937:[0,.69444,0,0,.79445],8211:[0,.45833,.03056,0,.55],8212:[0,.45833,.03056,0,1.10001],8216:[0,.69444,0,0,.30556],8217:[0,.69444,0,0,.30556],8220:[0,.69444,0,0,.55834],8221:[0,.69444,0,0,.55834]},"SansSerif-Italic":{33:[0,.69444,.05733,0,.31945],34:[0,.69444,.00316,0,.5],35:[.19444,.69444,.05087,0,.83334],36:[.05556,.75,.11156,0,.5],37:[.05556,.75,.03126,0,.83334],38:[0,.69444,.03058,0,.75834],39:[0,.69444,.07816,0,.27778],40:[.25,.75,.13164,0,.38889],41:[.25,.75,.02536,0,.38889],42:[0,.75,.11775,0,.5],43:[.08333,.58333,.02536,0,.77778],44:[.125,.08333,0,0,.27778],45:[0,.44444,.01946,0,.33333],46:[0,.08333,0,0,.27778],47:[.25,.75,.13164,0,.5],48:[0,.65556,.11156,0,.5],49:[0,.65556,.11156,0,.5],50:[0,.65556,.11156,0,.5],51:[0,.65556,.11156,0,.5],52:[0,.65556,.11156,0,.5],53:[0,.65556,.11156,0,.5],54:[0,.65556,.11156,0,.5],55:[0,.65556,.11156,0,.5],56:[0,.65556,.11156,0,.5],57:[0,.65556,.11156,0,.5],58:[0,.44444,.02502,0,.27778],59:[.125,.44444,.02502,0,.27778],61:[-.13,.37,.05087,0,.77778],63:[0,.69444,.11809,0,.47222],64:[0,.69444,.07555,0,.66667],65:[0,.69444,0,0,.66667],66:[0,.69444,.08293,0,.66667],67:[0,.69444,.11983,0,.63889],68:[0,.69444,.07555,0,.72223],69:[0,.69444,.11983,0,.59722],70:[0,.69444,.13372,0,.56945],71:[0,.69444,.11983,0,.66667],72:[0,.69444,.08094,0,.70834],73:[0,.69444,.13372,0,.27778],74:[0,.69444,.08094,0,.47222],75:[0,.69444,.11983,0,.69445],76:[0,.69444,0,0,.54167],77:[0,.69444,.08094,0,.875],78:[0,.69444,.08094,0,.70834],79:[0,.69444,.07555,0,.73611],80:[0,.69444,.08293,0,.63889],81:[.125,.69444,.07555,0,.73611],82:[0,.69444,.08293,0,.64584],83:[0,.69444,.09205,0,.55556],84:[0,.69444,.13372,0,.68056],85:[0,.69444,.08094,0,.6875],86:[0,.69444,.1615,0,.66667],87:[0,.69444,.1615,0,.94445],88:[0,.69444,.13372,0,.66667],89:[0,.69444,.17261,0,.66667],90:[0,.69444,.11983,0,.61111],91:[.25,.75,.15942,0,.28889],93:[.25,.75,.08719,0,.28889],94:[0,.69444,.0799,0,.5],95:[.35,.09444,.08616,0,.5],97:[0,.44444,.00981,0,.48056],98:[0,.69444,.03057,0,.51667],99:[0,.44444,.08336,0,.44445],100:[0,.69444,.09483,0,.51667],101:[0,.44444,.06778,0,.44445],102:[0,.69444,.21705,0,.30556],103:[.19444,.44444,.10836,0,.5],104:[0,.69444,.01778,0,.51667],105:[0,.67937,.09718,0,.23889],106:[.19444,.67937,.09162,0,.26667],107:[0,.69444,.08336,0,.48889],108:[0,.69444,.09483,0,.23889],109:[0,.44444,.01778,0,.79445],110:[0,.44444,.01778,0,.51667],111:[0,.44444,.06613,0,.5],112:[.19444,.44444,.0389,0,.51667],113:[.19444,.44444,.04169,0,.51667],114:[0,.44444,.10836,0,.34167],115:[0,.44444,.0778,0,.38333],116:[0,.57143,.07225,0,.36111],117:[0,.44444,.04169,0,.51667],118:[0,.44444,.10836,0,.46111],119:[0,.44444,.10836,0,.68334],120:[0,.44444,.09169,0,.46111],121:[.19444,.44444,.10836,0,.46111],122:[0,.44444,.08752,0,.43472],126:[.35,.32659,.08826,0,.5],168:[0,.67937,.06385,0,.5],176:[0,.69444,0,0,.73752],184:[.17014,0,0,0,.44445],305:[0,.44444,.04169,0,.23889],567:[.19444,.44444,.04169,0,.26667],710:[0,.69444,.0799,0,.5],711:[0,.63194,.08432,0,.5],713:[0,.60889,.08776,0,.5],714:[0,.69444,.09205,0,.5],715:[0,.69444,0,0,.5],728:[0,.69444,.09483,0,.5],729:[0,.67937,.07774,0,.27778],730:[0,.69444,0,0,.73752],732:[0,.67659,.08826,0,.5],733:[0,.69444,.09205,0,.5],915:[0,.69444,.13372,0,.54167],916:[0,.69444,0,0,.83334],920:[0,.69444,.07555,0,.77778],923:[0,.69444,0,0,.61111],926:[0,.69444,.12816,0,.66667],928:[0,.69444,.08094,0,.70834],931:[0,.69444,.11983,0,.72222],933:[0,.69444,.09031,0,.77778],934:[0,.69444,.04603,0,.72222],936:[0,.69444,.09031,0,.77778],937:[0,.69444,.08293,0,.72222],8211:[0,.44444,.08616,0,.5],8212:[0,.44444,.08616,0,1],8216:[0,.69444,.07816,0,.27778],8217:[0,.69444,.07816,0,.27778],8220:[0,.69444,.14205,0,.5],8221:[0,.69444,.00316,0,.5]},"SansSerif-Regular":{33:[0,.69444,0,0,.31945],34:[0,.69444,0,0,.5],35:[.19444,.69444,0,0,.83334],36:[.05556,.75,0,0,.5],37:[.05556,.75,0,0,.83334],38:[0,.69444,0,0,.75834],39:[0,.69444,0,0,.27778],40:[.25,.75,0,0,.38889],41:[.25,.75,0,0,.38889],42:[0,.75,0,0,.5],43:[.08333,.58333,0,0,.77778],44:[.125,.08333,0,0,.27778],45:[0,.44444,0,0,.33333],46:[0,.08333,0,0,.27778],47:[.25,.75,0,0,.5],48:[0,.65556,0,0,.5],49:[0,.65556,0,0,.5],50:[0,.65556,0,0,.5],51:[0,.65556,0,0,.5],52:[0,.65556,0,0,.5],53:[0,.65556,0,0,.5],54:[0,.65556,0,0,.5],55:[0,.65556,0,0,.5],56:[0,.65556,0,0,.5],57:[0,.65556,0,0,.5],58:[0,.44444,0,0,.27778],59:[.125,.44444,0,0,.27778],61:[-.13,.37,0,0,.77778],63:[0,.69444,0,0,.47222],64:[0,.69444,0,0,.66667],65:[0,.69444,0,0,.66667],66:[0,.69444,0,0,.66667],67:[0,.69444,0,0,.63889],68:[0,.69444,0,0,.72223],69:[0,.69444,0,0,.59722],70:[0,.69444,0,0,.56945],71:[0,.69444,0,0,.66667],72:[0,.69444,0,0,.70834],73:[0,.69444,0,0,.27778],74:[0,.69444,0,0,.47222],75:[0,.69444,0,0,.69445],76:[0,.69444,0,0,.54167],77:[0,.69444,0,0,.875],78:[0,.69444,0,0,.70834],79:[0,.69444,0,0,.73611],80:[0,.69444,0,0,.63889],81:[.125,.69444,0,0,.73611],82:[0,.69444,0,0,.64584],83:[0,.69444,0,0,.55556],84:[0,.69444,0,0,.68056],85:[0,.69444,0,0,.6875],86:[0,.69444,.01389,0,.66667],87:[0,.69444,.01389,0,.94445],88:[0,.69444,0,0,.66667],89:[0,.69444,.025,0,.66667],90:[0,.69444,0,0,.61111],91:[.25,.75,0,0,.28889],93:[.25,.75,0,0,.28889],94:[0,.69444,0,0,.5],95:[.35,.09444,.02778,0,.5],97:[0,.44444,0,0,.48056],98:[0,.69444,0,0,.51667],99:[0,.44444,0,0,.44445],100:[0,.69444,0,0,.51667],101:[0,.44444,0,0,.44445],102:[0,.69444,.06944,0,.30556],103:[.19444,.44444,.01389,0,.5],104:[0,.69444,0,0,.51667],105:[0,.67937,0,0,.23889],106:[.19444,.67937,0,0,.26667],107:[0,.69444,0,0,.48889],108:[0,.69444,0,0,.23889],109:[0,.44444,0,0,.79445],110:[0,.44444,0,0,.51667],111:[0,.44444,0,0,.5],112:[.19444,.44444,0,0,.51667],113:[.19444,.44444,0,0,.51667],114:[0,.44444,.01389,0,.34167],115:[0,.44444,0,0,.38333],116:[0,.57143,0,0,.36111],117:[0,.44444,0,0,.51667],118:[0,.44444,.01389,0,.46111],119:[0,.44444,.01389,0,.68334],120:[0,.44444,0,0,.46111],121:[.19444,.44444,.01389,0,.46111],122:[0,.44444,0,0,.43472],126:[.35,.32659,0,0,.5],168:[0,.67937,0,0,.5],176:[0,.69444,0,0,.66667],184:[.17014,0,0,0,.44445],305:[0,.44444,0,0,.23889],567:[.19444,.44444,0,0,.26667],710:[0,.69444,0,0,.5],711:[0,.63194,0,0,.5],713:[0,.60889,0,0,.5],714:[0,.69444,0,0,.5],715:[0,.69444,0,0,.5],728:[0,.69444,0,0,.5],729:[0,.67937,0,0,.27778],730:[0,.69444,0,0,.66667],732:[0,.67659,0,0,.5],733:[0,.69444,0,0,.5],915:[0,.69444,0,0,.54167],916:[0,.69444,0,0,.83334],920:[0,.69444,0,0,.77778],923:[0,.69444,0,0,.61111],926:[0,.69444,0,0,.66667],928:[0,.69444,0,0,.70834],931:[0,.69444,0,0,.72222],933:[0,.69444,0,0,.77778],934:[0,.69444,0,0,.72222],936:[0,.69444,0,0,.77778],937:[0,.69444,0,0,.72222],8211:[0,.44444,.02778,0,.5],8212:[0,.44444,.02778,0,1],8216:[0,.69444,0,0,.27778],8217:[0,.69444,0,0,.27778],8220:[0,.69444,0,0,.5],8221:[0,.69444,0,0,.5]},"Script-Regular":{65:[0,.7,.22925,0,.80253],66:[0,.7,.04087,0,.90757],67:[0,.7,.1689,0,.66619],68:[0,.7,.09371,0,.77443],69:[0,.7,.18583,0,.56162],70:[0,.7,.13634,0,.89544],71:[0,.7,.17322,0,.60961],72:[0,.7,.29694,0,.96919],73:[0,.7,.19189,0,.80907],74:[.27778,.7,.19189,0,1.05159],75:[0,.7,.31259,0,.91364],76:[0,.7,.19189,0,.87373],77:[0,.7,.15981,0,1.08031],78:[0,.7,.3525,0,.9015],79:[0,.7,.08078,0,.73787],80:[0,.7,.08078,0,1.01262],81:[0,.7,.03305,0,.88282],82:[0,.7,.06259,0,.85],83:[0,.7,.19189,0,.86767],84:[0,.7,.29087,0,.74697],85:[0,.7,.25815,0,.79996],86:[0,.7,.27523,0,.62204],87:[0,.7,.27523,0,.80532],88:[0,.7,.26006,0,.94445],89:[0,.7,.2939,0,.70961],90:[0,.7,.24037,0,.8212]},"Size1-Regular":{40:[.35001,.85,0,0,.45834],41:[.35001,.85,0,0,.45834],47:[.35001,.85,0,0,.57778],91:[.35001,.85,0,0,.41667],92:[.35001,.85,0,0,.57778],93:[.35001,.85,0,0,.41667],123:[.35001,.85,0,0,.58334],125:[.35001,.85,0,0,.58334],710:[0,.72222,0,0,.55556],732:[0,.72222,0,0,.55556],770:[0,.72222,0,0,.55556],771:[0,.72222,0,0,.55556],8214:[-99e-5,.601,0,0,.77778],8593:[1e-5,.6,0,0,.66667],8595:[1e-5,.6,0,0,.66667],8657:[1e-5,.6,0,0,.77778],8659:[1e-5,.6,0,0,.77778],8719:[.25001,.75,0,0,.94445],8720:[.25001,.75,0,0,.94445],8721:[.25001,.75,0,0,1.05556],8730:[.35001,.85,0,0,1],8739:[-.00599,.606,0,0,.33333],8741:[-.00599,.606,0,0,.55556],8747:[.30612,.805,.19445,0,.47222],8748:[.306,.805,.19445,0,.47222],8749:[.306,.805,.19445,0,.47222],8750:[.30612,.805,.19445,0,.47222],8896:[.25001,.75,0,0,.83334],8897:[.25001,.75,0,0,.83334],8898:[.25001,.75,0,0,.83334],8899:[.25001,.75,0,0,.83334],8968:[.35001,.85,0,0,.47222],8969:[.35001,.85,0,0,.47222],8970:[.35001,.85,0,0,.47222],8971:[.35001,.85,0,0,.47222],9168:[-99e-5,.601,0,0,.66667],10216:[.35001,.85,0,0,.47222],10217:[.35001,.85,0,0,.47222],10752:[.25001,.75,0,0,1.11111],10753:[.25001,.75,0,0,1.11111],10754:[.25001,.75,0,0,1.11111],10756:[.25001,.75,0,0,.83334],10758:[.25001,.75,0,0,.83334]},"Size2-Regular":{40:[.65002,1.15,0,0,.59722],41:[.65002,1.15,0,0,.59722],47:[.65002,1.15,0,0,.81111],91:[.65002,1.15,0,0,.47222],92:[.65002,1.15,0,0,.81111],93:[.65002,1.15,0,0,.47222],123:[.65002,1.15,0,0,.66667],125:[.65002,1.15,0,0,.66667],710:[0,.75,0,0,1],732:[0,.75,0,0,1],770:[0,.75,0,0,1],771:[0,.75,0,0,1],8719:[.55001,1.05,0,0,1.27778],8720:[.55001,1.05,0,0,1.27778],8721:[.55001,1.05,0,0,1.44445],8730:[.65002,1.15,0,0,1],8747:[.86225,1.36,.44445,0,.55556],8748:[.862,1.36,.44445,0,.55556],8749:[.862,1.36,.44445,0,.55556],8750:[.86225,1.36,.44445,0,.55556],8896:[.55001,1.05,0,0,1.11111],8897:[.55001,1.05,0,0,1.11111],8898:[.55001,1.05,0,0,1.11111],8899:[.55001,1.05,0,0,1.11111],8968:[.65002,1.15,0,0,.52778],8969:[.65002,1.15,0,0,.52778],8970:[.65002,1.15,0,0,.52778],8971:[.65002,1.15,0,0,.52778],10216:[.65002,1.15,0,0,.61111],10217:[.65002,1.15,0,0,.61111],10752:[.55001,1.05,0,0,1.51112],10753:[.55001,1.05,0,0,1.51112],10754:[.55001,1.05,0,0,1.51112],10756:[.55001,1.05,0,0,1.11111],10758:[.55001,1.05,0,0,1.11111]},"Size3-Regular":{40:[.95003,1.45,0,0,.73611],41:[.95003,1.45,0,0,.73611],47:[.95003,1.45,0,0,1.04445],91:[.95003,1.45,0,0,.52778],92:[.95003,1.45,0,0,1.04445],93:[.95003,1.45,0,0,.52778],123:[.95003,1.45,0,0,.75],125:[.95003,1.45,0,0,.75],710:[0,.75,0,0,1.44445],732:[0,.75,0,0,1.44445],770:[0,.75,0,0,1.44445],771:[0,.75,0,0,1.44445],8730:[.95003,1.45,0,0,1],8968:[.95003,1.45,0,0,.58334],8969:[.95003,1.45,0,0,.58334],8970:[.95003,1.45,0,0,.58334],8971:[.95003,1.45,0,0,.58334],10216:[.95003,1.45,0,0,.75],10217:[.95003,1.45,0,0,.75]},"Size4-Regular":{40:[1.25003,1.75,0,0,.79167],41:[1.25003,1.75,0,0,.79167],47:[1.25003,1.75,0,0,1.27778],91:[1.25003,1.75,0,0,.58334],92:[1.25003,1.75,0,0,1.27778],93:[1.25003,1.75,0,0,.58334],123:[1.25003,1.75,0,0,.80556],125:[1.25003,1.75,0,0,.80556],710:[0,.825,0,0,1.8889],732:[0,.825,0,0,1.8889],770:[0,.825,0,0,1.8889],771:[0,.825,0,0,1.8889],8730:[1.25003,1.75,0,0,1],8968:[1.25003,1.75,0,0,.63889],8969:[1.25003,1.75,0,0,.63889],8970:[1.25003,1.75,0,0,.63889],8971:[1.25003,1.75,0,0,.63889],9115:[.64502,1.155,0,0,.875],9116:[1e-5,.6,0,0,.875],9117:[.64502,1.155,0,0,.875],9118:[.64502,1.155,0,0,.875],9119:[1e-5,.6,0,0,.875],9120:[.64502,1.155,0,0,.875],9121:[.64502,1.155,0,0,.66667],9122:[-99e-5,.601,0,0,.66667],9123:[.64502,1.155,0,0,.66667],9124:[.64502,1.155,0,0,.66667],9125:[-99e-5,.601,0,0,.66667],9126:[.64502,1.155,0,0,.66667],9127:[1e-5,.9,0,0,.88889],9128:[.65002,1.15,0,0,.88889],9129:[.90001,0,0,0,.88889],9130:[0,.3,0,0,.88889],9131:[1e-5,.9,0,0,.88889],9132:[.65002,1.15,0,0,.88889],9133:[.90001,0,0,0,.88889],9143:[.88502,.915,0,0,1.05556],10216:[1.25003,1.75,0,0,.80556],10217:[1.25003,1.75,0,0,.80556],57344:[-.00499,.605,0,0,1.05556],57345:[-.00499,.605,0,0,1.05556],57680:[0,.12,0,0,.45],57681:[0,.12,0,0,.45],57682:[0,.12,0,0,.45],57683:[0,.12,0,0,.45]},"Typewriter-Regular":{32:[0,0,0,0,.525],33:[0,.61111,0,0,.525],34:[0,.61111,0,0,.525],35:[0,.61111,0,0,.525],36:[.08333,.69444,0,0,.525],37:[.08333,.69444,0,0,.525],38:[0,.61111,0,0,.525],39:[0,.61111,0,0,.525],40:[.08333,.69444,0,0,.525],41:[.08333,.69444,0,0,.525],42:[0,.52083,0,0,.525],43:[-.08056,.53055,0,0,.525],44:[.13889,.125,0,0,.525],45:[-.08056,.53055,0,0,.525],46:[0,.125,0,0,.525],47:[.08333,.69444,0,0,.525],48:[0,.61111,0,0,.525],49:[0,.61111,0,0,.525],50:[0,.61111,0,0,.525],51:[0,.61111,0,0,.525],52:[0,.61111,0,0,.525],53:[0,.61111,0,0,.525],54:[0,.61111,0,0,.525],55:[0,.61111,0,0,.525],56:[0,.61111,0,0,.525],57:[0,.61111,0,0,.525],58:[0,.43056,0,0,.525],59:[.13889,.43056,0,0,.525],60:[-.05556,.55556,0,0,.525],61:[-.19549,.41562,0,0,.525],62:[-.05556,.55556,0,0,.525],63:[0,.61111,0,0,.525],64:[0,.61111,0,0,.525],65:[0,.61111,0,0,.525],66:[0,.61111,0,0,.525],67:[0,.61111,0,0,.525],68:[0,.61111,0,0,.525],69:[0,.61111,0,0,.525],70:[0,.61111,0,0,.525],71:[0,.61111,0,0,.525],72:[0,.61111,0,0,.525],73:[0,.61111,0,0,.525],74:[0,.61111,0,0,.525],75:[0,.61111,0,0,.525],76:[0,.61111,0,0,.525],77:[0,.61111,0,0,.525],78:[0,.61111,0,0,.525],79:[0,.61111,0,0,.525],80:[0,.61111,0,0,.525],81:[.13889,.61111,0,0,.525],82:[0,.61111,0,0,.525],83:[0,.61111,0,0,.525],84:[0,.61111,0,0,.525],85:[0,.61111,0,0,.525],86:[0,.61111,0,0,.525],87:[0,.61111,0,0,.525],88:[0,.61111,0,0,.525],89:[0,.61111,0,0,.525],90:[0,.61111,0,0,.525],91:[.08333,.69444,0,0,.525],92:[.08333,.69444,0,0,.525],93:[.08333,.69444,0,0,.525],94:[0,.61111,0,0,.525],95:[.09514,0,0,0,.525],96:[0,.61111,0,0,.525],97:[0,.43056,0,0,.525],98:[0,.61111,0,0,.525],99:[0,.43056,0,0,.525],100:[0,.61111,0,0,.525],101:[0,.43056,0,0,.525],102:[0,.61111,0,0,.525],103:[.22222,.43056,0,0,.525],104:[0,.61111,0,0,.525],105:[0,.61111,0,0,.525],106:[.22222,.61111,0,0,.525],107:[0,.61111,0,0,.525],108:[0,.61111,0,0,.525],109:[0,.43056,0,0,.525],110:[0,.43056,0,0,.525],111:[0,.43056,0,0,.525],112:[.22222,.43056,0,0,.525],113:[.22222,.43056,0,0,.525],114:[0,.43056,0,0,.525],115:[0,.43056,0,0,.525],116:[0,.55358,0,0,.525],117:[0,.43056,0,0,.525],118:[0,.43056,0,0,.525],119:[0,.43056,0,0,.525],120:[0,.43056,0,0,.525],121:[.22222,.43056,0,0,.525],122:[0,.43056,0,0,.525],123:[.08333,.69444,0,0,.525],124:[.08333,.69444,0,0,.525],125:[.08333,.69444,0,0,.525],126:[0,.61111,0,0,.525],127:[0,.61111,0,0,.525],160:[0,0,0,0,.525],176:[0,.61111,0,0,.525],184:[.19445,0,0,0,.525],305:[0,.43056,0,0,.525],567:[.22222,.43056,0,0,.525],711:[0,.56597,0,0,.525],713:[0,.56555,0,0,.525],714:[0,.61111,0,0,.525],715:[0,.61111,0,0,.525],728:[0,.61111,0,0,.525],730:[0,.61111,0,0,.525],770:[0,.61111,0,0,.525],771:[0,.61111,0,0,.525],776:[0,.61111,0,0,.525],915:[0,.61111,0,0,.525],916:[0,.61111,0,0,.525],920:[0,.61111,0,0,.525],923:[0,.61111,0,0,.525],926:[0,.61111,0,0,.525],928:[0,.61111,0,0,.525],931:[0,.61111,0,0,.525],933:[0,.61111,0,0,.525],934:[0,.61111,0,0,.525],936:[0,.61111,0,0,.525],937:[0,.61111,0,0,.525],8216:[0,.61111,0,0,.525],8217:[0,.61111,0,0,.525],8242:[0,.61111,0,0,.525],9251:[.11111,.21944,0,0,.525]}},U={slant:[.25,.25,.25],space:[0,0,0],stretch:[0,0,0],shrink:[0,0,0],xHeight:[.431,.431,.431],quad:[1,1.171,1.472],extraSpace:[0,0,0],num1:[.677,.732,.925],num2:[.394,.384,.387],num3:[.444,.471,.504],denom1:[.686,.752,1.025],denom2:[.345,.344,.532],sup1:[.413,.503,.504],sup2:[.363,.431,.404],sup3:[.289,.286,.294],sub1:[.15,.143,.2],sub2:[.247,.286,.4],supDrop:[.386,.353,.494],subDrop:[.05,.071,.1],delim1:[2.39,1.7,1.98],delim2:[1.01,1.157,1.42],axisHeight:[.25,.25,.25],defaultRuleThickness:[.04,.049,.049],bigOpSpacing1:[.111,.111,.111],bigOpSpacing2:[.166,.166,.166],bigOpSpacing3:[.2,.2,.2],bigOpSpacing4:[.6,.611,.611],bigOpSpacing5:[.1,.143,.143],sqrtRuleThickness:[.04,.04,.04],ptPerEm:[10,10,10],doubleRuleSep:[.2,.2,.2],arrayRuleWidth:[.04,.04,.04],fboxsep:[.3,.3,.3],fboxrule:[.04,.04,.04]},$={Å:"A",Ç:"C",Ð:"D",Þ:"o",å:"a",ç:"c",ð:"d",þ:"o",А:"A",Б:"B",В:"B",Г:"F",Д:"A",Е:"E",Ж:"K",З:"3",И:"N",Й:"N",К:"K",Л:"N",М:"M",Н:"H",О:"O",П:"N",Р:"P",С:"C",Т:"T",У:"y",Ф:"O",Х:"X",Ц:"U",Ч:"h",Ш:"W",Щ:"W",Ъ:"B",Ы:"X",Ь:"B",Э:"3",Ю:"X",Я:"R",а:"a",б:"b",в:"a",г:"r",д:"y",е:"e",ж:"m",з:"e",и:"n",й:"n",к:"n",л:"n",м:"m",н:"n",о:"o",п:"n",р:"p",с:"c",т:"o",у:"y",ф:"b",х:"x",ц:"n",ч:"n",ш:"w",щ:"w",ъ:"a",ы:"m",ь:"a",э:"e",ю:"m",я:"r"};function H(e,t,r){if(!F[t])throw new Error("Font metrics not found for font: "+t+".");var n=e.charCodeAt(0),i=F[t][n];if(!i&&e[0]in $&&(n=$[e[0]].charCodeAt(0),i=F[t][n]),i||"text"!==r||A(n)&&(i=F[t][77]),i)return{depth:i[0],height:i[1],italic:i[2],skew:i[3],width:i[4]}}var V={},G={bin:1,close:1,inner:1,open:1,punct:1,rel:1},W={"accent-token":1,mathord:1,"op-token":1,spacing:1,textord:1},X={math:{},text:{}},Y=X;function Z(e,t,r,n,i,o){X[e][i]={font:t,group:r,replace:n},o&&n&&(X[e][n]=X[e][i])}var J="math",K="text",Q="main",ee="ams",te="accent-token",re="bin",ne="close",ie="inner",oe="mathord",se="op-token",ae="open",le="punct",ce="rel",ue="spacing",he="textord";Z(J,Q,ce,"≡","\\equiv",!0),Z(J,Q,ce,"≺","\\prec",!0),Z(J,Q,ce,"≻","\\succ",!0),Z(J,Q,ce,"∼","\\sim",!0),Z(J,Q,ce,"⊥","\\perp"),Z(J,Q,ce,"⪯","\\preceq",!0),Z(J,Q,ce,"⪰","\\succeq",!0),Z(J,Q,ce,"≃","\\simeq",!0),Z(J,Q,ce,"∣","\\mid",!0),Z(J,Q,ce,"≪","\\ll",!0),Z(J,Q,ce,"≫","\\gg",!0),Z(J,Q,ce,"≍","\\asymp",!0),Z(J,Q,ce,"∥","\\parallel"),Z(J,Q,ce,"⋈","\\bowtie",!0),Z(J,Q,ce,"⌣","\\smile",!0),Z(J,Q,ce,"⊑","\\sqsubseteq",!0),Z(J,Q,ce,"⊒","\\sqsupseteq",!0),Z(J,Q,ce,"≐","\\doteq",!0),Z(J,Q,ce,"⌢","\\frown",!0),Z(J,Q,ce,"∋","\\ni",!0),Z(J,Q,ce,"∝","\\propto",!0),Z(J,Q,ce,"⊢","\\vdash",!0),Z(J,Q,ce,"⊣","\\dashv",!0),Z(J,Q,ce,"∋","\\owns"),Z(J,Q,le,".","\\ldotp"),Z(J,Q,le,"⋅","\\cdotp"),Z(J,Q,he,"#","\\#"),Z(K,Q,he,"#","\\#"),Z(J,Q,he,"&","\\&"),Z(K,Q,he,"&","\\&"),Z(J,Q,he,"ℵ","\\aleph",!0),Z(J,Q,he,"∀","\\forall",!0),Z(J,Q,he,"ℏ","\\hbar",!0),Z(J,Q,he,"∃","\\exists",!0),Z(J,Q,he,"∇","\\nabla",!0),Z(J,Q,he,"♭","\\flat",!0),Z(J,Q,he,"ℓ","\\ell",!0),Z(J,Q,he,"♮","\\natural",!0),Z(J,Q,he,"♣","\\clubsuit",!0),Z(J,Q,he,"℘","\\wp",!0),Z(J,Q,he,"♯","\\sharp",!0),Z(J,Q,he,"♢","\\diamondsuit",!0),Z(J,Q,he,"ℜ","\\Re",!0),Z(J,Q,he,"♡","\\heartsuit",!0),Z(J,Q,he,"ℑ","\\Im",!0),Z(J,Q,he,"♠","\\spadesuit",!0),Z(K,Q,he,"§","\\S",!0),Z(K,Q,he,"¶","\\P",!0),Z(J,Q,he,"†","\\dag"),Z(K,Q,he,"†","\\dag"),Z(K,Q,he,"†","\\textdagger"),Z(J,Q,he,"‡","\\ddag"),Z(K,Q,he,"‡","\\ddag"),Z(K,Q,he,"‡","\\textdaggerdbl"),Z(J,Q,ne,"⎱","\\rmoustache",!0),Z(J,Q,ae,"⎰","\\lmoustache",!0),Z(J,Q,ne,"⟯","\\rgroup",!0),Z(J,Q,ae,"⟮","\\lgroup",!0),Z(J,Q,re,"∓","\\mp",!0),Z(J,Q,re,"⊖","\\ominus",!0),Z(J,Q,re,"⊎","\\uplus",!0),Z(J,Q,re,"⊓","\\sqcap",!0),Z(J,Q,re,"∗","\\ast"),Z(J,Q,re,"⊔","\\sqcup",!0),Z(J,Q,re,"◯","\\bigcirc"),Z(J,Q,re,"∙","\\bullet"),Z(J,Q,re,"‡","\\ddagger"),Z(J,Q,re,"≀","\\wr",!0),Z(J,Q,re,"⨿","\\amalg"),Z(J,Q,re,"&","\\And"),Z(J,Q,ce,"⟵","\\longleftarrow",!0),Z(J,Q,ce,"⇐","\\Leftarrow",!0),Z(J,Q,ce,"⟸","\\Longleftarrow",!0),Z(J,Q,ce,"⟶","\\longrightarrow",!0),Z(J,Q,ce,"⇒","\\Rightarrow",!0),Z(J,Q,ce,"⟹","\\Longrightarrow",!0),Z(J,Q,ce,"↔","\\leftrightarrow",!0),Z(J,Q,ce,"⟷","\\longleftrightarrow",!0),Z(J,Q,ce,"⇔","\\Leftrightarrow",!0),Z(J,Q,ce,"⟺","\\Longleftrightarrow",!0),Z(J,Q,ce,"↦","\\mapsto",!0),Z(J,Q,ce,"⟼","\\longmapsto",!0),Z(J,Q,ce,"↗","\\nearrow",!0),Z(J,Q,ce,"↩","\\hookleftarrow",!0),Z(J,Q,ce,"↪","\\hookrightarrow",!0),Z(J,Q,ce,"↘","\\searrow",!0),Z(J,Q,ce,"↼","\\leftharpoonup",!0),Z(J,Q,ce,"⇀","\\rightharpoonup",!0),Z(J,Q,ce,"↙","\\swarrow",!0),Z(J,Q,ce,"↽","\\leftharpoondown",!0),Z(J,Q,ce,"⇁","\\rightharpoondown",!0),Z(J,Q,ce,"↖","\\nwarrow",!0),Z(J,Q,ce,"⇌","\\rightleftharpoons",!0),Z(J,ee,ce,"≮","\\nless",!0),Z(J,ee,ce,"","\\@nleqslant"),Z(J,ee,ce,"","\\@nleqq"),Z(J,ee,ce,"⪇","\\lneq",!0),Z(J,ee,ce,"≨","\\lneqq",!0),Z(J,ee,ce,"","\\@lvertneqq"),Z(J,ee,ce,"⋦","\\lnsim",!0),Z(J,ee,ce,"⪉","\\lnapprox",!0),Z(J,ee,ce,"⊀","\\nprec",!0),Z(J,ee,ce,"⋠","\\npreceq",!0),Z(J,ee,ce,"⋨","\\precnsim",!0),Z(J,ee,ce,"⪹","\\precnapprox",!0),Z(J,ee,ce,"≁","\\nsim",!0),Z(J,ee,ce,"","\\@nshortmid"),Z(J,ee,ce,"∤","\\nmid",!0),Z(J,ee,ce,"⊬","\\nvdash",!0),Z(J,ee,ce,"⊭","\\nvDash",!0),Z(J,ee,ce,"⋪","\\ntriangleleft"),Z(J,ee,ce,"⋬","\\ntrianglelefteq",!0),Z(J,ee,ce,"⊊","\\subsetneq",!0),Z(J,ee,ce,"","\\@varsubsetneq"),Z(J,ee,ce,"⫋","\\subsetneqq",!0),Z(J,ee,ce,"","\\@varsubsetneqq"),Z(J,ee,ce,"≯","\\ngtr",!0),Z(J,ee,ce,"","\\@ngeqslant"),Z(J,ee,ce,"","\\@ngeqq"),Z(J,ee,ce,"⪈","\\gneq",!0),Z(J,ee,ce,"≩","\\gneqq",!0),Z(J,ee,ce,"","\\@gvertneqq"),Z(J,ee,ce,"⋧","\\gnsim",!0),Z(J,ee,ce,"⪊","\\gnapprox",!0),Z(J,ee,ce,"⊁","\\nsucc",!0),Z(J,ee,ce,"⋡","\\nsucceq",!0),Z(J,ee,ce,"⋩","\\succnsim",!0),Z(J,ee,ce,"⪺","\\succnapprox",!0),Z(J,ee,ce,"≆","\\ncong",!0),Z(J,ee,ce,"","\\@nshortparallel"),Z(J,ee,ce,"∦","\\nparallel",!0),Z(J,ee,ce,"⊯","\\nVDash",!0),Z(J,ee,ce,"⋫","\\ntriangleright"),Z(J,ee,ce,"⋭","\\ntrianglerighteq",!0),Z(J,ee,ce,"","\\@nsupseteqq"),Z(J,ee,ce,"⊋","\\supsetneq",!0),Z(J,ee,ce,"","\\@varsupsetneq"),Z(J,ee,ce,"⫌","\\supsetneqq",!0),Z(J,ee,ce,"","\\@varsupsetneqq"),Z(J,ee,ce,"⊮","\\nVdash",!0),Z(J,ee,ce,"⪵","\\precneqq",!0),Z(J,ee,ce,"⪶","\\succneqq",!0),Z(J,ee,ce,"","\\@nsubseteqq"),Z(J,ee,re,"⊴","\\unlhd"),Z(J,ee,re,"⊵","\\unrhd"),Z(J,ee,ce,"↚","\\nleftarrow",!0),Z(J,ee,ce,"↛","\\nrightarrow",!0),Z(J,ee,ce,"⇍","\\nLeftarrow",!0),Z(J,ee,ce,"⇏","\\nRightarrow",!0),Z(J,ee,ce,"↮","\\nleftrightarrow",!0),Z(J,ee,ce,"⇎","\\nLeftrightarrow",!0),Z(J,ee,ce,"△","\\vartriangle"),Z(J,ee,he,"ℏ","\\hslash"),Z(J,ee,he,"▽","\\triangledown"),Z(J,ee,he,"◊","\\lozenge"),Z(J,ee,he,"Ⓢ","\\circledS"),Z(J,ee,he,"®","\\circledR"),Z(K,ee,he,"®","\\circledR"),Z(J,ee,he,"∡","\\measuredangle",!0),Z(J,ee,he,"∄","\\nexists"),Z(J,ee,he,"℧","\\mho"),Z(J,ee,he,"Ⅎ","\\Finv",!0),Z(J,ee,he,"⅁","\\Game",!0),Z(J,ee,he,"‵","\\backprime"),Z(J,ee,he,"▲","\\blacktriangle"),Z(J,ee,he,"▼","\\blacktriangledown"),Z(J,ee,he,"■","\\blacksquare"),Z(J,ee,he,"⧫","\\blacklozenge"),Z(J,ee,he,"★","\\bigstar"),Z(J,ee,he,"∢","\\sphericalangle",!0),Z(J,ee,he,"∁","\\complement",!0),Z(J,ee,he,"ð","\\eth",!0),Z(J,ee,he,"╱","\\diagup"),Z(J,ee,he,"╲","\\diagdown"),Z(J,ee,he,"□","\\square"),Z(J,ee,he,"□","\\Box"),Z(J,ee,he,"◊","\\Diamond"),Z(J,ee,he,"¥","\\yen",!0),Z(K,ee,he,"¥","\\yen",!0),Z(J,ee,he,"✓","\\checkmark",!0),Z(K,ee,he,"✓","\\checkmark"),Z(J,ee,he,"ℶ","\\beth",!0),Z(J,ee,he,"ℸ","\\daleth",!0),Z(J,ee,he,"ℷ","\\gimel",!0),Z(J,ee,he,"ϝ","\\digamma",!0),Z(J,ee,he,"ϰ","\\varkappa"),Z(J,ee,ae,"┌","\\ulcorner",!0),Z(J,ee,ne,"┐","\\urcorner",!0),Z(J,ee,ae,"└","\\llcorner",!0),Z(J,ee,ne,"┘","\\lrcorner",!0),Z(J,ee,ce,"≦","\\leqq",!0),Z(J,ee,ce,"⩽","\\leqslant",!0),Z(J,ee,ce,"⪕","\\eqslantless",!0),Z(J,ee,ce,"≲","\\lesssim",!0),Z(J,ee,ce,"⪅","\\lessapprox",!0),Z(J,ee,ce,"≊","\\approxeq",!0),Z(J,ee,re,"⋖","\\lessdot"),Z(J,ee,ce,"⋘","\\lll",!0),Z(J,ee,ce,"≶","\\lessgtr",!0),Z(J,ee,ce,"⋚","\\lesseqgtr",!0),Z(J,ee,ce,"⪋","\\lesseqqgtr",!0),Z(J,ee,ce,"≑","\\doteqdot"),Z(J,ee,ce,"≓","\\risingdotseq",!0),Z(J,ee,ce,"≒","\\fallingdotseq",!0),Z(J,ee,ce,"∽","\\backsim",!0),Z(J,ee,ce,"⋍","\\backsimeq",!0),Z(J,ee,ce,"⫅","\\subseteqq",!0),Z(J,ee,ce,"⋐","\\Subset",!0),Z(J,ee,ce,"⊏","\\sqsubset",!0),Z(J,ee,ce,"≼","\\preccurlyeq",!0),Z(J,ee,ce,"⋞","\\curlyeqprec",!0),Z(J,ee,ce,"≾","\\precsim",!0),Z(J,ee,ce,"⪷","\\precapprox",!0),Z(J,ee,ce,"⊲","\\vartriangleleft"),Z(J,ee,ce,"⊴","\\trianglelefteq"),Z(J,ee,ce,"⊨","\\vDash",!0),Z(J,ee,ce,"⊪","\\Vvdash",!0),Z(J,ee,ce,"⌣","\\smallsmile"),Z(J,ee,ce,"⌢","\\smallfrown"),Z(J,ee,ce,"≏","\\bumpeq",!0),Z(J,ee,ce,"≎","\\Bumpeq",!0),Z(J,ee,ce,"≧","\\geqq",!0),Z(J,ee,ce,"⩾","\\geqslant",!0),Z(J,ee,ce,"⪖","\\eqslantgtr",!0),Z(J,ee,ce,"≳","\\gtrsim",!0),Z(J,ee,ce,"⪆","\\gtrapprox",!0),Z(J,ee,re,"⋗","\\gtrdot"),Z(J,ee,ce,"⋙","\\ggg",!0),Z(J,ee,ce,"≷","\\gtrless",!0),Z(J,ee,ce,"⋛","\\gtreqless",!0),Z(J,ee,ce,"⪌","\\gtreqqless",!0),Z(J,ee,ce,"≖","\\eqcirc",!0),Z(J,ee,ce,"≗","\\circeq",!0),Z(J,ee,ce,"≜","\\triangleq",!0),Z(J,ee,ce,"∼","\\thicksim"),Z(J,ee,ce,"≈","\\thickapprox"),Z(J,ee,ce,"⫆","\\supseteqq",!0),Z(J,ee,ce,"⋑","\\Supset",!0),Z(J,ee,ce,"⊐","\\sqsupset",!0),Z(J,ee,ce,"≽","\\succcurlyeq",!0),Z(J,ee,ce,"⋟","\\curlyeqsucc",!0),Z(J,ee,ce,"≿","\\succsim",!0),Z(J,ee,ce,"⪸","\\succapprox",!0),Z(J,ee,ce,"⊳","\\vartriangleright"),Z(J,ee,ce,"⊵","\\trianglerighteq"),Z(J,ee,ce,"⊩","\\Vdash",!0),Z(J,ee,ce,"∣","\\shortmid"),Z(J,ee,ce,"∥","\\shortparallel"),Z(J,ee,ce,"≬","\\between",!0),Z(J,ee,ce,"⋔","\\pitchfork",!0),Z(J,ee,ce,"∝","\\varpropto"),Z(J,ee,ce,"◀","\\blacktriangleleft"),Z(J,ee,ce,"∴","\\therefore",!0),Z(J,ee,ce,"∍","\\backepsilon"),Z(J,ee,ce,"▶","\\blacktriangleright"),Z(J,ee,ce,"∵","\\because",!0),Z(J,ee,ce,"⋘","\\llless"),Z(J,ee,ce,"⋙","\\gggtr"),Z(J,ee,re,"⊲","\\lhd"),Z(J,ee,re,"⊳","\\rhd"),Z(J,ee,ce,"≂","\\eqsim",!0),Z(J,Q,ce,"⋈","\\Join"),Z(J,ee,ce,"≑","\\Doteq",!0),Z(J,ee,re,"∔","\\dotplus",!0),Z(J,ee,re,"∖","\\smallsetminus"),Z(J,ee,re,"⋒","\\Cap",!0),Z(J,ee,re,"⋓","\\Cup",!0),Z(J,ee,re,"⩞","\\doublebarwedge",!0),Z(J,ee,re,"⊟","\\boxminus",!0),Z(J,ee,re,"⊞","\\boxplus",!0),Z(J,ee,re,"⋇","\\divideontimes",!0),Z(J,ee,re,"⋉","\\ltimes",!0),Z(J,ee,re,"⋊","\\rtimes",!0),Z(J,ee,re,"⋋","\\leftthreetimes",!0),Z(J,ee,re,"⋌","\\rightthreetimes",!0),Z(J,ee,re,"⋏","\\curlywedge",!0),Z(J,ee,re,"⋎","\\curlyvee",!0),Z(J,ee,re,"⊝","\\circleddash",!0),Z(J,ee,re,"⊛","\\circledast",!0),Z(J,ee,re,"⋅","\\centerdot"),Z(J,ee,re,"⊺","\\intercal",!0),Z(J,ee,re,"⋒","\\doublecap"),Z(J,ee,re,"⋓","\\doublecup"),Z(J,ee,re,"⊠","\\boxtimes",!0),Z(J,ee,ce,"⇢","\\dashrightarrow",!0),Z(J,ee,ce,"⇠","\\dashleftarrow",!0),Z(J,ee,ce,"⇇","\\leftleftarrows",!0),Z(J,ee,ce,"⇆","\\leftrightarrows",!0),Z(J,ee,ce,"⇚","\\Lleftarrow",!0),Z(J,ee,ce,"↞","\\twoheadleftarrow",!0),Z(J,ee,ce,"↢","\\leftarrowtail",!0),Z(J,ee,ce,"↫","\\looparrowleft",!0),Z(J,ee,ce,"⇋","\\leftrightharpoons",!0),Z(J,ee,ce,"↶","\\curvearrowleft",!0),Z(J,ee,ce,"↺","\\circlearrowleft",!0),Z(J,ee,ce,"↰","\\Lsh",!0),Z(J,ee,ce,"⇈","\\upuparrows",!0),Z(J,ee,ce,"↿","\\upharpoonleft",!0),Z(J,ee,ce,"⇃","\\downharpoonleft",!0),Z(J,ee,ce,"⊸","\\multimap",!0),Z(J,ee,ce,"↭","\\leftrightsquigarrow",!0),Z(J,ee,ce,"⇉","\\rightrightarrows",!0),Z(J,ee,ce,"⇄","\\rightleftarrows",!0),Z(J,ee,ce,"↠","\\twoheadrightarrow",!0),Z(J,ee,ce,"↣","\\rightarrowtail",!0),Z(J,ee,ce,"↬","\\looparrowright",!0),Z(J,ee,ce,"↷","\\curvearrowright",!0),Z(J,ee,ce,"↻","\\circlearrowright",!0),Z(J,ee,ce,"↱","\\Rsh",!0),Z(J,ee,ce,"⇊","\\downdownarrows",!0),Z(J,ee,ce,"↾","\\upharpoonright",!0),Z(J,ee,ce,"⇂","\\downharpoonright",!0),Z(J,ee,ce,"⇝","\\rightsquigarrow",!0),Z(J,ee,ce,"⇝","\\leadsto"),Z(J,ee,ce,"⇛","\\Rrightarrow",!0),Z(J,ee,ce,"↾","\\restriction"),Z(J,Q,he,"‘","`"),Z(J,Q,he,"$","\\$"),Z(K,Q,he,"$","\\$"),Z(K,Q,he,"$","\\textdollar"),Z(J,Q,he,"%","\\%"),Z(K,Q,he,"%","\\%"),Z(J,Q,he,"_","\\_"),Z(K,Q,he,"_","\\_"),Z(K,Q,he,"_","\\textunderscore"),Z(J,Q,he,"∠","\\angle",!0),Z(J,Q,he,"∞","\\infty",!0),Z(J,Q,he,"′","\\prime"),Z(J,Q,he,"△","\\triangle"),Z(J,Q,he,"Γ","\\Gamma",!0),Z(J,Q,he,"Δ","\\Delta",!0),Z(J,Q,he,"Θ","\\Theta",!0),Z(J,Q,he,"Λ","\\Lambda",!0),Z(J,Q,he,"Ξ","\\Xi",!0),Z(J,Q,he,"Π","\\Pi",!0),Z(J,Q,he,"Σ","\\Sigma",!0),Z(J,Q,he,"Υ","\\Upsilon",!0),Z(J,Q,he,"Φ","\\Phi",!0),Z(J,Q,he,"Ψ","\\Psi",!0),Z(J,Q,he,"Ω","\\Omega",!0),Z(J,Q,he,"A","Α"),Z(J,Q,he,"B","Β"),Z(J,Q,he,"E","Ε"),Z(J,Q,he,"Z","Ζ"),Z(J,Q,he,"H","Η"),Z(J,Q,he,"I","Ι"),Z(J,Q,he,"K","Κ"),Z(J,Q,he,"M","Μ"),Z(J,Q,he,"N","Ν"),Z(J,Q,he,"O","Ο"),Z(J,Q,he,"P","Ρ"),Z(J,Q,he,"T","Τ"),Z(J,Q,he,"X","Χ"),Z(J,Q,he,"¬","\\neg",!0),Z(J,Q,he,"¬","\\lnot"),Z(J,Q,he,"⊤","\\top"),Z(J,Q,he,"⊥","\\bot"),Z(J,Q,he,"∅","\\emptyset"),Z(J,ee,he,"∅","\\varnothing"),Z(J,Q,oe,"α","\\alpha",!0),Z(J,Q,oe,"β","\\beta",!0),Z(J,Q,oe,"γ","\\gamma",!0),Z(J,Q,oe,"δ","\\delta",!0),Z(J,Q,oe,"ϵ","\\epsilon",!0),Z(J,Q,oe,"ζ","\\zeta",!0),Z(J,Q,oe,"η","\\eta",!0),Z(J,Q,oe,"θ","\\theta",!0),Z(J,Q,oe,"ι","\\iota",!0),Z(J,Q,oe,"κ","\\kappa",!0),Z(J,Q,oe,"λ","\\lambda",!0),Z(J,Q,oe,"μ","\\mu",!0),Z(J,Q,oe,"ν","\\nu",!0),Z(J,Q,oe,"ξ","\\xi",!0),Z(J,Q,oe,"ο","\\omicron",!0),Z(J,Q,oe,"π","\\pi",!0),Z(J,Q,oe,"ρ","\\rho",!0),Z(J,Q,oe,"σ","\\sigma",!0),Z(J,Q,oe,"τ","\\tau",!0),Z(J,Q,oe,"υ","\\upsilon",!0),Z(J,Q,oe,"ϕ","\\phi",!0),Z(J,Q,oe,"χ","\\chi",!0),Z(J,Q,oe,"ψ","\\psi",!0),Z(J,Q,oe,"ω","\\omega",!0),Z(J,Q,oe,"ε","\\varepsilon",!0),Z(J,Q,oe,"ϑ","\\vartheta",!0),Z(J,Q,oe,"ϖ","\\varpi",!0),Z(J,Q,oe,"ϱ","\\varrho",!0),Z(J,Q,oe,"ς","\\varsigma",!0),Z(J,Q,oe,"φ","\\varphi",!0),Z(J,Q,re,"∗","*"),Z(J,Q,re,"+","+"),Z(J,Q,re,"−","-"),Z(J,Q,re,"⋅","\\cdot",!0),Z(J,Q,re,"∘","\\circ"),Z(J,Q,re,"÷","\\div",!0),Z(J,Q,re,"±","\\pm",!0),Z(J,Q,re,"×","\\times",!0),Z(J,Q,re,"∩","\\cap",!0),Z(J,Q,re,"∪","\\cup",!0),Z(J,Q,re,"∖","\\setminus"),Z(J,Q,re,"∧","\\land"),Z(J,Q,re,"∨","\\lor"),Z(J,Q,re,"∧","\\wedge",!0),Z(J,Q,re,"∨","\\vee",!0),Z(J,Q,he,"√","\\surd"),Z(J,Q,ae,"(","("),Z(J,Q,ae,"[","["),Z(J,Q,ae,"⟨","\\langle",!0),Z(J,Q,ae,"∣","\\lvert"),Z(J,Q,ae,"∥","\\lVert"),Z(J,Q,ne,")",")"),Z(J,Q,ne,"]","]"),Z(J,Q,ne,"?","?"),Z(J,Q,ne,"!","!"),Z(J,Q,ne,"⟩","\\rangle",!0),Z(J,Q,ne,"∣","\\rvert"),Z(J,Q,ne,"∥","\\rVert"),Z(J,Q,ce,"=","="),Z(J,Q,ce,"<","<"),Z(J,Q,ce,">",">"),Z(J,Q,ce,":",":"),Z(J,Q,ce,"≈","\\approx",!0),Z(J,Q,ce,"≅","\\cong",!0),Z(J,Q,ce,"≥","\\ge"),Z(J,Q,ce,"≥","\\geq",!0),Z(J,Q,ce,"←","\\gets"),Z(J,Q,ce,">","\\gt"),Z(J,Q,ce,"∈","\\in",!0),Z(J,Q,ce,"","\\@not"),Z(J,Q,ce,"⊂","\\subset",!0),Z(J,Q,ce,"⊃","\\supset",!0),Z(J,Q,ce,"⊆","\\subseteq",!0),Z(J,Q,ce,"⊇","\\supseteq",!0),Z(J,ee,ce,"⊈","\\nsubseteq",!0),Z(J,ee,ce,"⊉","\\nsupseteq",!0),Z(J,Q,ce,"⊨","\\models"),Z(J,Q,ce,"←","\\leftarrow",!0),Z(J,Q,ce,"≤","\\le"),Z(J,Q,ce,"≤","\\leq",!0),Z(J,Q,ce,"<","\\lt"),Z(J,Q,ce,"→","\\rightarrow",!0),Z(J,Q,ce,"→","\\to"),Z(J,ee,ce,"≱","\\ngeq",!0),Z(J,ee,ce,"≰","\\nleq",!0),Z(J,Q,ue," ","\\ "),Z(J,Q,ue," ","~"),Z(J,Q,ue," ","\\space"),Z(J,Q,ue," ","\\nobreakspace"),Z(K,Q,ue," ","\\ "),Z(K,Q,ue," ","~"),Z(K,Q,ue," ","\\space"),Z(K,Q,ue," ","\\nobreakspace"),Z(J,Q,ue,null,"\\nobreak"),Z(J,Q,ue,null,"\\allowbreak"),Z(J,Q,le,",",","),Z(J,Q,le,";",";"),Z(J,ee,re,"⊼","\\barwedge",!0),Z(J,ee,re,"⊻","\\veebar",!0),Z(J,Q,re,"⊙","\\odot",!0),Z(J,Q,re,"⊕","\\oplus",!0),Z(J,Q,re,"⊗","\\otimes",!0),Z(J,Q,he,"∂","\\partial",!0),Z(J,Q,re,"⊘","\\oslash",!0),Z(J,ee,re,"⊚","\\circledcirc",!0),Z(J,ee,re,"⊡","\\boxdot",!0),Z(J,Q,re,"△","\\bigtriangleup"),Z(J,Q,re,"▽","\\bigtriangledown"),Z(J,Q,re,"†","\\dagger"),Z(J,Q,re,"⋄","\\diamond"),Z(J,Q,re,"⋆","\\star"),Z(J,Q,re,"◃","\\triangleleft"),Z(J,Q,re,"▹","\\triangleright"),Z(J,Q,ae,"{","\\{"),Z(K,Q,he,"{","\\{"),Z(K,Q,he,"{","\\textbraceleft"),Z(J,Q,ne,"}","\\}"),Z(K,Q,he,"}","\\}"),Z(K,Q,he,"}","\\textbraceright"),Z(J,Q,ae,"{","\\lbrace"),Z(J,Q,ne,"}","\\rbrace"),Z(J,Q,ae,"[","\\lbrack"),Z(K,Q,he,"[","\\lbrack"),Z(J,Q,ne,"]","\\rbrack"),Z(K,Q,he,"]","\\rbrack"),Z(J,Q,ae,"(","\\lparen"),Z(J,Q,ne,")","\\rparen"),Z(K,Q,he,"<","\\textless"),Z(K,Q,he,">","\\textgreater"),Z(J,Q,ae,"⌊","\\lfloor",!0),Z(J,Q,ne,"⌋","\\rfloor",!0),Z(J,Q,ae,"⌈","\\lceil",!0),Z(J,Q,ne,"⌉","\\rceil",!0),Z(J,Q,he,"\\","\\backslash"),Z(J,Q,he,"∣","|"),Z(J,Q,he,"∣","\\vert"),Z(K,Q,he,"|","\\textbar"),Z(J,Q,he,"∥","\\|"),Z(J,Q,he,"∥","\\Vert"),Z(K,Q,he,"∥","\\textbardbl"),Z(K,Q,he,"~","\\textasciitilde"),Z(K,Q,he,"\\","\\textbackslash"),Z(K,Q,he,"^","\\textasciicircum"),Z(J,Q,ce,"↑","\\uparrow",!0),Z(J,Q,ce,"⇑","\\Uparrow",!0),Z(J,Q,ce,"↓","\\downarrow",!0),Z(J,Q,ce,"⇓","\\Downarrow",!0),Z(J,Q,ce,"↕","\\updownarrow",!0),Z(J,Q,ce,"⇕","\\Updownarrow",!0),Z(J,Q,se,"∐","\\coprod"),Z(J,Q,se,"⋁","\\bigvee"),Z(J,Q,se,"⋀","\\bigwedge"),Z(J,Q,se,"⨄","\\biguplus"),Z(J,Q,se,"⋂","\\bigcap"),Z(J,Q,se,"⋃","\\bigcup"),Z(J,Q,se,"∫","\\int"),Z(J,Q,se,"∫","\\intop"),Z(J,Q,se,"∬","\\iint"),Z(J,Q,se,"∭","\\iiint"),Z(J,Q,se,"∏","\\prod"),Z(J,Q,se,"∑","\\sum"),Z(J,Q,se,"⨂","\\bigotimes"),Z(J,Q,se,"⨁","\\bigoplus"),Z(J,Q,se,"⨀","\\bigodot"),Z(J,Q,se,"∮","\\oint"),Z(J,Q,se,"∯","\\oiint"),Z(J,Q,se,"∰","\\oiiint"),Z(J,Q,se,"⨆","\\bigsqcup"),Z(J,Q,se,"∫","\\smallint"),Z(K,Q,ie,"…","\\textellipsis"),Z(J,Q,ie,"…","\\mathellipsis"),Z(K,Q,ie,"…","\\ldots",!0),Z(J,Q,ie,"…","\\ldots",!0),Z(J,Q,ie,"⋯","\\@cdots",!0),Z(J,Q,ie,"⋱","\\ddots",!0),Z(J,Q,he,"⋮","\\varvdots"),Z(J,Q,te,"ˊ","\\acute"),Z(J,Q,te,"ˋ","\\grave"),Z(J,Q,te,"¨","\\ddot"),Z(J,Q,te,"~","\\tilde"),Z(J,Q,te,"ˉ","\\bar"),Z(J,Q,te,"˘","\\breve"),Z(J,Q,te,"ˇ","\\check"),Z(J,Q,te,"^","\\hat"),Z(J,Q,te,"⃗","\\vec"),Z(J,Q,te,"˙","\\dot"),Z(J,Q,te,"˚","\\mathring"),Z(J,Q,oe,"ı","\\imath",!0),Z(J,Q,oe,"ȷ","\\jmath",!0),Z(K,Q,he,"ı","\\i",!0),Z(K,Q,he,"ȷ","\\j",!0),Z(K,Q,he,"ß","\\ss",!0),Z(K,Q,he,"æ","\\ae",!0),Z(K,Q,he,"æ","\\ae",!0),Z(K,Q,he,"œ","\\oe",!0),Z(K,Q,he,"ø","\\o",!0),Z(K,Q,he,"Æ","\\AE",!0),Z(K,Q,he,"Œ","\\OE",!0),Z(K,Q,he,"Ø","\\O",!0),Z(K,Q,te,"ˊ","\\'"),Z(K,Q,te,"ˋ","\\`"),Z(K,Q,te,"ˆ","\\^"),Z(K,Q,te,"˜","\\~"),Z(K,Q,te,"ˉ","\\="),Z(K,Q,te,"˘","\\u"),Z(K,Q,te,"˙","\\."),Z(K,Q,te,"˚","\\r"),Z(K,Q,te,"ˇ","\\v"),Z(K,Q,te,"¨",'\\"'),Z(K,Q,te,"˝","\\H"),Z(K,Q,te,"◯","\\textcircled");var de={"--":!0,"---":!0,"``":!0,"''":!0};Z(K,Q,he,"–","--"),Z(K,Q,he,"–","\\textendash"),Z(K,Q,he,"—","---"),Z(K,Q,he,"—","\\textemdash"),Z(K,Q,he,"‘","`"),Z(K,Q,he,"‘","\\textquoteleft"),Z(K,Q,he,"’","'"),Z(K,Q,he,"’","\\textquoteright"),Z(K,Q,he,"“","``"),Z(K,Q,he,"“","\\textquotedblleft"),Z(K,Q,he,"”","''"),Z(K,Q,he,"”","\\textquotedblright"),Z(J,Q,he,"°","\\degree",!0),Z(K,Q,he,"°","\\degree"),Z(K,Q,he,"°","\\textdegree",!0),Z(J,Q,oe,"£","\\pounds"),Z(J,Q,oe,"£","\\mathsterling",!0),Z(K,Q,oe,"£","\\pounds"),Z(K,Q,oe,"£","\\textsterling",!0),Z(J,ee,he,"✠","\\maltese"),Z(K,ee,he,"✠","\\maltese"),Z(K,Q,ue," ","\\ "),Z(K,Q,ue," "," "),Z(K,Q,ue," ","~");for(var pe='0123456789/@."',fe=0;fe<pe.length;fe++){var me=pe.charAt(fe);Z(J,Q,he,me,me)}for(var ge='0123456789!@*()-=+[]<>|";:?/.,',ve=0;ve<ge.length;ve++){var be=ge.charAt(ve);Z(K,Q,he,be,be)}for(var ye="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",we=0;we<ye.length;we++){var xe=ye.charAt(we);Z(J,Q,oe,xe,xe),Z(K,Q,he,xe,xe)}Z(J,ee,he,"C","ℂ"),Z(K,ee,he,"C","ℂ"),Z(J,ee,he,"H","ℍ"),Z(K,ee,he,"H","ℍ"),Z(J,ee,he,"N","ℕ"),Z(K,ee,he,"N","ℕ"),Z(J,ee,he,"P","ℙ"),Z(K,ee,he,"P","ℙ"),Z(J,ee,he,"Q","ℚ"),Z(K,ee,he,"Q","ℚ"),Z(J,ee,he,"R","ℝ"),Z(K,ee,he,"R","ℝ"),Z(J,ee,he,"Z","ℤ"),Z(K,ee,he,"Z","ℤ"),Z(J,Q,oe,"h","ℎ"),Z(K,Q,oe,"h","ℎ");for(var ke="",Se=0;Se<ye.length;Se++){var Ae=ye.charAt(Se);Z(J,Q,oe,Ae,ke=String.fromCharCode(55349,56320+Se)),Z(K,Q,he,Ae,ke),Z(J,Q,oe,Ae,ke=String.fromCharCode(55349,56372+Se)),Z(K,Q,he,Ae,ke),Z(J,Q,oe,Ae,ke=String.fromCharCode(55349,56424+Se)),Z(K,Q,he,Ae,ke),Z(J,Q,oe,Ae,ke=String.fromCharCode(55349,56580+Se)),Z(K,Q,he,Ae,ke),Z(J,Q,oe,Ae,ke=String.fromCharCode(55349,56736+Se)),Z(K,Q,he,Ae,ke),Z(J,Q,oe,Ae,ke=String.fromCharCode(55349,56788+Se)),Z(K,Q,he,Ae,ke),Z(J,Q,oe,Ae,ke=String.fromCharCode(55349,56840+Se)),Z(K,Q,he,Ae,ke),Z(J,Q,oe,Ae,ke=String.fromCharCode(55349,56944+Se)),Z(K,Q,he,Ae,ke),Se<26&&(Z(J,Q,oe,Ae,ke=String.fromCharCode(55349,56632+Se)),Z(K,Q,he,Ae,ke),Z(J,Q,oe,Ae,ke=String.fromCharCode(55349,56476+Se)),Z(K,Q,he,Ae,ke))}Z(J,Q,oe,"k",ke=String.fromCharCode(55349,56668)),Z(K,Q,he,"k",ke);for(var Me=0;Me<10;Me++){var Ce=Me.toString();Z(J,Q,oe,Ce,ke=String.fromCharCode(55349,57294+Me)),Z(K,Q,he,Ce,ke),Z(J,Q,oe,Ce,ke=String.fromCharCode(55349,57314+Me)),Z(K,Q,he,Ce,ke),Z(J,Q,oe,Ce,ke=String.fromCharCode(55349,57324+Me)),Z(K,Q,he,Ce,ke),Z(J,Q,oe,Ce,ke=String.fromCharCode(55349,57334+Me)),Z(K,Q,he,Ce,ke)}for(var Ne="ÇÐÞçþ",Ee=0;Ee<Ne.length;Ee++){var Te=Ne.charAt(Ee);Z(J,Q,oe,Te,Te),Z(K,Q,he,Te,Te)}Z(K,Q,he,"ð","ð"),Z(K,Q,he,"–","–"),Z(K,Q,he,"—","—"),Z(K,Q,he,"‘","‘"),Z(K,Q,he,"’","’"),Z(K,Q,he,"“","“"),Z(K,Q,he,"”","”");var qe=[["mathbf","textbf","Main-Bold"],["mathbf","textbf","Main-Bold"],["mathdefault","textit","Math-Italic"],["mathdefault","textit","Math-Italic"],["boldsymbol","boldsymbol","Main-BoldItalic"],["boldsymbol","boldsymbol","Main-BoldItalic"],["mathscr","textscr","Script-Regular"],["","",""],["","",""],["","",""],["mathfrak","textfrak","Fraktur-Regular"],["mathfrak","textfrak","Fraktur-Regular"],["mathbb","textbb","AMS-Regular"],["mathbb","textbb","AMS-Regular"],["","",""],["","",""],["mathsf","textsf","SansSerif-Regular"],["mathsf","textsf","SansSerif-Regular"],["mathboldsf","textboldsf","SansSerif-Bold"],["mathboldsf","textboldsf","SansSerif-Bold"],["mathitsf","textitsf","SansSerif-Italic"],["mathitsf","textitsf","SansSerif-Italic"],["","",""],["","",""],["mathtt","texttt","Typewriter-Regular"],["mathtt","texttt","Typewriter-Regular"]],ze=[["mathbf","textbf","Main-Bold"],["","",""],["mathsf","textsf","SansSerif-Regular"],["mathboldsf","textboldsf","SansSerif-Bold"],["mathtt","texttt","Typewriter-Regular"]],Oe=[[1,1,1],[2,1,1],[3,1,1],[4,2,1],[5,2,1],[6,3,1],[7,4,2],[8,6,3],[9,7,6],[10,8,7],[11,10,9]],_e=[.5,.6,.7,.8,.9,1,1.2,1.44,1.728,2.074,2.488],Ie=function(e,t){return t.size<2?e:Oe[e-1][t.size-1]},Le=function(){function e(t){this.style=void 0,this.color=void 0,this.size=void 0,this.textSize=void 0,this.phantom=void 0,this.font=void 0,this.fontFamily=void 0,this.fontWeight=void 0,this.fontShape=void 0,this.sizeMultiplier=void 0,this.maxSize=void 0,this.minRuleThickness=void 0,this._fontMetrics=void 0,this.style=t.style,this.color=t.color,this.size=t.size||e.BASESIZE,this.textSize=t.textSize||this.size,this.phantom=!!t.phantom,this.font=t.font||"",this.fontFamily=t.fontFamily||"",this.fontWeight=t.fontWeight||"",this.fontShape=t.fontShape||"",this.sizeMultiplier=_e[this.size-1],this.maxSize=t.maxSize,this.minRuleThickness=t.minRuleThickness,this._fontMetrics=void 0}var t=e.prototype;return t.extend=function(t){var r={style:this.style,size:this.size,textSize:this.textSize,color:this.color,phantom:this.phantom,font:this.font,fontFamily:this.fontFamily,fontWeight:this.fontWeight,fontShape:this.fontShape,maxSize:this.maxSize,minRuleThickness:this.minRuleThickness};for(var n in t)t.hasOwnProperty(n)&&(r[n]=t[n]);return new e(r)},t.havingStyle=function(e){return this.style===e?this:this.extend({style:e,size:Ie(this.textSize,e)})},t.havingCrampedStyle=function(){return this.havingStyle(this.style.cramp())},t.havingSize=function(e){return this.size===e&&this.textSize===e?this:this.extend({style:this.style.text(),size:e,textSize:e,sizeMultiplier:_e[e-1]})},t.havingBaseStyle=function(t){t=t||this.style.text();var r=Ie(e.BASESIZE,t);return this.size===r&&this.textSize===e.BASESIZE&&this.style===t?this:this.extend({style:t,size:r})},t.havingBaseSizing=function(){var e;switch(this.style.id){case 4:case 5:e=3;break;case 6:case 7:e=1;break;default:e=6}return this.extend({style:this.style.text(),size:e})},t.withColor=function(e){return this.extend({color:e})},t.withPhantom=function(){return this.extend({phantom:!0})},t.withFont=function(e){return this.extend({font:e})},t.withTextFontFamily=function(e){return this.extend({fontFamily:e,font:""})},t.withTextFontWeight=function(e){return this.extend({fontWeight:e,font:""})},t.withTextFontShape=function(e){return this.extend({fontShape:e,font:""})},t.sizingClasses=function(e){return e.size!==this.size?["sizing","reset-size"+e.size,"size"+this.size]:[]},t.baseSizingClasses=function(){return this.size!==e.BASESIZE?["sizing","reset-size"+this.size,"size"+e.BASESIZE]:[]},t.fontMetrics=function(){return this._fontMetrics||(this._fontMetrics=function(e){var t;if(!V[t=e>=5?0:e>=3?1:2]){var r=V[t]={cssEmPerMu:U.quad[t]/18};for(var n in U)U.hasOwnProperty(n)&&(r[n]=U[n][t])}return V[t]}(this.size)),this._fontMetrics},t.getColor=function(){return this.phantom?"transparent":this.color},e}();Le.BASESIZE=6;var je=Le,De={pt:1,mm:7227/2540,cm:7227/254,in:72.27,bp:1.00375,pc:12,dd:1238/1157,cc:14856/1157,nd:685/642,nc:1370/107,sp:1/65536,px:1.00375},Be={ex:!0,em:!0,mu:!0},Re=function(e){return"string"!=typeof e&&(e=e.unit),e in De||e in Be||"ex"===e},Pe=function(e,t){var r;if(e.unit in De)r=De[e.unit]/t.fontMetrics().ptPerEm/t.sizeMultiplier;else if("mu"===e.unit)r=t.fontMetrics().cssEmPerMu;else{var n;if(n=t.style.isTight()?t.havingStyle(t.style.text()):t,"ex"===e.unit)r=n.fontMetrics().xHeight;else{if("em"!==e.unit)throw new s("Invalid unit: '"+e.unit+"'");r=n.fontMetrics().quad}n!==t&&(r*=n.sizeMultiplier/t.sizeMultiplier)}return Math.min(e.number*r,t.maxSize)},Fe=["\\imath","ı","\\jmath","ȷ","\\pounds","\\mathsterling","\\textsterling","£"],Ue=function(e,t,r){return Y[r][e]&&Y[r][e].replace&&(e=Y[r][e].replace),{value:e,metrics:H(e,t,r)}},$e=function(e,t,r,n,i){var o,s=Ue(e,t,r),a=s.metrics;if(e=s.value,a){var l=a.italic;("text"===r||n&&"mathit"===n.font)&&(l=0),o=new j(e,a.height,a.depth,l,a.skew,a.width,i)}else"undefined"!=typeof console&&console.warn("No character metrics for '"+e+"' in style '"+t+"' and mode '"+r+"'"),o=new j(e,0,0,0,0,0,i);if(n){o.maxFontSize=n.sizeMultiplier,n.style.isTight()&&o.classes.push("mtight");var c=n.getColor();c&&(o.style.color=c)}return o},He=function(e,t){if(E(e.classes)!==E(t.classes)||e.skew!==t.skew||e.maxFontSize!==t.maxFontSize)return!1;for(var r in e.style)if(e.style.hasOwnProperty(r)&&e.style[r]!==t.style[r])return!1;for(var n in t.style)if(t.style.hasOwnProperty(n)&&e.style[n]!==t.style[n])return!1;return!0},Ve=function(e){for(var t=0,r=0,n=0,i=0;i<e.children.length;i++){var o=e.children[i];o.height>t&&(t=o.height),o.depth>r&&(r=o.depth),o.maxFontSize>n&&(n=o.maxFontSize)}e.height=t,e.depth=r,e.maxFontSize=n},Ge=function(e,t,r,n){var i=new O(e,t,r,n);return Ve(i),i},We=function(e,t,r,n){return new O(e,t,r,n)},Xe=function(e){var t=new N(e);return Ve(t),t},Ye=function(e,t,r){var n="";switch(e){case"amsrm":n="AMS";break;case"textrm":n="Main";break;case"textsf":n="SansSerif";break;case"texttt":n="Typewriter";break;default:n=e}return n+"-"+("textbf"===t&&"textit"===r?"BoldItalic":"textbf"===t?"Bold":"textit"===t?"Italic":"Regular")},Ze={mathbf:{variant:"bold",fontName:"Main-Bold"},mathrm:{variant:"normal",fontName:"Main-Regular"},textit:{variant:"italic",fontName:"Main-Italic"},mathit:{variant:"italic",fontName:"Main-Italic"},mathbb:{variant:"double-struck",fontName:"AMS-Regular"},mathcal:{variant:"script",fontName:"Caligraphic-Regular"},mathfrak:{variant:"fraktur",fontName:"Fraktur-Regular"},mathscr:{variant:"script",fontName:"Script-Regular"},mathsf:{variant:"sans-serif",fontName:"SansSerif-Regular"},mathtt:{variant:"monospace",fontName:"Typewriter-Regular"}},Je={vec:["vec",.471,.714],oiintSize1:["oiintSize1",.957,.499],oiintSize2:["oiintSize2",1.472,.659],oiiintSize1:["oiiintSize1",1.304,.499],oiiintSize2:["oiiintSize2",1.98,.659]},Ke={fontMap:Ze,makeSymbol:$e,mathsym:function(e,t,r,n){return void 0===n&&(n=[]),"boldsymbol"===r.font&&Ue(e,"Main-Bold",t).metrics?$e(e,"Main-Bold",t,r,n.concat(["mathbf"])):"\\"===e||"main"===Y[t][e].font?$e(e,"Main-Regular",t,r,n):$e(e,"AMS-Regular",t,r,n.concat(["amsrm"]))},makeSpan:Ge,makeSvgSpan:We,makeLineSpan:function(e,t,r){var n=Ge([e],[],t);return n.height=Math.max(r||t.fontMetrics().defaultRuleThickness,t.minRuleThickness),n.style.borderBottomWidth=n.height+"em",n.maxFontSize=1,n},makeAnchor:function(e,t,r,n){var i=new _(e,t,r,n);return Ve(i),i},makeFragment:Xe,wrapFragment:function(e,t){return e instanceof N?Ge([],[e],t):e},makeVList:function(e,t){for(var r=function(e){if("individualShift"===e.positionType){for(var t=e.children,r=[t[0]],n=-t[0].shift-t[0].elem.depth,i=n,o=1;o<t.length;o++){var s=-t[o].shift-i-t[o].elem.depth,a=s-(t[o-1].elem.height+t[o-1].elem.depth);i+=s,r.push({type:"kern",size:a}),r.push(t[o])}return{children:r,depth:n}}var l;if("top"===e.positionType){for(var c=e.positionData,u=0;u<e.children.length;u++){var h=e.children[u];c-="kern"===h.type?h.size:h.elem.height+h.elem.depth}l=c}else if("bottom"===e.positionType)l=-e.positionData;else{var d=e.children[0];if("elem"!==d.type)throw new Error('First child must have type "elem".');if("shift"===e.positionType)l=-d.elem.depth-e.positionData;else{if("firstBaseline"!==e.positionType)throw new Error("Invalid positionType "+e.positionType+".");l=-d.elem.depth}}return{children:e.children,depth:l}}(e),n=r.children,i=r.depth,o=0,s=0;s<n.length;s++){var a=n[s];if("elem"===a.type){var l=a.elem;o=Math.max(o,l.maxFontSize,l.height)}}o+=2;var c=Ge(["pstrut"],[]);c.style.height=o+"em";for(var u=[],h=i,d=i,p=i,f=0;f<n.length;f++){var m=n[f];if("kern"===m.type)p+=m.size;else{var g=m.elem,v=m.wrapperClasses||[],b=m.wrapperStyle||{},y=Ge(v,[c,g],void 0,b);y.style.top=-o-p-g.depth+"em",m.marginLeft&&(y.style.marginLeft=m.marginLeft),m.marginRight&&(y.style.marginRight=m.marginRight),u.push(y),p+=g.height+g.depth}h=Math.min(h,p),d=Math.max(d,p)}var w,x=Ge(["vlist"],u);if(x.style.height=d+"em",h<0){var k=Ge([],[]),S=Ge(["vlist"],[k]);S.style.height=-h+"em";var A=Ge(["vlist-s"],[new j("​")]);w=[Ge(["vlist-r"],[x,A]),Ge(["vlist-r"],[S])]}else w=[Ge(["vlist-r"],[x])];var M=Ge(["vlist-t"],w);return 2===w.length&&M.classes.push("vlist-t2"),M.height=d,M.depth=-h,M},makeOrd:function(e,t,r){var n,i=e.mode,o=e.text,a=["mord"],l="math"===i||"text"===i&&t.font,c=l?t.font:t.fontFamily;if(55349===o.charCodeAt(0)){var u=function(e,t){var r=1024*(e.charCodeAt(0)-55296)+(e.charCodeAt(1)-56320)+65536,n="math"===t?0:1;if(119808<=r&&r<120484){var i=Math.floor((r-119808)/26);return[qe[i][2],qe[i][n]]}if(120782<=r&&r<=120831){var o=Math.floor((r-120782)/10);return[ze[o][2],ze[o][n]]}if(120485===r||120486===r)return[qe[0][2],qe[0][n]];if(120486<r&&r<120782)return["",""];throw new s("Unsupported character: "+e)}(o,i),d=u[0],p=u[1];return $e(o,d,i,t,a.concat(p))}if(c){var f,m;if("boldsymbol"===c||"mathnormal"===c){var g="boldsymbol"===c?function(e,t,r,n){return Ue(e,"Math-BoldItalic",t).metrics?{fontName:"Math-BoldItalic",fontClass:"boldsymbol"}:{fontName:"Main-Bold",fontClass:"mathbf"}}(o,i):(n=o,h.contains(Fe,n)?{fontName:"Main-Italic",fontClass:"mathit"}:/[0-9]/.test(n.charAt(0))?{fontName:"Caligraphic-Regular",fontClass:"mathcal"}:{fontName:"Math-Italic",fontClass:"mathdefault"});f=g.fontName,m=[g.fontClass]}else h.contains(Fe,o)?(f="Main-Italic",m=["mathit"]):l?(f=Ze[c].fontName,m=[c]):(f=Ye(c,t.fontWeight,t.fontShape),m=[c,t.fontWeight,t.fontShape]);if(Ue(o,f,i).metrics)return $e(o,f,i,t,a.concat(m));if(de.hasOwnProperty(o)&&"Typewriter"===f.substr(0,10)){for(var v=[],b=0;b<o.length;b++)v.push($e(o[b],f,i,t,a.concat(m)));return Xe(v)}}if("mathord"===r){var y=function(e,t,r,n){return/[0-9]/.test(e.charAt(0))||h.contains(Fe,e)?{fontName:"Main-Italic",fontClass:"mathit"}:{fontName:"Math-Italic",fontClass:"mathdefault"}}(o);return $e(o,y.fontName,i,t,a.concat([y.fontClass]))}if("textord"===r){var w=Y[i][o]&&Y[i][o].font;if("ams"===w){var x=Ye("amsrm",t.fontWeight,t.fontShape);return $e(o,x,i,t,a.concat("amsrm",t.fontWeight,t.fontShape))}if("main"!==w&&w){var k=Ye(w,t.fontWeight,t.fontShape);return $e(o,k,i,t,a.concat(k,t.fontWeight,t.fontShape))}var S=Ye("textrm",t.fontWeight,t.fontShape);return $e(o,S,i,t,a.concat(t.fontWeight,t.fontShape))}throw new Error("unexpected type: "+r+" in makeOrd")},makeGlue:function(e,t){var r=Ge(["mspace"],[],t),n=Pe(e,t);return r.style.marginRight=n+"em",r},staticSvg:function(e,t){var r=Je[e],n=r[0],i=r[1],o=r[2],s=new B(n),a=new D([s],{width:i+"em",height:o+"em",style:"width:"+i+"em",viewBox:"0 0 "+1e3*i+" "+1e3*o,preserveAspectRatio:"xMinYMin"}),l=We(["overlay"],[a],t);return l.height=o,l.style.height=o+"em",l.style.width=i+"em",l},svgData:Je,tryCombineChars:function(e){for(var t=0;t<e.length-1;t++){var r=e[t],n=e[t+1];r instanceof j&&n instanceof j&&He(r,n)&&(r.text+=n.text,r.height=Math.max(r.height,n.height),r.depth=Math.max(r.depth,n.depth),r.italic=n.italic,e.splice(t+1,1),t--)}return e}};function Qe(e,t){var r=et(e,t);if(!r)throw new Error("Expected node of type "+t+", but got "+(e?"node of type "+e.type:String(e)));return r}function et(e,t){return e&&e.type===t?e:null}function tt(e,t){var r=function(e,t){return e&&"atom"===e.type&&e.family===t?e:null}(e,t);if(!r)throw new Error('Expected node of type "atom" and family "'+t+'", but got '+(e?"atom"===e.type?"atom of family "+e.family:"node of type "+e.type:String(e)));return r}function rt(e){var t=nt(e);if(!t)throw new Error("Expected node of symbol group type, but got "+(e?"node of type "+e.type:String(e)));return t}function nt(e){return e&&("atom"===e.type||W.hasOwnProperty(e.type))?e:null}var it={number:3,unit:"mu"},ot={number:4,unit:"mu"},st={number:5,unit:"mu"},at={mord:{mop:it,mbin:ot,mrel:st,minner:it},mop:{mord:it,mop:it,mrel:st,minner:it},mbin:{mord:ot,mop:ot,mopen:ot,minner:ot},mrel:{mord:st,mop:st,mopen:st,minner:st},mopen:{},mclose:{mop:it,mbin:ot,mrel:st,minner:it},mpunct:{mord:it,mop:it,mrel:st,mopen:it,mclose:it,mpunct:it,minner:it},minner:{mord:it,mop:it,mbin:ot,mrel:st,mopen:it,mpunct:it,minner:it}},lt={mord:{mop:it},mop:{mord:it,mop:it},mbin:{},mrel:{},mopen:{},mclose:{mop:it},mpunct:{},minner:{mop:it}},ct={},ut={},ht={};function dt(e){for(var t=e.type,r=e.names,n=e.props,i=e.handler,o=e.htmlBuilder,s=e.mathmlBuilder,a={type:t,numArgs:n.numArgs,argTypes:n.argTypes,greediness:void 0===n.greediness?1:n.greediness,allowedInText:!!n.allowedInText,allowedInMath:void 0===n.allowedInMath||n.allowedInMath,numOptionalArgs:n.numOptionalArgs||0,infix:!!n.infix,handler:i},l=0;l<r.length;++l)ct[r[l]]=a;t&&(o&&(ut[t]=o),s&&(ht[t]=s))}function pt(e){dt({type:e.type,names:[],props:{numArgs:0},handler:function(){throw new Error("Should never be called.")},htmlBuilder:e.htmlBuilder,mathmlBuilder:e.mathmlBuilder})}var ft=function(e){var t=et(e,"ordgroup");return t?t.body:[e]},mt=Ke.makeSpan,gt=["leftmost","mbin","mopen","mrel","mop","mpunct"],vt=["rightmost","mrel","mclose","mpunct"],bt={display:x.DISPLAY,text:x.TEXT,script:x.SCRIPT,scriptscript:x.SCRIPTSCRIPT},yt={mord:"mord",mop:"mop",mbin:"mbin",mrel:"mrel",mopen:"mopen",mclose:"mclose",mpunct:"mpunct",minner:"minner"},wt=function(e,t,r,n){void 0===n&&(n=[null,null]);for(var i=[],o=0;o<e.length;o++){var s=Ct(e[o],t);if(s instanceof N){var a=s.children;i.push.apply(i,a)}else i.push(s)}if(!r)return i;var l=t;if(1===e.length){var c=et(e[0],"sizing")||et(e[0],"styling");c&&("sizing"===c.type?l=t.havingSize(c.size):"styling"===c.type&&(l=t.havingStyle(bt[c.style])))}var u=mt([n[0]||"leftmost"],[],t),d=mt([n[1]||"rightmost"],[],t);return xt(i,(function(e,t){var r=t.classes[0],n=e.classes[0];"mbin"===r&&h.contains(vt,n)?t.classes[0]="mord":"mbin"===n&&h.contains(gt,r)&&(e.classes[0]="mord")}),{node:u},d),xt(i,(function(e,t){var r=At(t),n=At(e),i=r&&n?e.hasClass("mtight")?lt[r][n]:at[r][n]:null;if(i)return Ke.makeGlue(i,l)}),{node:u},d),i},xt=function e(t,r,n,i){i&&t.push(i);for(var o=0;o<t.length;o++){var s=t[o],a=kt(s);if(a)e(a.children,r,n);else if("mspace"!==s.classes[0]){var l=r(s,n.node);l&&(n.insertAfter?n.insertAfter(l):(t.unshift(l),o++)),n.node=s,n.insertAfter=function(e){return function(r){t.splice(e+1,0,r),o++}}(o)}}i&&t.pop()},kt=function(e){return e instanceof N||e instanceof _?e:null},St=function e(t,r){var n=kt(t);if(n){var i=n.children;if(i.length){if("right"===r)return e(i[i.length-1],"right");if("left"===r)return e(i[0],"left")}}return t},At=function(e,t){return e?(t&&(e=St(e,t)),yt[e.classes[0]]||null):null},Mt=function(e,t){var r=["nulldelimiter"].concat(e.baseSizingClasses());return mt(t.concat(r))},Ct=function(e,t,r){if(!e)return mt();if(ut[e.type]){var n=ut[e.type](e,t);if(r&&t.size!==r.size){n=mt(t.sizingClasses(r),[n],t);var i=t.sizeMultiplier/r.sizeMultiplier;n.height*=i,n.depth*=i}return n}throw new s("Got group of unknown type: '"+e.type+"'")};function Nt(e,t){var r=mt(["base"],e,t),n=mt(["strut"]);return n.style.height=r.height+r.depth+"em",n.style.verticalAlign=-r.depth+"em",r.children.unshift(n),r}function Et(e,t){var r=null;1===e.length&&"tag"===e[0].type&&(r=e[0].tag,e=e[0].body);for(var n,i=wt(e,t,!0),o=[],s=[],a=0;a<i.length;a++)if(s.push(i[a]),i[a].hasClass("mbin")||i[a].hasClass("mrel")||i[a].hasClass("allowbreak")){for(var l=!1;a<i.length-1&&i[a+1].hasClass("mspace")&&!i[a+1].hasClass("newline");)a++,s.push(i[a]),i[a].hasClass("nobreak")&&(l=!0);l||(o.push(Nt(s,t)),s=[])}else i[a].hasClass("newline")&&(s.pop(),s.length>0&&(o.push(Nt(s,t)),s=[]),o.push(i[a]));s.length>0&&o.push(Nt(s,t)),r&&((n=Nt(wt(r,t,!0))).classes=["tag"],o.push(n));var c=mt(["katex-html"],o);if(c.setAttribute("aria-hidden","true"),n){var u=n.children[0];u.style.height=c.height+c.depth+"em",u.style.verticalAlign=-c.depth+"em"}return c}function Tt(e){return new N(e)}var qt=function(){function e(e,t){this.type=void 0,this.attributes=void 0,this.children=void 0,this.type=e,this.attributes={},this.children=t||[]}var t=e.prototype;return t.setAttribute=function(e,t){this.attributes[e]=t},t.getAttribute=function(e){return this.attributes[e]},t.toNode=function(){var e=document.createElementNS("http://www.w3.org/1998/Math/MathML",this.type);for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&e.setAttribute(t,this.attributes[t]);for(var r=0;r<this.children.length;r++)e.appendChild(this.children[r].toNode());return e},t.toMarkup=function(){var e="<"+this.type;for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&(e+=" "+t+'="',e+=h.escape(this.attributes[t]),e+='"');e+=">";for(var r=0;r<this.children.length;r++)e+=this.children[r].toMarkup();return e+="</"+this.type+">"},t.toText=function(){return this.children.map((function(e){return e.toText()})).join("")},e}(),zt=function(){function e(e){this.text=void 0,this.text=e}var t=e.prototype;return t.toNode=function(){return document.createTextNode(this.text)},t.toMarkup=function(){return h.escape(this.toText())},t.toText=function(){return this.text},e}(),Ot={MathNode:qt,TextNode:zt,SpaceNode:function(){function e(e){this.width=void 0,this.character=void 0,this.width=e,this.character=e>=.05555&&e<=.05556?" ":e>=.1666&&e<=.1667?" ":e>=.2222&&e<=.2223?" ":e>=.2777&&e<=.2778?"  ":e>=-.05556&&e<=-.05555?" ⁣":e>=-.1667&&e<=-.1666?" ⁣":e>=-.2223&&e<=-.2222?" ⁣":e>=-.2778&&e<=-.2777?" ⁣":null}var t=e.prototype;return t.toNode=function(){if(this.character)return document.createTextNode(this.character);var e=document.createElementNS("http://www.w3.org/1998/Math/MathML","mspace");return e.setAttribute("width",this.width+"em"),e},t.toMarkup=function(){return this.character?"<mtext>"+this.character+"</mtext>":'<mspace width="'+this.width+'em"/>'},t.toText=function(){return this.character?this.character:" "},e}(),newDocumentFragment:Tt},_t=function(e,t,r){return!Y[t][e]||!Y[t][e].replace||55349===e.charCodeAt(0)||de.hasOwnProperty(e)&&r&&(r.fontFamily&&"tt"===r.fontFamily.substr(4,2)||r.font&&"tt"===r.font.substr(4,2))||(e=Y[t][e].replace),new Ot.TextNode(e)},It=function(e){return 1===e.length?e[0]:new Ot.MathNode("mrow",e)},Lt=function(e,t){if("texttt"===t.fontFamily)return"monospace";if("textsf"===t.fontFamily)return"textit"===t.fontShape&&"textbf"===t.fontWeight?"sans-serif-bold-italic":"textit"===t.fontShape?"sans-serif-italic":"textbf"===t.fontWeight?"bold-sans-serif":"sans-serif";if("textit"===t.fontShape&&"textbf"===t.fontWeight)return"bold-italic";if("textit"===t.fontShape)return"italic";if("textbf"===t.fontWeight)return"bold";var r=t.font;if(!r||"mathnormal"===r)return null;var n=e.mode;if("mathit"===r)return"italic";if("boldsymbol"===r)return"bold-italic";if("mathbf"===r)return"bold";if("mathbb"===r)return"double-struck";if("mathfrak"===r)return"fraktur";if("mathscr"===r||"mathcal"===r)return"script";if("mathsf"===r)return"sans-serif";if("mathtt"===r)return"monospace";var i=e.text;return h.contains(["\\imath","\\jmath"],i)?null:(Y[n][i]&&Y[n][i].replace&&(i=Y[n][i].replace),H(i,Ke.fontMap[r].fontName,n)?Ke.fontMap[r].variant:null)},jt=function(e,t,r){if(1===e.length){var n=Bt(e[0],t);return r&&n instanceof qt&&"mo"===n.type&&(n.setAttribute("lspace","0em"),n.setAttribute("rspace","0em")),[n]}for(var i,o=[],s=0;s<e.length;s++){var a=Bt(e[s],t);if(a instanceof qt&&i instanceof qt){if("mtext"===a.type&&"mtext"===i.type&&a.getAttribute("mathvariant")===i.getAttribute("mathvariant")){var l;(l=i.children).push.apply(l,a.children);continue}if("mn"===a.type&&"mn"===i.type){var c;(c=i.children).push.apply(c,a.children);continue}if("mi"===a.type&&1===a.children.length&&"mn"===i.type){var u=a.children[0];if(u instanceof zt&&"."===u.text){var h;(h=i.children).push.apply(h,a.children);continue}}else if("mi"===i.type&&1===i.children.length){var d=i.children[0];if(d instanceof zt&&"̸"===d.text&&("mo"===a.type||"mi"===a.type||"mn"===a.type)){var p=a.children[0];p instanceof zt&&p.text.length>0&&(p.text=p.text.slice(0,1)+"̸"+p.text.slice(1),o.pop())}}}o.push(a),i=a}return o},Dt=function(e,t,r){return It(jt(e,t,r))},Bt=function(e,t){if(!e)return new Ot.MathNode("mrow");if(ht[e.type])return ht[e.type](e,t);throw new s("Got group of unknown type: '"+e.type+"'")};function Rt(e,t,r,n){var i,o=jt(e,r);i=1===o.length&&o[0]instanceof qt&&h.contains(["mrow","mtable"],o[0].type)?o[0]:new Ot.MathNode("mrow",o);var s=new Ot.MathNode("annotation",[new Ot.TextNode(t)]);s.setAttribute("encoding","application/x-tex");var a=new Ot.MathNode("semantics",[i,s]),l=new Ot.MathNode("math",[a]);l.setAttribute("xmlns","http://www.w3.org/1998/Math/MathML");var c=n?"katex":"katex-mathml";return Ke.makeSpan([c],[l])}var Pt=function(e){return new je({style:e.displayMode?x.DISPLAY:x.TEXT,maxSize:e.maxSize,minRuleThickness:e.minRuleThickness})},Ft=function(e,t){if(t.displayMode){var r=["katex-display"];t.leqno&&r.push("leqno"),t.fleqn&&r.push("fleqn"),e=Ke.makeSpan(r,[e])}return e},Ut=function(e,t,r){var n,i=Pt(r);if("mathml"===r.output)return Rt(e,t,i,!0);if("html"===r.output){var o=Et(e,i);n=Ke.makeSpan(["katex"],[o])}else{var s=Rt(e,t,i,!1),a=Et(e,i);n=Ke.makeSpan(["katex"],[s,a])}return Ft(n,r)},$t={widehat:"^",widecheck:"ˇ",widetilde:"~",utilde:"~",overleftarrow:"←",underleftarrow:"←",xleftarrow:"←",overrightarrow:"→",underrightarrow:"→",xrightarrow:"→",underbrace:"⏟",overbrace:"⏞",overgroup:"⏠",undergroup:"⏡",overleftrightarrow:"↔",underleftrightarrow:"↔",xleftrightarrow:"↔",Overrightarrow:"⇒",xRightarrow:"⇒",overleftharpoon:"↼",xleftharpoonup:"↼",overrightharpoon:"⇀",xrightharpoonup:"⇀",xLeftarrow:"⇐",xLeftrightarrow:"⇔",xhookleftarrow:"↩",xhookrightarrow:"↪",xmapsto:"↦",xrightharpoondown:"⇁",xleftharpoondown:"↽",xrightleftharpoons:"⇌",xleftrightharpoons:"⇋",xtwoheadleftarrow:"↞",xtwoheadrightarrow:"↠",xlongequal:"=",xtofrom:"⇄",xrightleftarrows:"⇄",xrightequilibrium:"⇌",xleftequilibrium:"⇋"},Ht={overrightarrow:[["rightarrow"],.888,522,"xMaxYMin"],overleftarrow:[["leftarrow"],.888,522,"xMinYMin"],underrightarrow:[["rightarrow"],.888,522,"xMaxYMin"],underleftarrow:[["leftarrow"],.888,522,"xMinYMin"],xrightarrow:[["rightarrow"],1.469,522,"xMaxYMin"],xleftarrow:[["leftarrow"],1.469,522,"xMinYMin"],Overrightarrow:[["doublerightarrow"],.888,560,"xMaxYMin"],xRightarrow:[["doublerightarrow"],1.526,560,"xMaxYMin"],xLeftarrow:[["doubleleftarrow"],1.526,560,"xMinYMin"],overleftharpoon:[["leftharpoon"],.888,522,"xMinYMin"],xleftharpoonup:[["leftharpoon"],.888,522,"xMinYMin"],xleftharpoondown:[["leftharpoondown"],.888,522,"xMinYMin"],overrightharpoon:[["rightharpoon"],.888,522,"xMaxYMin"],xrightharpoonup:[["rightharpoon"],.888,522,"xMaxYMin"],xrightharpoondown:[["rightharpoondown"],.888,522,"xMaxYMin"],xlongequal:[["longequal"],.888,334,"xMinYMin"],xtwoheadleftarrow:[["twoheadleftarrow"],.888,334,"xMinYMin"],xtwoheadrightarrow:[["twoheadrightarrow"],.888,334,"xMaxYMin"],overleftrightarrow:[["leftarrow","rightarrow"],.888,522],overbrace:[["leftbrace","midbrace","rightbrace"],1.6,548],underbrace:[["leftbraceunder","midbraceunder","rightbraceunder"],1.6,548],underleftrightarrow:[["leftarrow","rightarrow"],.888,522],xleftrightarrow:[["leftarrow","rightarrow"],1.75,522],xLeftrightarrow:[["doubleleftarrow","doublerightarrow"],1.75,560],xrightleftharpoons:[["leftharpoondownplus","rightharpoonplus"],1.75,716],xleftrightharpoons:[["leftharpoonplus","rightharpoondownplus"],1.75,716],xhookleftarrow:[["leftarrow","righthook"],1.08,522],xhookrightarrow:[["lefthook","rightarrow"],1.08,522],overlinesegment:[["leftlinesegment","rightlinesegment"],.888,522],underlinesegment:[["leftlinesegment","rightlinesegment"],.888,522],overgroup:[["leftgroup","rightgroup"],.888,342],undergroup:[["leftgroupunder","rightgroupunder"],.888,342],xmapsto:[["leftmapsto","rightarrow"],1.5,522],xtofrom:[["leftToFrom","rightToFrom"],1.75,528],xrightleftarrows:[["baraboveleftarrow","rightarrowabovebar"],1.75,901],xrightequilibrium:[["baraboveshortleftharpoon","rightharpoonaboveshortbar"],1.75,716],xleftequilibrium:[["shortbaraboveleftharpoon","shortrightharpoonabovebar"],1.75,716]},Vt=function(e,t,r,n){var i,o=e.height+e.depth+2*r;if(/fbox|color/.test(t)){if(i=Ke.makeSpan(["stretchy",t],[],n),"fbox"===t){var s=n.color&&n.getColor();s&&(i.style.borderColor=s)}}else{var a=[];/^[bx]cancel$/.test(t)&&a.push(new R({x1:"0",y1:"0",x2:"100%",y2:"100%","stroke-width":"0.046em"})),/^x?cancel$/.test(t)&&a.push(new R({x1:"0",y1:"100%",x2:"100%",y2:"0","stroke-width":"0.046em"}));var l=new D(a,{width:"100%",height:o+"em"});i=Ke.makeSvgSpan([],[l],n)}return i.height=o,i.style.height=o+"em",i},Gt=function(e){var t=new Ot.MathNode("mo",[new Ot.TextNode($t[e.substr(1)])]);return t.setAttribute("stretchy","true"),t},Wt=function(e,t){var r=function(){var r=4e5,n=e.label.substr(1);if(h.contains(["widehat","widecheck","widetilde","utilde"],n)){var i,o,s,a="ordgroup"===(f=e.base).type?f.body.length:1;if(a>5)"widehat"===n||"widecheck"===n?(i=420,r=2364,s=.42,o=n+"4"):(i=312,r=2340,s=.34,o="tilde4");else{var l=[1,1,2,2,3,3][a];"widehat"===n||"widecheck"===n?(r=[0,1062,2364,2364,2364][l],i=[0,239,300,360,420][l],s=[0,.24,.3,.3,.36,.42][l],o=n+l):(r=[0,600,1033,2339,2340][l],i=[0,260,286,306,312][l],s=[0,.26,.286,.3,.306,.34][l],o="tilde"+l)}var c=new B(o),u=new D([c],{width:"100%",height:s+"em",viewBox:"0 0 "+r+" "+i,preserveAspectRatio:"none"});return{span:Ke.makeSvgSpan([],[u],t),minWidth:0,height:s}}var d,p,f,m=[],g=Ht[n],v=g[0],b=g[1],y=g[2],w=y/1e3,x=v.length;if(1===x)d=["hide-tail"],p=[g[3]];else if(2===x)d=["halfarrow-left","halfarrow-right"],p=["xMinYMin","xMaxYMin"];else{if(3!==x)throw new Error("Correct katexImagesData or update code here to support\n                    "+x+" children.");d=["brace-left","brace-center","brace-right"],p=["xMinYMin","xMidYMin","xMaxYMin"]}for(var k=0;k<x;k++){var S=new B(v[k]),A=new D([S],{width:"400em",height:w+"em",viewBox:"0 0 "+r+" "+y,preserveAspectRatio:p[k]+" slice"}),M=Ke.makeSvgSpan([d[k]],[A],t);if(1===x)return{span:M,minWidth:b,height:w};M.style.height=w+"em",m.push(M)}return{span:Ke.makeSpan(["stretchy"],m,t),minWidth:b,height:w}}(),n=r.span,i=r.minWidth,o=r.height;return n.height=o,n.style.height=o+"em",i>0&&(n.style.minWidth=i+"em"),n},Xt=function(e,t){var r,n,i,o=et(e,"supsub");o?(r=(n=Qe(o.base,"accent")).base,o.base=r,i=function(e){if(e instanceof O)return e;throw new Error("Expected span<HtmlDomNode> but got "+String(e)+".")}(Ct(o,t)),o.base=n):r=(n=Qe(e,"accent")).base;var s=Ct(r,t.havingCrampedStyle()),a=0;if(n.isShifty&&h.isCharacterBox(r)){var l=h.getBaseElem(r);a=P(Ct(l,t.havingCrampedStyle())).skew}var c,u=Math.min(s.height,t.fontMetrics().xHeight);if(n.isStretchy)c=Wt(n,t),c=Ke.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:s},{type:"elem",elem:c,wrapperClasses:["svg-align"],wrapperStyle:a>0?{width:"calc(100% - "+2*a+"em)",marginLeft:2*a+"em"}:void 0}]},t);else{var d,p;"\\vec"===n.label?(d=Ke.staticSvg("vec",t),p=Ke.svgData.vec[1]):((d=P(d=Ke.makeOrd({mode:n.mode,text:n.label},t,"textord"))).italic=0,p=d.width),c=Ke.makeSpan(["accent-body"],[d]);var f="\\textcircled"===n.label;f&&(c.classes.push("accent-full"),u=s.height);var m=a;f||(m-=p/2),c.style.left=m+"em","\\textcircled"===n.label&&(c.style.top=".2em"),c=Ke.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:s},{type:"kern",size:-u},{type:"elem",elem:c}]},t)}var g=Ke.makeSpan(["mord","accent"],[c],t);return i?(i.children[0]=g,i.height=Math.max(g.height,i.height),i.classes[0]="mord",i):g},Yt=function(e,t){var r=e.isStretchy?Gt(e.label):new Ot.MathNode("mo",[_t(e.label,e.mode)]),n=new Ot.MathNode("mover",[Bt(e.base,t),r]);return n.setAttribute("accent","true"),n},Zt=new RegExp(["\\acute","\\grave","\\ddot","\\tilde","\\bar","\\breve","\\check","\\hat","\\vec","\\dot","\\mathring"].map((function(e){return"\\"+e})).join("|"));dt({type:"accent",names:["\\acute","\\grave","\\ddot","\\tilde","\\bar","\\breve","\\check","\\hat","\\vec","\\dot","\\mathring","\\widecheck","\\widehat","\\widetilde","\\overrightarrow","\\overleftarrow","\\Overrightarrow","\\overleftrightarrow","\\overgroup","\\overlinesegment","\\overleftharpoon","\\overrightharpoon"],props:{numArgs:1},handler:function(e,t){var r=t[0],n=!Zt.test(e.funcName),i=!n||"\\widehat"===e.funcName||"\\widetilde"===e.funcName||"\\widecheck"===e.funcName;return{type:"accent",mode:e.parser.mode,label:e.funcName,isStretchy:n,isShifty:i,base:r}},htmlBuilder:Xt,mathmlBuilder:Yt}),dt({type:"accent",names:["\\'","\\`","\\^","\\~","\\=","\\u","\\.",'\\"',"\\r","\\H","\\v","\\textcircled"],props:{numArgs:1,allowedInText:!0,allowedInMath:!1},handler:function(e,t){var r=t[0];return{type:"accent",mode:e.parser.mode,label:e.funcName,isStretchy:!1,isShifty:!0,base:r}},htmlBuilder:Xt,mathmlBuilder:Yt}),dt({type:"accentUnder",names:["\\underleftarrow","\\underrightarrow","\\underleftrightarrow","\\undergroup","\\underlinesegment","\\utilde"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName,i=t[0];return{type:"accentUnder",mode:r.mode,label:n,base:i}},htmlBuilder:function(e,t){var r=Ct(e.base,t),n=Wt(e,t),i="\\utilde"===e.label?.12:0,o=Ke.makeVList({positionType:"bottom",positionData:n.height+i,children:[{type:"elem",elem:n,wrapperClasses:["svg-align"]},{type:"kern",size:i},{type:"elem",elem:r}]},t);return Ke.makeSpan(["mord","accentunder"],[o],t)},mathmlBuilder:function(e,t){var r=Gt(e.label),n=new Ot.MathNode("munder",[Bt(e.base,t),r]);return n.setAttribute("accentunder","true"),n}});var Jt=function(e){var t=new Ot.MathNode("mpadded",e?[e]:[]);return t.setAttribute("width","+0.6em"),t.setAttribute("lspace","0.3em"),t};dt({type:"xArrow",names:["\\xleftarrow","\\xrightarrow","\\xLeftarrow","\\xRightarrow","\\xleftrightarrow","\\xLeftrightarrow","\\xhookleftarrow","\\xhookrightarrow","\\xmapsto","\\xrightharpoondown","\\xrightharpoonup","\\xleftharpoondown","\\xleftharpoonup","\\xrightleftharpoons","\\xleftrightharpoons","\\xlongequal","\\xtwoheadrightarrow","\\xtwoheadleftarrow","\\xtofrom","\\xrightleftarrows","\\xrightequilibrium","\\xleftequilibrium"],props:{numArgs:1,numOptionalArgs:1},handler:function(e,t,r){var n=e.parser,i=e.funcName;return{type:"xArrow",mode:n.mode,label:i,body:t[0],below:r[0]}},htmlBuilder:function(e,t){var r,n=t.style,i=t.havingStyle(n.sup()),o=Ke.wrapFragment(Ct(e.body,i,t),t);o.classes.push("x-arrow-pad"),e.below&&(i=t.havingStyle(n.sub()),(r=Ke.wrapFragment(Ct(e.below,i,t),t)).classes.push("x-arrow-pad"));var s,a=Wt(e,t),l=-t.fontMetrics().axisHeight+.5*a.height,c=-t.fontMetrics().axisHeight-.5*a.height-.111;if((o.depth>.25||"\\xleftequilibrium"===e.label)&&(c-=o.depth),r){var u=-t.fontMetrics().axisHeight+r.height+.5*a.height+.111;s=Ke.makeVList({positionType:"individualShift",children:[{type:"elem",elem:o,shift:c},{type:"elem",elem:a,shift:l},{type:"elem",elem:r,shift:u}]},t)}else s=Ke.makeVList({positionType:"individualShift",children:[{type:"elem",elem:o,shift:c},{type:"elem",elem:a,shift:l}]},t);return s.children[0].children[0].children[1].classes.push("svg-align"),Ke.makeSpan(["mrel","x-arrow"],[s],t)},mathmlBuilder:function(e,t){var r,n=Gt(e.label);if(e.body){var i=Jt(Bt(e.body,t));if(e.below){var o=Jt(Bt(e.below,t));r=new Ot.MathNode("munderover",[n,o,i])}else r=new Ot.MathNode("mover",[n,i])}else if(e.below){var s=Jt(Bt(e.below,t));r=new Ot.MathNode("munder",[n,s])}else r=Jt(),r=new Ot.MathNode("mover",[n,r]);return r}}),dt({type:"textord",names:["\\@char"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){for(var r=e.parser,n=Qe(t[0],"ordgroup").body,i="",o=0;o<n.length;o++)i+=Qe(n[o],"textord").text;var a=parseInt(i);if(isNaN(a))throw new s("\\@char has non-numeric argument "+i);return{type:"textord",mode:r.mode,text:String.fromCharCode(a)}}});var Kt=function(e,t){var r=wt(e.body,t.withColor(e.color),!1);return Ke.makeFragment(r)},Qt=function(e,t){var r=jt(e.body,t.withColor(e.color)),n=new Ot.MathNode("mstyle",r);return n.setAttribute("mathcolor",e.color),n};dt({type:"color",names:["\\textcolor"],props:{numArgs:2,allowedInText:!0,greediness:3,argTypes:["color","original"]},handler:function(e,t){var r=e.parser,n=Qe(t[0],"color-token").color,i=t[1];return{type:"color",mode:r.mode,color:n,body:ft(i)}},htmlBuilder:Kt,mathmlBuilder:Qt}),dt({type:"color",names:["\\color"],props:{numArgs:1,allowedInText:!0,greediness:3,argTypes:["color"]},handler:function(e,t){var r=e.parser,n=e.breakOnTokenText,i=Qe(t[0],"color-token").color;r.gullet.macros.set("\\current@color",i);var o=r.parseExpression(!0,n);return{type:"color",mode:r.mode,color:i,body:o}},htmlBuilder:Kt,mathmlBuilder:Qt}),dt({type:"cr",names:["\\cr","\\newline"],props:{numArgs:0,numOptionalArgs:1,argTypes:["size"],allowedInText:!0},handler:function(e,t,r){var n=e.parser,i=e.funcName,o=r[0],s="\\cr"===i,a=!1;return s||(a=!n.settings.displayMode||!n.settings.useStrictBehavior("newLineInDisplayMode","In LaTeX, \\\\ or \\newline does nothing in display mode")),{type:"cr",mode:n.mode,newLine:a,newRow:s,size:o&&Qe(o,"size").value}},htmlBuilder:function(e,t){if(e.newRow)throw new s("\\cr valid only within a tabular/array environment");var r=Ke.makeSpan(["mspace"],[],t);return e.newLine&&(r.classes.push("newline"),e.size&&(r.style.marginTop=Pe(e.size,t)+"em")),r},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mspace");return e.newLine&&(r.setAttribute("linebreak","newline"),e.size&&r.setAttribute("height",Pe(e.size,t)+"em")),r}});var er=function(e,t,r){var n=H(Y.math[e]&&Y.math[e].replace||e,t,r);if(!n)throw new Error("Unsupported symbol "+e+" and font size "+t+".");return n},tr=function(e,t,r,n){var i=r.havingBaseStyle(t),o=Ke.makeSpan(n.concat(i.sizingClasses(r)),[e],r),s=i.sizeMultiplier/r.sizeMultiplier;return o.height*=s,o.depth*=s,o.maxFontSize=i.sizeMultiplier,o},rr=function(e,t,r){var n=t.havingBaseStyle(r),i=(1-t.sizeMultiplier/n.sizeMultiplier)*t.fontMetrics().axisHeight;e.classes.push("delimcenter"),e.style.top=i+"em",e.height-=i,e.depth+=i},nr=function(e,t,r,n,i,o){var s=function(e,t,r,n){return Ke.makeSymbol(e,"Size"+t+"-Regular",r,n)}(e,t,i,n),a=tr(Ke.makeSpan(["delimsizing","size"+t],[s],n),x.TEXT,n,o);return r&&rr(a,n,x.TEXT),a},ir=function(e,t,r){var n;return n="Size1-Regular"===t?"delim-size1":"delim-size4",{type:"elem",elem:Ke.makeSpan(["delimsizinginner",n],[Ke.makeSpan([],[Ke.makeSymbol(e,t,r)])])}},or={type:"kern",size:-.005},sr=function(e,t,r,n,i,o){var s,a,l,c;s=l=c=e,a=null;var u="Size1-Regular";"\\uparrow"===e?l=c="⏐":"\\Uparrow"===e?l=c="‖":"\\downarrow"===e?s=l="⏐":"\\Downarrow"===e?s=l="‖":"\\updownarrow"===e?(s="\\uparrow",l="⏐",c="\\downarrow"):"\\Updownarrow"===e?(s="\\Uparrow",l="‖",c="\\Downarrow"):"["===e||"\\lbrack"===e?(s="⎡",l="⎢",c="⎣",u="Size4-Regular"):"]"===e||"\\rbrack"===e?(s="⎤",l="⎥",c="⎦",u="Size4-Regular"):"\\lfloor"===e||"⌊"===e?(l=s="⎢",c="⎣",u="Size4-Regular"):"\\lceil"===e||"⌈"===e?(s="⎡",l=c="⎢",u="Size4-Regular"):"\\rfloor"===e||"⌋"===e?(l=s="⎥",c="⎦",u="Size4-Regular"):"\\rceil"===e||"⌉"===e?(s="⎤",l=c="⎥",u="Size4-Regular"):"("===e||"\\lparen"===e?(s="⎛",l="⎜",c="⎝",u="Size4-Regular"):")"===e||"\\rparen"===e?(s="⎞",l="⎟",c="⎠",u="Size4-Regular"):"\\{"===e||"\\lbrace"===e?(s="⎧",a="⎨",c="⎩",l="⎪",u="Size4-Regular"):"\\}"===e||"\\rbrace"===e?(s="⎫",a="⎬",c="⎭",l="⎪",u="Size4-Regular"):"\\lgroup"===e||"⟮"===e?(s="⎧",c="⎩",l="⎪",u="Size4-Regular"):"\\rgroup"===e||"⟯"===e?(s="⎫",c="⎭",l="⎪",u="Size4-Regular"):"\\lmoustache"===e||"⎰"===e?(s="⎧",c="⎭",l="⎪",u="Size4-Regular"):"\\rmoustache"!==e&&"⎱"!==e||(s="⎫",c="⎩",l="⎪",u="Size4-Regular");var h=er(s,u,i),d=h.height+h.depth,p=er(l,u,i),f=p.height+p.depth,m=er(c,u,i),g=m.height+m.depth,v=0,b=1;if(null!==a){var y=er(a,u,i);v=y.height+y.depth,b=2}var w=d+g+v,k=Math.max(0,Math.ceil((t-w)/(b*f))),S=w+k*b*f,A=n.fontMetrics().axisHeight;r&&(A*=n.sizeMultiplier);var M=S/2-A,C=.005*(k+1)-f,N=[];if(N.push(ir(c,u,i)),null===a)for(var E=0;E<k;E++)N.push(or),N.push(ir(l,u,i));else{for(var T=0;T<k;T++)N.push(or),N.push(ir(l,u,i));N.push({type:"kern",size:C}),N.push(ir(l,u,i)),N.push(or),N.push(ir(a,u,i));for(var q=0;q<k;q++)N.push(or),N.push(ir(l,u,i))}N.push({type:"kern",size:C}),N.push(ir(l,u,i)),N.push(or),N.push(ir(s,u,i));var z=n.havingBaseStyle(x.TEXT),O=Ke.makeVList({positionType:"bottom",positionData:M,children:N},z);return tr(Ke.makeSpan(["delimsizing","mult"],[O],z),x.TEXT,n,o)},ar=.08,lr=function(e,t,r,n,i){var o=function(e,t,r){t*=1e3;var n="";switch(e){case"sqrtMain":n=function(e,t){return"M95,"+(622+e+t)+"\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl"+e/2.075+" -"+e+"\nc5.3,-9.3,12,-14,20,-14\nH400000v"+(40+e)+"H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM"+(834+e)+" "+t+"h400000v"+(40+e)+"h-400000z"}(t,M);break;case"sqrtSize1":n=function(e,t){return"M263,"+(601+e+t)+"c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl"+e/2.084+" -"+e+"\nc4.7,-7.3,11,-11,19,-11\nH40000v"+(40+e)+"H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM"+(1001+e)+" "+t+"h400000v"+(40+e)+"h-400000z"}(t,M);break;case"sqrtSize2":n=function(e,t){return"M983 "+(10+e+t)+"\nl"+e/3.13+" -"+e+"\nc4,-6.7,10,-10,18,-10 H400000v"+(40+e)+"\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM"+(1001+e)+" "+t+"h400000v"+(40+e)+"h-400000z"}(t,M);break;case"sqrtSize3":n=function(e,t){return"M424,"+(2398+e+t)+"\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\nl"+e/4.223+" -"+e+"c4,-6.7,10,-10,18,-10 H400000\nv"+(40+e)+"H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\nc-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M"+(1001+e)+" "+t+"\nh400000v"+(40+e)+"h-400000z"}(t,M);break;case"sqrtSize4":n=function(e,t){return"M473,"+(2713+e+t)+"\nc339.3,-1799.3,509.3,-2700,510,-2702 l"+e/5.298+" -"+e+"\nc3.3,-7.3,9.3,-11,18,-11 H400000v"+(40+e)+"H1017.7\ns-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200\nc0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26\ns76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,\n606zM"+(1001+e)+" "+t+"h400000v"+(40+e)+"H1017.7z"}(t,M);break;case"sqrtTall":n=function(e,t,r){return"M702 "+(e+t)+"H400000"+(40+e)+"\nH742v"+(r-54-t-e)+"l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1\nh-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170\nc-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667\n219 661 l218 661zM702 "+t+"H400000v"+(40+e)+"H742z"}(t,M,r)}return n}(e,n,r),s=new B(e,o),a=new D([s],{width:"400em",height:t+"em",viewBox:"0 0 400000 "+r,preserveAspectRatio:"xMinYMin slice"});return Ke.makeSvgSpan(["hide-tail"],[a],i)},cr=["(","\\lparen",")","\\rparen","[","\\lbrack","]","\\rbrack","\\{","\\lbrace","\\}","\\rbrace","\\lfloor","\\rfloor","⌊","⌋","\\lceil","\\rceil","⌈","⌉","\\surd"],ur=["\\uparrow","\\downarrow","\\updownarrow","\\Uparrow","\\Downarrow","\\Updownarrow","|","\\|","\\vert","\\Vert","\\lvert","\\rvert","\\lVert","\\rVert","\\lgroup","\\rgroup","⟮","⟯","\\lmoustache","\\rmoustache","⎰","⎱"],hr=["<",">","\\langle","\\rangle","/","\\backslash","\\lt","\\gt"],dr=[0,1.2,1.8,2.4,3],pr=[{type:"small",style:x.SCRIPTSCRIPT},{type:"small",style:x.SCRIPT},{type:"small",style:x.TEXT},{type:"large",size:1},{type:"large",size:2},{type:"large",size:3},{type:"large",size:4}],fr=[{type:"small",style:x.SCRIPTSCRIPT},{type:"small",style:x.SCRIPT},{type:"small",style:x.TEXT},{type:"stack"}],mr=[{type:"small",style:x.SCRIPTSCRIPT},{type:"small",style:x.SCRIPT},{type:"small",style:x.TEXT},{type:"large",size:1},{type:"large",size:2},{type:"large",size:3},{type:"large",size:4},{type:"stack"}],gr=function(e){if("small"===e.type)return"Main-Regular";if("large"===e.type)return"Size"+e.size+"-Regular";if("stack"===e.type)return"Size4-Regular";throw new Error("Add support for delim type '"+e.type+"' here.")},vr=function(e,t,r,n){for(var i=Math.min(2,3-n.style.size);i<r.length&&"stack"!==r[i].type;i++){var o=er(e,gr(r[i]),"math"),s=o.height+o.depth;if("small"===r[i].type&&(s*=n.havingBaseStyle(r[i].style).sizeMultiplier),s>t)return r[i]}return r[r.length-1]},br=function(e,t,r,n,i,o){var s;"<"===e||"\\lt"===e||"⟨"===e?e="\\langle":">"!==e&&"\\gt"!==e&&"⟩"!==e||(e="\\rangle"),s=h.contains(hr,e)?pr:h.contains(cr,e)?mr:fr;var a=vr(e,t,s,n);return"small"===a.type?function(e,t,r,n,i,o){var s=Ke.makeSymbol(e,"Main-Regular",i,n),a=tr(s,t,n,o);return r&&rr(a,n,t),a}(e,a.style,r,n,i,o):"large"===a.type?nr(e,a.size,r,n,i,o):sr(e,t,r,n,i,o)},yr=function(e,t){var r,n,i=t.havingBaseSizing(),o=vr("\\surd",e*i.sizeMultiplier,mr,i),s=i.sizeMultiplier,a=Math.max(0,t.minRuleThickness-t.fontMetrics().sqrtRuleThickness),l=0,c=0,u=0;return"small"===o.type?(e<1?s=1:e<1.4&&(s=.7),c=(1+a)/s,(r=lr("sqrtMain",l=(1+a+ar)/s,u=1e3+1e3*a+80,a,t)).style.minWidth="0.853em",n=.833/s):"large"===o.type?(u=1080*dr[o.size],c=(dr[o.size]+a)/s,l=(dr[o.size]+a+ar)/s,(r=lr("sqrtSize"+o.size,l,u,a,t)).style.minWidth="1.02em",n=1/s):(l=e+a+ar,c=e+a,u=Math.floor(1e3*e+a)+80,(r=lr("sqrtTall",l,u,a,t)).style.minWidth="0.742em",n=1.056),r.height=c,r.style.height=l+"em",{span:r,advanceWidth:n,ruleWidth:(t.fontMetrics().sqrtRuleThickness+a)*s}},wr=function(e,t,r,n,i){if("<"===e||"\\lt"===e||"⟨"===e?e="\\langle":">"!==e&&"\\gt"!==e&&"⟩"!==e||(e="\\rangle"),h.contains(cr,e)||h.contains(hr,e))return nr(e,t,!1,r,n,i);if(h.contains(ur,e))return sr(e,dr[t],!1,r,n,i);throw new s("Illegal delimiter: '"+e+"'")},xr=br,kr=function(e,t,r,n,i,o){var s=n.fontMetrics().axisHeight*n.sizeMultiplier,a=5/n.fontMetrics().ptPerEm,l=Math.max(t-s,r+s),c=Math.max(l/500*901,2*l-a);return br(e,c,!0,n,i,o)},Sr={"\\bigl":{mclass:"mopen",size:1},"\\Bigl":{mclass:"mopen",size:2},"\\biggl":{mclass:"mopen",size:3},"\\Biggl":{mclass:"mopen",size:4},"\\bigr":{mclass:"mclose",size:1},"\\Bigr":{mclass:"mclose",size:2},"\\biggr":{mclass:"mclose",size:3},"\\Biggr":{mclass:"mclose",size:4},"\\bigm":{mclass:"mrel",size:1},"\\Bigm":{mclass:"mrel",size:2},"\\biggm":{mclass:"mrel",size:3},"\\Biggm":{mclass:"mrel",size:4},"\\big":{mclass:"mord",size:1},"\\Big":{mclass:"mord",size:2},"\\bigg":{mclass:"mord",size:3},"\\Bigg":{mclass:"mord",size:4}},Ar=["(","\\lparen",")","\\rparen","[","\\lbrack","]","\\rbrack","\\{","\\lbrace","\\}","\\rbrace","\\lfloor","\\rfloor","⌊","⌋","\\lceil","\\rceil","⌈","⌉","<",">","\\langle","⟨","\\rangle","⟩","\\lt","\\gt","\\lvert","\\rvert","\\lVert","\\rVert","\\lgroup","\\rgroup","⟮","⟯","\\lmoustache","\\rmoustache","⎰","⎱","/","\\backslash","|","\\vert","\\|","\\Vert","\\uparrow","\\Uparrow","\\downarrow","\\Downarrow","\\updownarrow","\\Updownarrow","."];function Mr(e,t){var r=nt(e);if(r&&h.contains(Ar,r.text))return r;throw new s("Invalid delimiter: '"+(r?r.text:JSON.stringify(e))+"' after '"+t.funcName+"'",e)}function Cr(e){if(!e.body)throw new Error("Bug: The leftright ParseNode wasn't fully parsed.")}dt({type:"delimsizing",names:["\\bigl","\\Bigl","\\biggl","\\Biggl","\\bigr","\\Bigr","\\biggr","\\Biggr","\\bigm","\\Bigm","\\biggm","\\Biggm","\\big","\\Big","\\bigg","\\Bigg"],props:{numArgs:1},handler:function(e,t){var r=Mr(t[0],e);return{type:"delimsizing",mode:e.parser.mode,size:Sr[e.funcName].size,mclass:Sr[e.funcName].mclass,delim:r.text}},htmlBuilder:function(e,t){return"."===e.delim?Ke.makeSpan([e.mclass]):wr(e.delim,e.size,t,e.mode,[e.mclass])},mathmlBuilder:function(e){var t=[];"."!==e.delim&&t.push(_t(e.delim,e.mode));var r=new Ot.MathNode("mo",t);return"mopen"===e.mclass||"mclose"===e.mclass?r.setAttribute("fence","true"):r.setAttribute("fence","false"),r}}),dt({type:"leftright-right",names:["\\right"],props:{numArgs:1},handler:function(e,t){var r=e.parser.gullet.macros.get("\\current@color");if(r&&"string"!=typeof r)throw new s("\\current@color set to non-string in \\right");return{type:"leftright-right",mode:e.parser.mode,delim:Mr(t[0],e).text,color:r}}}),dt({type:"leftright",names:["\\left"],props:{numArgs:1},handler:function(e,t){var r=Mr(t[0],e),n=e.parser;++n.leftrightDepth;var i=n.parseExpression(!1);--n.leftrightDepth,n.expect("\\right",!1);var o=Qe(n.parseFunction(),"leftright-right");return{type:"leftright",mode:n.mode,body:i,left:r.text,right:o.delim,rightColor:o.color}},htmlBuilder:function(e,t){Cr(e);for(var r,n,i=wt(e.body,t,!0,["mopen","mclose"]),o=0,s=0,a=!1,l=0;l<i.length;l++)i[l].isMiddle?a=!0:(o=Math.max(i[l].height,o),s=Math.max(i[l].depth,s));if(o*=t.sizeMultiplier,s*=t.sizeMultiplier,r="."===e.left?Mt(t,["mopen"]):kr(e.left,o,s,t,e.mode,["mopen"]),i.unshift(r),a)for(var c=1;c<i.length;c++){var u=i[c].isMiddle;u&&(i[c]=kr(u.delim,o,s,u.options,e.mode,[]))}if("."===e.right)n=Mt(t,["mclose"]);else{var h=e.rightColor?t.withColor(e.rightColor):t;n=kr(e.right,o,s,h,e.mode,["mclose"])}return i.push(n),Ke.makeSpan(["minner"],i,t)},mathmlBuilder:function(e,t){Cr(e);var r=jt(e.body,t);if("."!==e.left){var n=new Ot.MathNode("mo",[_t(e.left,e.mode)]);n.setAttribute("fence","true"),r.unshift(n)}if("."!==e.right){var i=new Ot.MathNode("mo",[_t(e.right,e.mode)]);i.setAttribute("fence","true"),e.rightColor&&i.setAttribute("mathcolor",e.rightColor),r.push(i)}return It(r)}}),dt({type:"middle",names:["\\middle"],props:{numArgs:1},handler:function(e,t){var r=Mr(t[0],e);if(!e.parser.leftrightDepth)throw new s("\\middle without preceding \\left",r);return{type:"middle",mode:e.parser.mode,delim:r.text}},htmlBuilder:function(e,t){var r;if("."===e.delim)r=Mt(t,[]);else{r=wr(e.delim,1,t,e.mode,[]);var n={delim:e.delim,options:t};r.isMiddle=n}return r},mathmlBuilder:function(e,t){var r="\\vert"===e.delim||"|"===e.delim?_t("|","text"):_t(e.delim,e.mode),n=new Ot.MathNode("mo",[r]);return n.setAttribute("fence","true"),n.setAttribute("lspace","0.05em"),n.setAttribute("rspace","0.05em"),n}});var Nr=function(e,t){var r,n,i=Ke.wrapFragment(Ct(e.body,t),t),o=e.label.substr(1),s=t.sizeMultiplier,a=0,l=h.isCharacterBox(e.body);if("sout"===o)(r=Ke.makeSpan(["stretchy","sout"])).height=t.fontMetrics().defaultRuleThickness/s,a=-.5*t.fontMetrics().xHeight;else{/cancel/.test(o)?l||i.classes.push("cancel-pad"):i.classes.push("boxpad");var c=0,u=0;/box/.test(o)?(u=Math.max(t.fontMetrics().fboxrule,t.minRuleThickness),c=t.fontMetrics().fboxsep+("colorbox"===o?0:u)):c=l?.2:0,r=Vt(i,o,c,t),/fbox|boxed|fcolorbox/.test(o)&&(r.style.borderStyle="solid",r.style.borderWidth=u+"em"),a=i.depth+c,e.backgroundColor&&(r.style.backgroundColor=e.backgroundColor,e.borderColor&&(r.style.borderColor=e.borderColor))}return n=e.backgroundColor?Ke.makeVList({positionType:"individualShift",children:[{type:"elem",elem:r,shift:a},{type:"elem",elem:i,shift:0}]},t):Ke.makeVList({positionType:"individualShift",children:[{type:"elem",elem:i,shift:0},{type:"elem",elem:r,shift:a,wrapperClasses:/cancel/.test(o)?["svg-align"]:[]}]},t),/cancel/.test(o)&&(n.height=i.height,n.depth=i.depth),/cancel/.test(o)&&!l?Ke.makeSpan(["mord","cancel-lap"],[n],t):Ke.makeSpan(["mord"],[n],t)},Er=function(e,t){var r=0,n=new Ot.MathNode(e.label.indexOf("colorbox")>-1?"mpadded":"menclose",[Bt(e.body,t)]);switch(e.label){case"\\cancel":n.setAttribute("notation","updiagonalstrike");break;case"\\bcancel":n.setAttribute("notation","downdiagonalstrike");break;case"\\sout":n.setAttribute("notation","horizontalstrike");break;case"\\fbox":n.setAttribute("notation","box");break;case"\\fcolorbox":case"\\colorbox":if(r=t.fontMetrics().fboxsep*t.fontMetrics().ptPerEm,n.setAttribute("width","+"+2*r+"pt"),n.setAttribute("height","+"+2*r+"pt"),n.setAttribute("lspace",r+"pt"),n.setAttribute("voffset",r+"pt"),"\\fcolorbox"===e.label){var i=Math.max(t.fontMetrics().fboxrule,t.minRuleThickness);n.setAttribute("style","border: "+i+"em solid "+String(e.borderColor))}break;case"\\xcancel":n.setAttribute("notation","updiagonalstrike downdiagonalstrike")}return e.backgroundColor&&n.setAttribute("mathbackground",e.backgroundColor),n};dt({type:"enclose",names:["\\colorbox"],props:{numArgs:2,allowedInText:!0,greediness:3,argTypes:["color","text"]},handler:function(e,t,r){var n=e.parser,i=e.funcName,o=Qe(t[0],"color-token").color,s=t[1];return{type:"enclose",mode:n.mode,label:i,backgroundColor:o,body:s}},htmlBuilder:Nr,mathmlBuilder:Er}),dt({type:"enclose",names:["\\fcolorbox"],props:{numArgs:3,allowedInText:!0,greediness:3,argTypes:["color","color","text"]},handler:function(e,t,r){var n=e.parser,i=e.funcName,o=Qe(t[0],"color-token").color,s=Qe(t[1],"color-token").color,a=t[2];return{type:"enclose",mode:n.mode,label:i,backgroundColor:s,borderColor:o,body:a}},htmlBuilder:Nr,mathmlBuilder:Er}),dt({type:"enclose",names:["\\fbox"],props:{numArgs:1,argTypes:["hbox"],allowedInText:!0},handler:function(e,t){return{type:"enclose",mode:e.parser.mode,label:"\\fbox",body:t[0]}}}),dt({type:"enclose",names:["\\cancel","\\bcancel","\\xcancel","\\sout"],props:{numArgs:1},handler:function(e,t,r){var n=e.parser,i=e.funcName,o=t[0];return{type:"enclose",mode:n.mode,label:i,body:o}},htmlBuilder:Nr,mathmlBuilder:Er});var Tr={};function qr(e){for(var t=e.type,r=e.names,n=e.props,i=e.handler,o=e.htmlBuilder,s=e.mathmlBuilder,a={type:t,numArgs:n.numArgs||0,greediness:1,allowedInText:!1,numOptionalArgs:0,handler:i},l=0;l<r.length;++l)Tr[r[l]]=a;o&&(ut[t]=o),s&&(ht[t]=s)}function zr(e){var t=[];e.consumeSpaces();for(var r=e.fetch().text;"\\hline"===r||"\\hdashline"===r;)e.consume(),t.push("\\hdashline"===r),e.consumeSpaces(),r=e.fetch().text;return t}function Or(e,t,r){var n=t.hskipBeforeAndAfter,i=t.addJot,o=t.cols,a=t.arraystretch,l=t.colSeparationType;if(e.gullet.beginGroup(),e.gullet.macros.set("\\\\","\\cr"),!a){var c=e.gullet.expandMacroAsText("\\arraystretch");if(null==c)a=1;else if(!(a=parseFloat(c))||a<0)throw new s("Invalid \\arraystretch: "+c)}e.gullet.beginGroup();var u=[],h=[u],d=[],p=[];for(p.push(zr(e));;){var f=e.parseExpression(!1,"\\cr");e.gullet.endGroup(),e.gullet.beginGroup(),f={type:"ordgroup",mode:e.mode,body:f},r&&(f={type:"styling",mode:e.mode,style:r,body:[f]}),u.push(f);var m=e.fetch().text;if("&"===m)e.consume();else{if("\\end"===m){1===u.length&&"styling"===f.type&&0===f.body[0].body.length&&h.pop(),p.length<h.length+1&&p.push([]);break}if("\\cr"!==m)throw new s("Expected & or \\\\ or \\cr or \\end",e.nextToken);var g=Qe(e.parseFunction(),"cr");d.push(g.size),p.push(zr(e)),u=[],h.push(u)}}return e.gullet.endGroup(),e.gullet.endGroup(),{type:"array",mode:e.mode,addJot:i,arraystretch:a,body:h,cols:o,rowGaps:d,hskipBeforeAndAfter:n,hLinesBeforeRow:p,colSeparationType:l}}function _r(e){return"d"===e.substr(0,1)?"display":"text"}var Ir=function(e,t){var r,n,i=e.body.length,o=e.hLinesBeforeRow,a=0,l=new Array(i),c=[],u=Math.max(t.fontMetrics().arrayRuleWidth,t.minRuleThickness),d=1/t.fontMetrics().ptPerEm,p=5*d;e.colSeparationType&&"small"===e.colSeparationType&&(p=t.havingStyle(x.SCRIPT).sizeMultiplier/t.sizeMultiplier*.2778);var f=12*d,m=3*d,g=e.arraystretch*f,v=.7*g,b=.3*g,y=0;function w(e){for(var t=0;t<e.length;++t)t>0&&(y+=.25),c.push({pos:y,isDashed:e[t]})}for(w(o[0]),r=0;r<e.body.length;++r){var k=e.body[r],S=v,A=b;a<k.length&&(a=k.length);var M=new Array(k.length);for(n=0;n<k.length;++n){var C=Ct(k[n],t);A<C.depth&&(A=C.depth),S<C.height&&(S=C.height),M[n]=C}var N=e.rowGaps[r],E=0;N&&(E=Pe(N,t))>0&&(A<(E+=b)&&(A=E),E=0),e.addJot&&(A+=m),M.height=S,M.depth=A,y+=S,M.pos=y,y+=A+E,l[r]=M,w(o[r+1])}var T,q,z=y/2+t.fontMetrics().axisHeight,O=e.cols||[],_=[];for(n=0,q=0;n<a||q<O.length;++n,++q){for(var I=O[q]||{},L=!0;"separator"===I.type;){if(L||((T=Ke.makeSpan(["arraycolsep"],[])).style.width=t.fontMetrics().doubleRuleSep+"em",_.push(T)),"|"!==I.separator&&":"!==I.separator)throw new s("Invalid separator type: "+I.separator);var j="|"===I.separator?"solid":"dashed",D=Ke.makeSpan(["vertical-separator"],[],t);D.style.height=y+"em",D.style.borderRightWidth=u+"em",D.style.borderRightStyle=j,D.style.margin="0 -"+u/2+"em",D.style.verticalAlign=-(y-z)+"em",_.push(D),I=O[++q]||{},L=!1}if(!(n>=a)){var B=void 0;(n>0||e.hskipBeforeAndAfter)&&0!==(B=h.deflt(I.pregap,p))&&((T=Ke.makeSpan(["arraycolsep"],[])).style.width=B+"em",_.push(T));var R=[];for(r=0;r<i;++r){var P=l[r],F=P[n];if(F){var U=P.pos-z;F.depth=P.depth,F.height=P.height,R.push({type:"elem",elem:F,shift:U})}}R=Ke.makeVList({positionType:"individualShift",children:R},t),R=Ke.makeSpan(["col-align-"+(I.align||"c")],[R]),_.push(R),(n<a-1||e.hskipBeforeAndAfter)&&0!==(B=h.deflt(I.postgap,p))&&((T=Ke.makeSpan(["arraycolsep"],[])).style.width=B+"em",_.push(T))}}if(l=Ke.makeSpan(["mtable"],_),c.length>0){for(var $=Ke.makeLineSpan("hline",t,u),H=Ke.makeLineSpan("hdashline",t,u),V=[{type:"elem",elem:l,shift:0}];c.length>0;){var G=c.pop(),W=G.pos-z;G.isDashed?V.push({type:"elem",elem:H,shift:W}):V.push({type:"elem",elem:$,shift:W})}l=Ke.makeVList({positionType:"individualShift",children:V},t)}return Ke.makeSpan(["mord"],[l],t)},Lr={c:"center ",l:"left ",r:"right "},jr=function(e,t){var r=new Ot.MathNode("mtable",e.body.map((function(e){return new Ot.MathNode("mtr",e.map((function(e){return new Ot.MathNode("mtd",[Bt(e,t)])})))}))),n=.5===e.arraystretch?.1:.16+e.arraystretch-1+(e.addJot?.09:0);r.setAttribute("rowspacing",n+"em");var i="",o="";if(e.cols){var s=e.cols,a="",l=!1,c=0,u=s.length;"separator"===s[0].type&&(i+="top ",c=1),"separator"===s[s.length-1].type&&(i+="bottom ",u-=1);for(var h=c;h<u;h++)"align"===s[h].type?(o+=Lr[s[h].align],l&&(a+="none "),l=!0):"separator"===s[h].type&&l&&(a+="|"===s[h].separator?"solid ":"dashed ",l=!1);r.setAttribute("columnalign",o.trim()),/[sd]/.test(a)&&r.setAttribute("columnlines",a.trim())}if("align"===e.colSeparationType){for(var d=e.cols||[],p="",f=1;f<d.length;f++)p+=f%2?"0em ":"1em ";r.setAttribute("columnspacing",p.trim())}else"alignat"===e.colSeparationType?r.setAttribute("columnspacing","0em"):"small"===e.colSeparationType?r.setAttribute("columnspacing","0.2778em"):r.setAttribute("columnspacing","1em");var m="",g=e.hLinesBeforeRow;i+=g[0].length>0?"left ":"",i+=g[g.length-1].length>0?"right ":"";for(var v=1;v<g.length-1;v++)m+=0===g[v].length?"none ":g[v][0]?"dashed ":"solid ";return/[sd]/.test(m)&&r.setAttribute("rowlines",m.trim()),""!==i&&(r=new Ot.MathNode("menclose",[r])).setAttribute("notation",i.trim()),e.arraystretch&&e.arraystretch<1&&(r=new Ot.MathNode("mstyle",[r])).setAttribute("scriptlevel","1"),r},Dr=function(e,t){var r,n=[],i=Or(e.parser,{cols:n,addJot:!0},"display"),o=0,a={type:"ordgroup",mode:e.mode,body:[]},l=et(t[0],"ordgroup");if(l){for(var c="",u=0;u<l.body.length;u++)c+=Qe(l.body[u],"textord").text;r=Number(c),o=2*r}var h=!o;i.body.forEach((function(e){for(var t=1;t<e.length;t+=2){var n=Qe(e[t],"styling");Qe(n.body[0],"ordgroup").body.unshift(a)}if(h)o<e.length&&(o=e.length);else{var i=e.length/2;if(r<i)throw new s("Too many math in a row: expected "+r+", but got "+i,e[0])}}));for(var d=0;d<o;++d){var p="r",f=0;d%2==1?p="l":d>0&&h&&(f=1),n[d]={type:"align",align:p,pregap:f,postgap:0}}return i.colSeparationType=h?"align":"alignat",i};qr({type:"array",names:["array","darray"],props:{numArgs:1},handler:function(e,t){var r={cols:(nt(t[0])?[t[0]]:Qe(t[0],"ordgroup").body).map((function(e){var t=rt(e).text;if(-1!=="lcr".indexOf(t))return{type:"align",align:t};if("|"===t)return{type:"separator",separator:"|"};if(":"===t)return{type:"separator",separator:":"};throw new s("Unknown column alignment: "+t,e)})),hskipBeforeAndAfter:!0};return Or(e.parser,r,_r(e.envName))},htmlBuilder:Ir,mathmlBuilder:jr}),qr({type:"array",names:["matrix","pmatrix","bmatrix","Bmatrix","vmatrix","Vmatrix"],props:{numArgs:0},handler:function(e){var t={matrix:null,pmatrix:["(",")"],bmatrix:["[","]"],Bmatrix:["\\{","\\}"],vmatrix:["|","|"],Vmatrix:["\\Vert","\\Vert"]}[e.envName],r=Or(e.parser,{hskipBeforeAndAfter:!1},_r(e.envName));return t?{type:"leftright",mode:e.mode,body:[r],left:t[0],right:t[1],rightColor:void 0}:r},htmlBuilder:Ir,mathmlBuilder:jr}),qr({type:"array",names:["smallmatrix"],props:{numArgs:0},handler:function(e){var t=Or(e.parser,{arraystretch:.5},"script");return t.colSeparationType="small",t},htmlBuilder:Ir,mathmlBuilder:jr}),qr({type:"array",names:["subarray"],props:{numArgs:1},handler:function(e,t){var r=(nt(t[0])?[t[0]]:Qe(t[0],"ordgroup").body).map((function(e){var t=rt(e).text;if(-1!=="lc".indexOf(t))return{type:"align",align:t};throw new s("Unknown column alignment: "+t,e)}));if(r.length>1)throw new s("{subarray} can contain only one column");var n={cols:r,hskipBeforeAndAfter:!1,arraystretch:.5};if((n=Or(e.parser,n,"script")).body[0].length>1)throw new s("{subarray} can contain only one column");return n},htmlBuilder:Ir,mathmlBuilder:jr}),qr({type:"array",names:["cases","dcases"],props:{numArgs:0},handler:function(e){var t=Or(e.parser,{arraystretch:1.2,cols:[{type:"align",align:"l",pregap:0,postgap:1},{type:"align",align:"l",pregap:0,postgap:0}]},_r(e.envName));return{type:"leftright",mode:e.mode,body:[t],left:"\\{",right:".",rightColor:void 0}},htmlBuilder:Ir,mathmlBuilder:jr}),qr({type:"array",names:["aligned"],props:{numArgs:0},handler:Dr,htmlBuilder:Ir,mathmlBuilder:jr}),qr({type:"array",names:["gathered"],props:{numArgs:0},handler:function(e){return Or(e.parser,{cols:[{type:"align",align:"c"}],addJot:!0},"display")},htmlBuilder:Ir,mathmlBuilder:jr}),qr({type:"array",names:["alignedat"],props:{numArgs:1},handler:Dr,htmlBuilder:Ir,mathmlBuilder:jr}),dt({type:"text",names:["\\hline","\\hdashline"],props:{numArgs:0,allowedInText:!0,allowedInMath:!0},handler:function(e,t){throw new s(e.funcName+" valid only within array environment")}});var Br=Tr;dt({type:"environment",names:["\\begin","\\end"],props:{numArgs:1,argTypes:["text"]},handler:function(e,t){var r=e.parser,n=e.funcName,i=t[0];if("ordgroup"!==i.type)throw new s("Invalid environment name",i);for(var o="",a=0;a<i.body.length;++a)o+=Qe(i.body[a],"textord").text;if("\\begin"===n){if(!Br.hasOwnProperty(o))throw new s("No such environment: "+o,i);var l=Br[o],c=r.parseArguments("\\begin{"+o+"}",l),u=c.args,h=c.optArgs,d={mode:r.mode,envName:o,parser:r},p=l.handler(d,u,h);r.expect("\\end",!1);var f=r.nextToken,m=Qe(r.parseFunction(),"environment");if(m.name!==o)throw new s("Mismatch: \\begin{"+o+"} matched by \\end{"+m.name+"}",f);return p}return{type:"environment",mode:r.mode,name:o,nameGroup:i}}});var Rr=Ke.makeSpan;function Pr(e,t){var r=wt(e.body,t,!0);return Rr([e.mclass],r,t)}function Fr(e,t){var r,n=jt(e.body,t);return"minner"===e.mclass?Ot.newDocumentFragment(n):("mord"===e.mclass?e.isCharacterBox?(r=n[0]).type="mi":r=new Ot.MathNode("mi",n):(e.isCharacterBox?(r=n[0]).type="mo":r=new Ot.MathNode("mo",n),"mbin"===e.mclass?(r.attributes.lspace="0.22em",r.attributes.rspace="0.22em"):"mpunct"===e.mclass?(r.attributes.lspace="0em",r.attributes.rspace="0.17em"):"mopen"!==e.mclass&&"mclose"!==e.mclass||(r.attributes.lspace="0em",r.attributes.rspace="0em")),r)}dt({type:"mclass",names:["\\mathord","\\mathbin","\\mathrel","\\mathopen","\\mathclose","\\mathpunct","\\mathinner"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName,i=t[0];return{type:"mclass",mode:r.mode,mclass:"m"+n.substr(5),body:ft(i),isCharacterBox:h.isCharacterBox(i)}},htmlBuilder:Pr,mathmlBuilder:Fr});var Ur=function(e){var t="ordgroup"===e.type&&e.body.length?e.body[0]:e;return"atom"!==t.type||"bin"!==t.family&&"rel"!==t.family?"mord":"m"+t.family};dt({type:"mclass",names:["\\@binrel"],props:{numArgs:2},handler:function(e,t){return{type:"mclass",mode:e.parser.mode,mclass:Ur(t[0]),body:[t[1]],isCharacterBox:h.isCharacterBox(t[1])}}}),dt({type:"mclass",names:["\\stackrel","\\overset","\\underset"],props:{numArgs:2},handler:function(e,t){var r,n=e.parser,i=e.funcName,o=t[1],s=t[0];r="\\stackrel"!==i?Ur(o):"mrel";var a={type:"op",mode:o.mode,limits:!0,alwaysHandleSupSub:!0,parentIsSupSub:!1,symbol:!1,suppressBaseShift:"\\stackrel"!==i,body:ft(o)},l={type:"supsub",mode:s.mode,base:a,sup:"\\underset"===i?null:s,sub:"\\underset"===i?s:null};return{type:"mclass",mode:n.mode,mclass:r,body:[l],isCharacterBox:h.isCharacterBox(l)}},htmlBuilder:Pr,mathmlBuilder:Fr});var $r=function(e,t){var r=e.font,n=t.withFont(r);return Ct(e.body,n)},Hr=function(e,t){var r=e.font,n=t.withFont(r);return Bt(e.body,n)},Vr={"\\Bbb":"\\mathbb","\\bold":"\\mathbf","\\frak":"\\mathfrak","\\bm":"\\boldsymbol"};dt({type:"font",names:["\\mathrm","\\mathit","\\mathbf","\\mathnormal","\\mathbb","\\mathcal","\\mathfrak","\\mathscr","\\mathsf","\\mathtt","\\Bbb","\\bold","\\frak"],props:{numArgs:1,greediness:2},handler:function(e,t){var r=e.parser,n=e.funcName,i=t[0],o=n;return o in Vr&&(o=Vr[o]),{type:"font",mode:r.mode,font:o.slice(1),body:i}},htmlBuilder:$r,mathmlBuilder:Hr}),dt({type:"mclass",names:["\\boldsymbol","\\bm"],props:{numArgs:1,greediness:2},handler:function(e,t){var r=e.parser,n=t[0],i=h.isCharacterBox(n);return{type:"mclass",mode:r.mode,mclass:Ur(n),body:[{type:"font",mode:r.mode,font:"boldsymbol",body:n}],isCharacterBox:i}}}),dt({type:"font",names:["\\rm","\\sf","\\tt","\\bf","\\it"],props:{numArgs:0,allowedInText:!0},handler:function(e,t){var r=e.parser,n=e.funcName,i=e.breakOnTokenText,o=r.mode,s=r.parseExpression(!0,i);return{type:"font",mode:o,font:"math"+n.slice(1),body:{type:"ordgroup",mode:r.mode,body:s}}},htmlBuilder:$r,mathmlBuilder:Hr});var Gr=function(e,t){var r=t;return"display"===e?r=r.id>=x.SCRIPT.id?r.text():x.DISPLAY:"text"===e&&r.size===x.DISPLAY.size?r=x.TEXT:"script"===e?r=x.SCRIPT:"scriptscript"===e&&(r=x.SCRIPTSCRIPT),r},Wr=function(e,t){var r,n=Gr(e.size,t.style),i=n.fracNum(),o=n.fracDen();r=t.havingStyle(i);var s=Ct(e.numer,r,t);if(e.continued){var a=8.5/t.fontMetrics().ptPerEm,l=3.5/t.fontMetrics().ptPerEm;s.height=s.height<a?a:s.height,s.depth=s.depth<l?l:s.depth}r=t.havingStyle(o);var c,u,h,d,p,f,m,g,v,b,y=Ct(e.denom,r,t);if(e.hasBarLine?(e.barSize?(u=Pe(e.barSize,t),c=Ke.makeLineSpan("frac-line",t,u)):c=Ke.makeLineSpan("frac-line",t),u=c.height,h=c.height):(c=null,u=0,h=t.fontMetrics().defaultRuleThickness),n.size===x.DISPLAY.size||"display"===e.size?(d=t.fontMetrics().num1,p=u>0?3*h:7*h,f=t.fontMetrics().denom1):(u>0?(d=t.fontMetrics().num2,p=h):(d=t.fontMetrics().num3,p=3*h),f=t.fontMetrics().denom2),c){var w=t.fontMetrics().axisHeight;d-s.depth-(w+.5*u)<p&&(d+=p-(d-s.depth-(w+.5*u))),w-.5*u-(y.height-f)<p&&(f+=p-(w-.5*u-(y.height-f)));var k=-(w-.5*u);m=Ke.makeVList({positionType:"individualShift",children:[{type:"elem",elem:y,shift:f},{type:"elem",elem:c,shift:k},{type:"elem",elem:s,shift:-d}]},t)}else{var S=d-s.depth-(y.height-f);S<p&&(d+=.5*(p-S),f+=.5*(p-S)),m=Ke.makeVList({positionType:"individualShift",children:[{type:"elem",elem:y,shift:f},{type:"elem",elem:s,shift:-d}]},t)}return r=t.havingStyle(n),m.height*=r.sizeMultiplier/t.sizeMultiplier,m.depth*=r.sizeMultiplier/t.sizeMultiplier,g=n.size===x.DISPLAY.size?t.fontMetrics().delim1:t.fontMetrics().delim2,v=null==e.leftDelim?Mt(t,["mopen"]):xr(e.leftDelim,g,!0,t.havingStyle(n),e.mode,["mopen"]),b=e.continued?Ke.makeSpan([]):null==e.rightDelim?Mt(t,["mclose"]):xr(e.rightDelim,g,!0,t.havingStyle(n),e.mode,["mclose"]),Ke.makeSpan(["mord"].concat(r.sizingClasses(t)),[v,Ke.makeSpan(["mfrac"],[m]),b],t)},Xr=function(e,t){var r=new Ot.MathNode("mfrac",[Bt(e.numer,t),Bt(e.denom,t)]);if(e.hasBarLine){if(e.barSize){var n=Pe(e.barSize,t);r.setAttribute("linethickness",n+"em")}}else r.setAttribute("linethickness","0px");var i=Gr(e.size,t.style);if(i.size!==t.style.size){r=new Ot.MathNode("mstyle",[r]);var o=i.size===x.DISPLAY.size?"true":"false";r.setAttribute("displaystyle",o),r.setAttribute("scriptlevel","0")}if(null!=e.leftDelim||null!=e.rightDelim){var s=[];if(null!=e.leftDelim){var a=new Ot.MathNode("mo",[new Ot.TextNode(e.leftDelim.replace("\\",""))]);a.setAttribute("fence","true"),s.push(a)}if(s.push(r),null!=e.rightDelim){var l=new Ot.MathNode("mo",[new Ot.TextNode(e.rightDelim.replace("\\",""))]);l.setAttribute("fence","true"),s.push(l)}return It(s)}return r};dt({type:"genfrac",names:["\\cfrac","\\dfrac","\\frac","\\tfrac","\\dbinom","\\binom","\\tbinom","\\\\atopfrac","\\\\bracefrac","\\\\brackfrac"],props:{numArgs:2,greediness:2},handler:function(e,t){var r,n=e.parser,i=e.funcName,o=t[0],s=t[1],a=null,l=null,c="auto";switch(i){case"\\cfrac":case"\\dfrac":case"\\frac":case"\\tfrac":r=!0;break;case"\\\\atopfrac":r=!1;break;case"\\dbinom":case"\\binom":case"\\tbinom":r=!1,a="(",l=")";break;case"\\\\bracefrac":r=!1,a="\\{",l="\\}";break;case"\\\\brackfrac":r=!1,a="[",l="]";break;default:throw new Error("Unrecognized genfrac command")}switch(i){case"\\cfrac":case"\\dfrac":case"\\dbinom":c="display";break;case"\\tfrac":case"\\tbinom":c="text"}return{type:"genfrac",mode:n.mode,continued:"\\cfrac"===i,numer:o,denom:s,hasBarLine:r,leftDelim:a,rightDelim:l,size:c,barSize:null}},htmlBuilder:Wr,mathmlBuilder:Xr}),dt({type:"infix",names:["\\over","\\choose","\\atop","\\brace","\\brack"],props:{numArgs:0,infix:!0},handler:function(e){var t,r=e.parser,n=e.funcName,i=e.token;switch(n){case"\\over":t="\\frac";break;case"\\choose":t="\\binom";break;case"\\atop":t="\\\\atopfrac";break;case"\\brace":t="\\\\bracefrac";break;case"\\brack":t="\\\\brackfrac";break;default:throw new Error("Unrecognized infix genfrac command")}return{type:"infix",mode:r.mode,replaceWith:t,token:i}}});var Yr=["display","text","script","scriptscript"],Zr=function(e){var t=null;return e.length>0&&(t="."===(t=e)?null:t),t};dt({type:"genfrac",names:["\\genfrac"],props:{numArgs:6,greediness:6,argTypes:["math","math","size","text","math","math"]},handler:function(e,t){var r=e.parser,n=t[4],i=t[5],o=et(t[0],"atom");o&&(o=tt(t[0],"open"));var s=o?Zr(o.text):null,a=et(t[1],"atom");a&&(a=tt(t[1],"close"));var l,c=a?Zr(a.text):null,u=Qe(t[2],"size"),h=null;l=!!u.isBlank||(h=u.value).number>0;var d="auto",p=et(t[3],"ordgroup");if(p){if(p.body.length>0){var f=Qe(p.body[0],"textord");d=Yr[Number(f.text)]}}else p=Qe(t[3],"textord"),d=Yr[Number(p.text)];return{type:"genfrac",mode:r.mode,numer:n,denom:i,continued:!1,hasBarLine:l,barSize:h,leftDelim:s,rightDelim:c,size:d}},htmlBuilder:Wr,mathmlBuilder:Xr}),dt({type:"infix",names:["\\above"],props:{numArgs:1,argTypes:["size"],infix:!0},handler:function(e,t){var r=e.parser,n=(e.funcName,e.token);return{type:"infix",mode:r.mode,replaceWith:"\\\\abovefrac",size:Qe(t[0],"size").value,token:n}}}),dt({type:"genfrac",names:["\\\\abovefrac"],props:{numArgs:3,argTypes:["math","size","math"]},handler:function(e,t){var r=e.parser,n=(e.funcName,t[0]),i=function(e){if(!e)throw new Error("Expected non-null, but got "+String(e));return e}(Qe(t[1],"infix").size),o=t[2],s=i.number>0;return{type:"genfrac",mode:r.mode,numer:n,denom:o,continued:!1,hasBarLine:s,barSize:i,leftDelim:null,rightDelim:null,size:"auto"}},htmlBuilder:Wr,mathmlBuilder:Xr});var Jr=function(e,t){var r,n,i=t.style,o=et(e,"supsub");o?(r=o.sup?Ct(o.sup,t.havingStyle(i.sup()),t):Ct(o.sub,t.havingStyle(i.sub()),t),n=Qe(o.base,"horizBrace")):n=Qe(e,"horizBrace");var s,a=Ct(n.base,t.havingBaseStyle(x.DISPLAY)),l=Wt(n,t);if(n.isOver?(s=Ke.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:a},{type:"kern",size:.1},{type:"elem",elem:l}]},t)).children[0].children[0].children[1].classes.push("svg-align"):(s=Ke.makeVList({positionType:"bottom",positionData:a.depth+.1+l.height,children:[{type:"elem",elem:l},{type:"kern",size:.1},{type:"elem",elem:a}]},t)).children[0].children[0].children[0].classes.push("svg-align"),r){var c=Ke.makeSpan(["mord",n.isOver?"mover":"munder"],[s],t);s=n.isOver?Ke.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:c},{type:"kern",size:.2},{type:"elem",elem:r}]},t):Ke.makeVList({positionType:"bottom",positionData:c.depth+.2+r.height+r.depth,children:[{type:"elem",elem:r},{type:"kern",size:.2},{type:"elem",elem:c}]},t)}return Ke.makeSpan(["mord",n.isOver?"mover":"munder"],[s],t)};dt({type:"horizBrace",names:["\\overbrace","\\underbrace"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName;return{type:"horizBrace",mode:r.mode,label:n,isOver:/^\\over/.test(n),base:t[0]}},htmlBuilder:Jr,mathmlBuilder:function(e,t){var r=Gt(e.label);return new Ot.MathNode(e.isOver?"mover":"munder",[Bt(e.base,t),r])}}),dt({type:"href",names:["\\href"],props:{numArgs:2,argTypes:["url","original"],allowedInText:!0},handler:function(e,t){var r=e.parser,n=t[1],i=Qe(t[0],"url").url;return r.settings.isTrusted({command:"\\href",url:i})?{type:"href",mode:r.mode,href:i,body:ft(n)}:r.formatUnsupportedCmd("\\href")},htmlBuilder:function(e,t){var r=wt(e.body,t,!1);return Ke.makeAnchor(e.href,[],r,t)},mathmlBuilder:function(e,t){var r=Dt(e.body,t);return r instanceof qt||(r=new qt("mrow",[r])),r.setAttribute("href",e.href),r}}),dt({type:"href",names:["\\url"],props:{numArgs:1,argTypes:["url"],allowedInText:!0},handler:function(e,t){var r=e.parser,n=Qe(t[0],"url").url;if(!r.settings.isTrusted({command:"\\url",url:n}))return r.formatUnsupportedCmd("\\url");for(var i=[],o=0;o<n.length;o++){var s=n[o];"~"===s&&(s="\\textasciitilde"),i.push({type:"textord",mode:"text",text:s})}var a={type:"text",mode:r.mode,font:"\\texttt",body:i};return{type:"href",mode:r.mode,href:n,body:ft(a)}}}),dt({type:"htmlmathml",names:["\\html@mathml"],props:{numArgs:2,allowedInText:!0},handler:function(e,t){return{type:"htmlmathml",mode:e.parser.mode,html:ft(t[0]),mathml:ft(t[1])}},htmlBuilder:function(e,t){var r=wt(e.html,t,!1);return Ke.makeFragment(r)},mathmlBuilder:function(e,t){return Dt(e.mathml,t)}});var Kr=function(e){if(/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(e))return{number:+e,unit:"bp"};var t=/([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(e);if(!t)throw new s("Invalid size: '"+e+"' in \\includegraphics");var r={number:+(t[1]+t[2]),unit:t[3]};if(!Re(r))throw new s("Invalid unit: '"+r.unit+"' in \\includegraphics.");return r};dt({type:"includegraphics",names:["\\includegraphics"],props:{numArgs:1,numOptionalArgs:1,argTypes:["raw","url"],allowedInText:!1},handler:function(e,t,r){var n=e.parser,i={number:0,unit:"em"},o={number:.9,unit:"em"},a={number:0,unit:"em"},l="";if(r[0])for(var c=Qe(r[0],"raw").string.split(","),u=0;u<c.length;u++){var h=c[u].split("=");if(2===h.length){var d=h[1].trim();switch(h[0].trim()){case"alt":l=d;break;case"width":i=Kr(d);break;case"height":o=Kr(d);break;case"totalheight":a=Kr(d);break;default:throw new s("Invalid key: '"+h[0]+"' in \\includegraphics.")}}}var p=Qe(t[0],"url").url;return""===l&&(l=(l=(l=p).replace(/^.*[\\/]/,"")).substring(0,l.lastIndexOf("."))),n.settings.isTrusted({command:"\\includegraphics",url:p})?{type:"includegraphics",mode:n.mode,alt:l,width:i,height:o,totalheight:a,src:p}:n.formatUnsupportedCmd("\\includegraphics")},htmlBuilder:function(e,t){var r=Pe(e.height,t),n=0;e.totalheight.number>0&&(n=Pe(e.totalheight,t)-r,n=Number(n.toFixed(2)));var i=0;e.width.number>0&&(i=Pe(e.width,t));var o={height:r+n+"em"};i>0&&(o.width=i+"em"),n>0&&(o.verticalAlign=-n+"em");var s=new I(e.src,e.alt,o);return s.height=r,s.depth=n,s},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mglyph",[]);r.setAttribute("alt",e.alt);var n=Pe(e.height,t),i=0;if(e.totalheight.number>0&&(i=(i=Pe(e.totalheight,t)-n).toFixed(2),r.setAttribute("valign","-"+i+"em")),r.setAttribute("height",n+i+"em"),e.width.number>0){var o=Pe(e.width,t);r.setAttribute("width",o+"em")}return r.setAttribute("src",e.src),r}}),dt({type:"kern",names:["\\kern","\\mkern","\\hskip","\\mskip"],props:{numArgs:1,argTypes:["size"],allowedInText:!0},handler:function(e,t){var r=e.parser,n=e.funcName,i=Qe(t[0],"size");if(r.settings.strict){var o="m"===n[1],s="mu"===i.value.unit;o?(s||r.settings.reportNonstrict("mathVsTextUnits","LaTeX's "+n+" supports only mu units, not "+i.value.unit+" units"),"math"!==r.mode&&r.settings.reportNonstrict("mathVsTextUnits","LaTeX's "+n+" works only in math mode")):s&&r.settings.reportNonstrict("mathVsTextUnits","LaTeX's "+n+" doesn't support mu units")}return{type:"kern",mode:r.mode,dimension:i.value}},htmlBuilder:function(e,t){return Ke.makeGlue(e.dimension,t)},mathmlBuilder:function(e,t){var r=Pe(e.dimension,t);return new Ot.SpaceNode(r)}}),dt({type:"lap",names:["\\mathllap","\\mathrlap","\\mathclap"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){var r=e.parser,n=e.funcName,i=t[0];return{type:"lap",mode:r.mode,alignment:n.slice(5),body:i}},htmlBuilder:function(e,t){var r;"clap"===e.alignment?(r=Ke.makeSpan([],[Ct(e.body,t)]),r=Ke.makeSpan(["inner"],[r],t)):r=Ke.makeSpan(["inner"],[Ct(e.body,t)]);var n=Ke.makeSpan(["fix"],[]),i=Ke.makeSpan([e.alignment],[r,n],t),o=Ke.makeSpan(["strut"]);return o.style.height=i.height+i.depth+"em",o.style.verticalAlign=-i.depth+"em",i.children.unshift(o),i=Ke.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:i}]},t),Ke.makeSpan(["mord"],[i],t)},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mpadded",[Bt(e.body,t)]);if("rlap"!==e.alignment){var n="llap"===e.alignment?"-1":"-0.5";r.setAttribute("lspace",n+"width")}return r.setAttribute("width","0px"),r}}),dt({type:"styling",names:["\\(","$"],props:{numArgs:0,allowedInText:!0,allowedInMath:!1},handler:function(e,t){var r=e.funcName,n=e.parser,i=n.mode;n.switchMode("math");var o="\\("===r?"\\)":"$",s=n.parseExpression(!1,o);return n.expect(o),n.switchMode(i),{type:"styling",mode:n.mode,style:"text",body:s}}}),dt({type:"text",names:["\\)","\\]"],props:{numArgs:0,allowedInText:!0,allowedInMath:!1},handler:function(e,t){throw new s("Mismatched "+e.funcName)}});var Qr=function(e,t){switch(t.style.size){case x.DISPLAY.size:return e.display;case x.TEXT.size:return e.text;case x.SCRIPT.size:return e.script;case x.SCRIPTSCRIPT.size:return e.scriptscript;default:return e.text}};dt({type:"mathchoice",names:["\\mathchoice"],props:{numArgs:4},handler:function(e,t){return{type:"mathchoice",mode:e.parser.mode,display:ft(t[0]),text:ft(t[1]),script:ft(t[2]),scriptscript:ft(t[3])}},htmlBuilder:function(e,t){var r=Qr(e,t),n=wt(r,t,!1);return Ke.makeFragment(n)},mathmlBuilder:function(e,t){var r=Qr(e,t);return Dt(r,t)}});var en=function(e,t,r,n,i,o,s){var a,l,c;if(e=Ke.makeSpan([],[e]),t){var u=Ct(t,n.havingStyle(i.sup()),n);l={elem:u,kern:Math.max(n.fontMetrics().bigOpSpacing1,n.fontMetrics().bigOpSpacing3-u.depth)}}if(r){var h=Ct(r,n.havingStyle(i.sub()),n);a={elem:h,kern:Math.max(n.fontMetrics().bigOpSpacing2,n.fontMetrics().bigOpSpacing4-h.height)}}if(l&&a){var d=n.fontMetrics().bigOpSpacing5+a.elem.height+a.elem.depth+a.kern+e.depth+s;c=Ke.makeVList({positionType:"bottom",positionData:d,children:[{type:"kern",size:n.fontMetrics().bigOpSpacing5},{type:"elem",elem:a.elem,marginLeft:-o+"em"},{type:"kern",size:a.kern},{type:"elem",elem:e},{type:"kern",size:l.kern},{type:"elem",elem:l.elem,marginLeft:o+"em"},{type:"kern",size:n.fontMetrics().bigOpSpacing5}]},n)}else if(a){var p=e.height-s;c=Ke.makeVList({positionType:"top",positionData:p,children:[{type:"kern",size:n.fontMetrics().bigOpSpacing5},{type:"elem",elem:a.elem,marginLeft:-o+"em"},{type:"kern",size:a.kern},{type:"elem",elem:e}]},n)}else{if(!l)return e;var f=e.depth+s;c=Ke.makeVList({positionType:"bottom",positionData:f,children:[{type:"elem",elem:e},{type:"kern",size:l.kern},{type:"elem",elem:l.elem,marginLeft:o+"em"},{type:"kern",size:n.fontMetrics().bigOpSpacing5}]},n)}return Ke.makeSpan(["mop","op-limits"],[c],n)},tn=["\\smallint"],rn=function(e,t){var r,n,i,o=!1,s=et(e,"supsub");s?(r=s.sup,n=s.sub,i=Qe(s.base,"op"),o=!0):i=Qe(e,"op");var a,l=t.style,c=!1;if(l.size===x.DISPLAY.size&&i.symbol&&!h.contains(tn,i.name)&&(c=!0),i.symbol){var u=c?"Size2-Regular":"Size1-Regular",d="";if("\\oiint"!==i.name&&"\\oiiint"!==i.name||(d=i.name.substr(1),i.name="oiint"===d?"\\iint":"\\iiint"),a=Ke.makeSymbol(i.name,u,"math",t,["mop","op-symbol",c?"large-op":"small-op"]),d.length>0){var p=a.italic,f=Ke.staticSvg(d+"Size"+(c?"2":"1"),t);a=Ke.makeVList({positionType:"individualShift",children:[{type:"elem",elem:a,shift:0},{type:"elem",elem:f,shift:c?.08:0}]},t),i.name="\\"+d,a.classes.unshift("mop"),a.italic=p}}else if(i.body){var m=wt(i.body,t,!0);1===m.length&&m[0]instanceof j?(a=m[0]).classes[0]="mop":a=Ke.makeSpan(["mop"],Ke.tryCombineChars(m),t)}else{for(var g=[],v=1;v<i.name.length;v++)g.push(Ke.mathsym(i.name[v],i.mode,t));a=Ke.makeSpan(["mop"],g,t)}var b=0,y=0;return(a instanceof j||"\\oiint"===i.name||"\\oiiint"===i.name)&&!i.suppressBaseShift&&(b=(a.height-a.depth)/2-t.fontMetrics().axisHeight,y=a.italic),o?en(a,r,n,t,l,y,b):(b&&(a.style.position="relative",a.style.top=b+"em"),a)},nn=function(e,t){var r;if(e.symbol)r=new qt("mo",[_t(e.name,e.mode)]),h.contains(tn,e.name)&&r.setAttribute("largeop","false");else if(e.body)r=new qt("mo",jt(e.body,t));else{r=new qt("mi",[new zt(e.name.slice(1))]);var n=new qt("mo",[_t("⁡","text")]);r=e.parentIsSupSub?new qt("mo",[r,n]):Tt([r,n])}return r},on={"∏":"\\prod","∐":"\\coprod","∑":"\\sum","⋀":"\\bigwedge","⋁":"\\bigvee","⋂":"\\bigcap","⋃":"\\bigcup","⨀":"\\bigodot","⨁":"\\bigoplus","⨂":"\\bigotimes","⨄":"\\biguplus","⨆":"\\bigsqcup"};dt({type:"op",names:["\\coprod","\\bigvee","\\bigwedge","\\biguplus","\\bigcap","\\bigcup","\\intop","\\prod","\\sum","\\bigotimes","\\bigoplus","\\bigodot","\\bigsqcup","\\smallint","∏","∐","∑","⋀","⋁","⋂","⋃","⨀","⨁","⨂","⨄","⨆"],props:{numArgs:0},handler:function(e,t){var r=e.parser,n=e.funcName;return 1===n.length&&(n=on[n]),{type:"op",mode:r.mode,limits:!0,parentIsSupSub:!1,symbol:!0,name:n}},htmlBuilder:rn,mathmlBuilder:nn}),dt({type:"op",names:["\\mathop"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=t[0];return{type:"op",mode:r.mode,limits:!1,parentIsSupSub:!1,symbol:!1,body:ft(n)}},htmlBuilder:rn,mathmlBuilder:nn});var sn={"∫":"\\int","∬":"\\iint","∭":"\\iiint","∮":"\\oint","∯":"\\oiint","∰":"\\oiiint"};dt({type:"op",names:["\\arcsin","\\arccos","\\arctan","\\arctg","\\arcctg","\\arg","\\ch","\\cos","\\cosec","\\cosh","\\cot","\\cotg","\\coth","\\csc","\\ctg","\\cth","\\deg","\\dim","\\exp","\\hom","\\ker","\\lg","\\ln","\\log","\\sec","\\sin","\\sinh","\\sh","\\tan","\\tanh","\\tg","\\th"],props:{numArgs:0},handler:function(e){var t=e.parser,r=e.funcName;return{type:"op",mode:t.mode,limits:!1,parentIsSupSub:!1,symbol:!1,name:r}},htmlBuilder:rn,mathmlBuilder:nn}),dt({type:"op",names:["\\det","\\gcd","\\inf","\\lim","\\max","\\min","\\Pr","\\sup"],props:{numArgs:0},handler:function(e){var t=e.parser,r=e.funcName;return{type:"op",mode:t.mode,limits:!0,parentIsSupSub:!1,symbol:!1,name:r}},htmlBuilder:rn,mathmlBuilder:nn}),dt({type:"op",names:["\\int","\\iint","\\iiint","\\oint","\\oiint","\\oiiint","∫","∬","∭","∮","∯","∰"],props:{numArgs:0},handler:function(e){var t=e.parser,r=e.funcName;return 1===r.length&&(r=sn[r]),{type:"op",mode:t.mode,limits:!1,parentIsSupSub:!1,symbol:!0,name:r}},htmlBuilder:rn,mathmlBuilder:nn});var an=function(e,t){var r,n,i,o,s=!1,a=et(e,"supsub");if(a?(r=a.sup,n=a.sub,i=Qe(a.base,"operatorname"),s=!0):i=Qe(e,"operatorname"),i.body.length>0){for(var l=i.body.map((function(e){var t=e.text;return"string"==typeof t?{type:"textord",mode:e.mode,text:t}:e})),c=wt(l,t.withFont("mathrm"),!0),u=0;u<c.length;u++){var h=c[u];h instanceof j&&(h.text=h.text.replace(/\u2212/,"-").replace(/\u2217/,"*"))}o=Ke.makeSpan(["mop"],c,t)}else o=Ke.makeSpan(["mop"],[],t);return s?en(o,r,n,t,t.style,0,0):o};function ln(e,t,r){for(var n=wt(e,t,!1),i=t.sizeMultiplier/r.sizeMultiplier,o=0;o<n.length;o++){var s=n[o].classes.indexOf("sizing");s<0?Array.prototype.push.apply(n[o].classes,t.sizingClasses(r)):n[o].classes[s+1]==="reset-size"+t.size&&(n[o].classes[s+1]="reset-size"+r.size),n[o].height*=i,n[o].depth*=i}return Ke.makeFragment(n)}dt({type:"operatorname",names:["\\operatorname","\\operatorname*"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName,i=t[0];return{type:"operatorname",mode:r.mode,body:ft(i),alwaysHandleSupSub:"\\operatorname*"===n,limits:!1,parentIsSupSub:!1}},htmlBuilder:an,mathmlBuilder:function(e,t){for(var r=jt(e.body,t.withFont("mathrm")),n=!0,i=0;i<r.length;i++){var o=r[i];if(o instanceof Ot.SpaceNode);else if(o instanceof Ot.MathNode)switch(o.type){case"mi":case"mn":case"ms":case"mspace":case"mtext":break;case"mo":var s=o.children[0];1===o.children.length&&s instanceof Ot.TextNode?s.text=s.text.replace(/\u2212/,"-").replace(/\u2217/,"*"):n=!1;break;default:n=!1}else n=!1}if(n){var a=r.map((function(e){return e.toText()})).join("");r=[new Ot.TextNode(a)]}var l=new Ot.MathNode("mi",r);l.setAttribute("mathvariant","normal");var c=new Ot.MathNode("mo",[_t("⁡","text")]);return e.parentIsSupSub?new Ot.MathNode("mo",[l,c]):Ot.newDocumentFragment([l,c])}}),pt({type:"ordgroup",htmlBuilder:function(e,t){return e.semisimple?Ke.makeFragment(wt(e.body,t,!1)):Ke.makeSpan(["mord"],wt(e.body,t,!0),t)},mathmlBuilder:function(e,t){return Dt(e.body,t,!0)}}),dt({type:"overline",names:["\\overline"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=t[0];return{type:"overline",mode:r.mode,body:n}},htmlBuilder:function(e,t){var r=Ct(e.body,t.havingCrampedStyle()),n=Ke.makeLineSpan("overline-line",t),i=t.fontMetrics().defaultRuleThickness,o=Ke.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:r},{type:"kern",size:3*i},{type:"elem",elem:n},{type:"kern",size:i}]},t);return Ke.makeSpan(["mord","overline"],[o],t)},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mo",[new Ot.TextNode("‾")]);r.setAttribute("stretchy","true");var n=new Ot.MathNode("mover",[Bt(e.body,t),r]);return n.setAttribute("accent","true"),n}}),dt({type:"phantom",names:["\\phantom"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){var r=e.parser,n=t[0];return{type:"phantom",mode:r.mode,body:ft(n)}},htmlBuilder:function(e,t){var r=wt(e.body,t.withPhantom(),!1);return Ke.makeFragment(r)},mathmlBuilder:function(e,t){var r=jt(e.body,t);return new Ot.MathNode("mphantom",r)}}),dt({type:"hphantom",names:["\\hphantom"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){var r=e.parser,n=t[0];return{type:"hphantom",mode:r.mode,body:n}},htmlBuilder:function(e,t){var r=Ke.makeSpan([],[Ct(e.body,t.withPhantom())]);if(r.height=0,r.depth=0,r.children)for(var n=0;n<r.children.length;n++)r.children[n].height=0,r.children[n].depth=0;return r=Ke.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:r}]},t),Ke.makeSpan(["mord"],[r],t)},mathmlBuilder:function(e,t){var r=jt(ft(e.body),t),n=new Ot.MathNode("mphantom",r),i=new Ot.MathNode("mpadded",[n]);return i.setAttribute("height","0px"),i.setAttribute("depth","0px"),i}}),dt({type:"vphantom",names:["\\vphantom"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){var r=e.parser,n=t[0];return{type:"vphantom",mode:r.mode,body:n}},htmlBuilder:function(e,t){var r=Ke.makeSpan(["inner"],[Ct(e.body,t.withPhantom())]),n=Ke.makeSpan(["fix"],[]);return Ke.makeSpan(["mord","rlap"],[r,n],t)},mathmlBuilder:function(e,t){var r=jt(ft(e.body),t),n=new Ot.MathNode("mphantom",r),i=new Ot.MathNode("mpadded",[n]);return i.setAttribute("width","0px"),i}}),dt({type:"raisebox",names:["\\raisebox"],props:{numArgs:2,argTypes:["size","hbox"],allowedInText:!0},handler:function(e,t){var r=e.parser,n=Qe(t[0],"size").value,i=t[1];return{type:"raisebox",mode:r.mode,dy:n,body:i}},htmlBuilder:function(e,t){var r=Ct(e.body,t),n=Pe(e.dy,t);return Ke.makeVList({positionType:"shift",positionData:-n,children:[{type:"elem",elem:r}]},t)},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mpadded",[Bt(e.body,t)]),n=e.dy.number+e.dy.unit;return r.setAttribute("voffset",n),r}}),dt({type:"rule",names:["\\rule"],props:{numArgs:2,numOptionalArgs:1,argTypes:["size","size","size"]},handler:function(e,t,r){var n=e.parser,i=r[0],o=Qe(t[0],"size"),s=Qe(t[1],"size");return{type:"rule",mode:n.mode,shift:i&&Qe(i,"size").value,width:o.value,height:s.value}},htmlBuilder:function(e,t){var r=Ke.makeSpan(["mord","rule"],[],t),n=Pe(e.width,t),i=Pe(e.height,t),o=e.shift?Pe(e.shift,t):0;return r.style.borderRightWidth=n+"em",r.style.borderTopWidth=i+"em",r.style.bottom=o+"em",r.width=n,r.height=i+o,r.depth=-o,r.maxFontSize=1.125*i*t.sizeMultiplier,r},mathmlBuilder:function(e,t){var r=Pe(e.width,t),n=Pe(e.height,t),i=e.shift?Pe(e.shift,t):0,o=t.color&&t.getColor()||"black",s=new Ot.MathNode("mspace");s.setAttribute("mathbackground",o),s.setAttribute("width",r+"em"),s.setAttribute("height",n+"em");var a=new Ot.MathNode("mpadded",[s]);return i>=0?a.setAttribute("height","+"+i+"em"):(a.setAttribute("height",i+"em"),a.setAttribute("depth","+"+-i+"em")),a.setAttribute("voffset",i+"em"),a}});var cn=["\\tiny","\\sixptsize","\\scriptsize","\\footnotesize","\\small","\\normalsize","\\large","\\Large","\\LARGE","\\huge","\\Huge"];dt({type:"sizing",names:cn,props:{numArgs:0,allowedInText:!0},handler:function(e,t){var r=e.breakOnTokenText,n=e.funcName,i=e.parser,o=i.parseExpression(!1,r);return{type:"sizing",mode:i.mode,size:cn.indexOf(n)+1,body:o}},htmlBuilder:function(e,t){var r=t.havingSize(e.size);return ln(e.body,r,t)},mathmlBuilder:function(e,t){var r=t.havingSize(e.size),n=jt(e.body,r),i=new Ot.MathNode("mstyle",n);return i.setAttribute("mathsize",r.sizeMultiplier+"em"),i}}),dt({type:"smash",names:["\\smash"],props:{numArgs:1,numOptionalArgs:1,allowedInText:!0},handler:function(e,t,r){var n=e.parser,i=!1,o=!1,s=r[0]&&Qe(r[0],"ordgroup");if(s)for(var a="",l=0;l<s.body.length;++l)if("t"===(a=s.body[l].text))i=!0;else{if("b"!==a){i=!1,o=!1;break}o=!0}else i=!0,o=!0;var c=t[0];return{type:"smash",mode:n.mode,body:c,smashHeight:i,smashDepth:o}},htmlBuilder:function(e,t){var r=Ke.makeSpan([],[Ct(e.body,t)]);if(!e.smashHeight&&!e.smashDepth)return r;if(e.smashHeight&&(r.height=0,r.children))for(var n=0;n<r.children.length;n++)r.children[n].height=0;if(e.smashDepth&&(r.depth=0,r.children))for(var i=0;i<r.children.length;i++)r.children[i].depth=0;var o=Ke.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:r}]},t);return Ke.makeSpan(["mord"],[o],t)},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mpadded",[Bt(e.body,t)]);return e.smashHeight&&r.setAttribute("height","0px"),e.smashDepth&&r.setAttribute("depth","0px"),r}}),dt({type:"sqrt",names:["\\sqrt"],props:{numArgs:1,numOptionalArgs:1},handler:function(e,t,r){var n=e.parser,i=r[0],o=t[0];return{type:"sqrt",mode:n.mode,body:o,index:i}},htmlBuilder:function(e,t){var r=Ct(e.body,t.havingCrampedStyle());0===r.height&&(r.height=t.fontMetrics().xHeight),r=Ke.wrapFragment(r,t);var n=t.fontMetrics().defaultRuleThickness,i=n;t.style.id<x.TEXT.id&&(i=t.fontMetrics().xHeight);var o=n+i/4,s=r.height+r.depth+o+n,a=yr(s,t),l=a.span,c=a.ruleWidth,u=a.advanceWidth,h=l.height-c;h>r.height+r.depth+o&&(o=(o+h-r.height-r.depth)/2);var d=l.height-r.height-o-c;r.style.paddingLeft=u+"em";var p=Ke.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:r,wrapperClasses:["svg-align"]},{type:"kern",size:-(r.height+d)},{type:"elem",elem:l},{type:"kern",size:c}]},t);if(e.index){var f=t.havingStyle(x.SCRIPTSCRIPT),m=Ct(e.index,f,t),g=.6*(p.height-p.depth),v=Ke.makeVList({positionType:"shift",positionData:-g,children:[{type:"elem",elem:m}]},t),b=Ke.makeSpan(["root"],[v]);return Ke.makeSpan(["mord","sqrt"],[b,p],t)}return Ke.makeSpan(["mord","sqrt"],[p],t)},mathmlBuilder:function(e,t){var r=e.body,n=e.index;return n?new Ot.MathNode("mroot",[Bt(r,t),Bt(n,t)]):new Ot.MathNode("msqrt",[Bt(r,t)])}});var un={display:x.DISPLAY,text:x.TEXT,script:x.SCRIPT,scriptscript:x.SCRIPTSCRIPT};dt({type:"styling",names:["\\displaystyle","\\textstyle","\\scriptstyle","\\scriptscriptstyle"],props:{numArgs:0,allowedInText:!0},handler:function(e,t){var r=e.breakOnTokenText,n=e.funcName,i=e.parser,o=i.parseExpression(!0,r),s=n.slice(1,n.length-5);return{type:"styling",mode:i.mode,style:s,body:o}},htmlBuilder:function(e,t){var r=un[e.style],n=t.havingStyle(r).withFont("");return ln(e.body,n,t)},mathmlBuilder:function(e,t){var r=un[e.style],n=t.havingStyle(r),i=jt(e.body,n),o=new Ot.MathNode("mstyle",i),s={display:["0","true"],text:["0","false"],script:["1","false"],scriptscript:["2","false"]}[e.style];return o.setAttribute("scriptlevel",s[0]),o.setAttribute("displaystyle",s[1]),o}}),pt({type:"supsub",htmlBuilder:function(e,t){var r=function(e,t){var r=e.base;return r?"op"===r.type?r.limits&&(t.style.size===x.DISPLAY.size||r.alwaysHandleSupSub)?rn:null:"operatorname"===r.type?r.alwaysHandleSupSub&&(t.style.size===x.DISPLAY.size||r.limits)?an:null:"accent"===r.type?h.isCharacterBox(r.base)?Xt:null:"horizBrace"===r.type&&!e.sub===r.isOver?Jr:null:null}(e,t);if(r)return r(e,t);var n,i,o,s=e.base,a=e.sup,l=e.sub,c=Ct(s,t),u=t.fontMetrics(),d=0,p=0,f=s&&h.isCharacterBox(s);if(a){var m=t.havingStyle(t.style.sup());n=Ct(a,m,t),f||(d=c.height-m.fontMetrics().supDrop*m.sizeMultiplier/t.sizeMultiplier)}if(l){var g=t.havingStyle(t.style.sub());i=Ct(l,g,t),f||(p=c.depth+g.fontMetrics().subDrop*g.sizeMultiplier/t.sizeMultiplier)}o=t.style===x.DISPLAY?u.sup1:t.style.cramped?u.sup3:u.sup2;var v,b=t.sizeMultiplier,y=.5/u.ptPerEm/b+"em",w=null;if(i){var k=e.base&&"op"===e.base.type&&e.base.name&&("\\oiint"===e.base.name||"\\oiiint"===e.base.name);(c instanceof j||k)&&(w=-c.italic+"em")}if(n&&i){d=Math.max(d,o,n.depth+.25*u.xHeight),p=Math.max(p,u.sub2);var S=4*u.defaultRuleThickness;if(d-n.depth-(i.height-p)<S){p=S-(d-n.depth)+i.height;var A=.8*u.xHeight-(d-n.depth);A>0&&(d+=A,p-=A)}var M=[{type:"elem",elem:i,shift:p,marginRight:y,marginLeft:w},{type:"elem",elem:n,shift:-d,marginRight:y}];v=Ke.makeVList({positionType:"individualShift",children:M},t)}else if(i){p=Math.max(p,u.sub1,i.height-.8*u.xHeight);var C=[{type:"elem",elem:i,marginLeft:w,marginRight:y}];v=Ke.makeVList({positionType:"shift",positionData:p,children:C},t)}else{if(!n)throw new Error("supsub must have either sup or sub.");d=Math.max(d,o,n.depth+.25*u.xHeight),v=Ke.makeVList({positionType:"shift",positionData:-d,children:[{type:"elem",elem:n,marginRight:y}]},t)}var N=At(c,"right")||"mord";return Ke.makeSpan([N],[c,Ke.makeSpan(["msupsub"],[v])],t)},mathmlBuilder:function(e,t){var r,n=!1,i=et(e.base,"horizBrace");i&&!!e.sup===i.isOver&&(n=!0,r=i.isOver),!e.base||"op"!==e.base.type&&"operatorname"!==e.base.type||(e.base.parentIsSupSub=!0);var o,s=[Bt(e.base,t)];if(e.sub&&s.push(Bt(e.sub,t)),e.sup&&s.push(Bt(e.sup,t)),n)o=r?"mover":"munder";else if(e.sub)if(e.sup){var a=e.base;o=a&&"op"===a.type&&a.limits&&t.style===x.DISPLAY||a&&"operatorname"===a.type&&a.alwaysHandleSupSub&&(t.style===x.DISPLAY||a.limits)?"munderover":"msubsup"}else{var l=e.base;o=l&&"op"===l.type&&l.limits&&(t.style===x.DISPLAY||l.alwaysHandleSupSub)||l&&"operatorname"===l.type&&l.alwaysHandleSupSub&&(l.limits||t.style===x.DISPLAY)?"munder":"msub"}else{var c=e.base;o=c&&"op"===c.type&&c.limits&&(t.style===x.DISPLAY||c.alwaysHandleSupSub)||c&&"operatorname"===c.type&&c.alwaysHandleSupSub&&(c.limits||t.style===x.DISPLAY)?"mover":"msup"}return new Ot.MathNode(o,s)}}),pt({type:"atom",htmlBuilder:function(e,t){return Ke.mathsym(e.text,e.mode,t,["m"+e.family])},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mo",[_t(e.text,e.mode)]);if("bin"===e.family){var n=Lt(e,t);"bold-italic"===n&&r.setAttribute("mathvariant",n)}else"punct"===e.family?r.setAttribute("separator","true"):"open"!==e.family&&"close"!==e.family||r.setAttribute("stretchy","false");return r}});var hn={mi:"italic",mn:"normal",mtext:"normal"};pt({type:"mathord",htmlBuilder:function(e,t){return Ke.makeOrd(e,t,"mathord")},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mi",[_t(e.text,e.mode,t)]),n=Lt(e,t)||"italic";return n!==hn[r.type]&&r.setAttribute("mathvariant",n),r}}),pt({type:"textord",htmlBuilder:function(e,t){return Ke.makeOrd(e,t,"textord")},mathmlBuilder:function(e,t){var r,n=_t(e.text,e.mode,t),i=Lt(e,t)||"normal";return r="text"===e.mode?new Ot.MathNode("mtext",[n]):/[0-9]/.test(e.text)?new Ot.MathNode("mn",[n]):"\\prime"===e.text?new Ot.MathNode("mo",[n]):new Ot.MathNode("mi",[n]),i!==hn[r.type]&&r.setAttribute("mathvariant",i),r}});var dn={"\\nobreak":"nobreak","\\allowbreak":"allowbreak"},pn={" ":{},"\\ ":{},"~":{className:"nobreak"},"\\space":{},"\\nobreakspace":{className:"nobreak"}};pt({type:"spacing",htmlBuilder:function(e,t){if(pn.hasOwnProperty(e.text)){var r=pn[e.text].className||"";if("text"===e.mode){var n=Ke.makeOrd(e,t,"textord");return n.classes.push(r),n}return Ke.makeSpan(["mspace",r],[Ke.mathsym(e.text,e.mode,t)],t)}if(dn.hasOwnProperty(e.text))return Ke.makeSpan(["mspace",dn[e.text]],[],t);throw new s('Unknown type of space "'+e.text+'"')},mathmlBuilder:function(e,t){if(!pn.hasOwnProperty(e.text)){if(dn.hasOwnProperty(e.text))return new Ot.MathNode("mspace");throw new s('Unknown type of space "'+e.text+'"')}return new Ot.MathNode("mtext",[new Ot.TextNode(" ")])}});var fn=function(){var e=new Ot.MathNode("mtd",[]);return e.setAttribute("width","50%"),e};pt({type:"tag",mathmlBuilder:function(e,t){var r=new Ot.MathNode("mtable",[new Ot.MathNode("mtr",[fn(),new Ot.MathNode("mtd",[Dt(e.body,t)]),fn(),new Ot.MathNode("mtd",[Dt(e.tag,t)])])]);return r.setAttribute("width","100%"),r}});var mn={"\\text":void 0,"\\textrm":"textrm","\\textsf":"textsf","\\texttt":"texttt","\\textnormal":"textrm"},gn={"\\textbf":"textbf","\\textmd":"textmd"},vn={"\\textit":"textit","\\textup":"textup"},bn=function(e,t){var r=e.font;return r?mn[r]?t.withTextFontFamily(mn[r]):gn[r]?t.withTextFontWeight(gn[r]):t.withTextFontShape(vn[r]):t};dt({type:"text",names:["\\text","\\textrm","\\textsf","\\texttt","\\textnormal","\\textbf","\\textmd","\\textit","\\textup"],props:{numArgs:1,argTypes:["text"],greediness:2,allowedInText:!0},handler:function(e,t){var r=e.parser,n=e.funcName,i=t[0];return{type:"text",mode:r.mode,body:ft(i),font:n}},htmlBuilder:function(e,t){var r=bn(e,t),n=wt(e.body,r,!0);return Ke.makeSpan(["mord","text"],Ke.tryCombineChars(n),r)},mathmlBuilder:function(e,t){var r=bn(e,t);return Dt(e.body,r)}}),dt({type:"underline",names:["\\underline"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){return{type:"underline",mode:e.parser.mode,body:t[0]}},htmlBuilder:function(e,t){var r=Ct(e.body,t),n=Ke.makeLineSpan("underline-line",t),i=t.fontMetrics().defaultRuleThickness,o=Ke.makeVList({positionType:"top",positionData:r.height,children:[{type:"kern",size:i},{type:"elem",elem:n},{type:"kern",size:3*i},{type:"elem",elem:r}]},t);return Ke.makeSpan(["mord","underline"],[o],t)},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mo",[new Ot.TextNode("‾")]);r.setAttribute("stretchy","true");var n=new Ot.MathNode("munder",[Bt(e.body,t),r]);return n.setAttribute("accentunder","true"),n}}),dt({type:"verb",names:["\\verb"],props:{numArgs:0,allowedInText:!0},handler:function(e,t,r){throw new s("\\verb ended by end of line instead of matching delimiter")},htmlBuilder:function(e,t){for(var r=yn(e),n=[],i=t.havingStyle(t.style.text()),o=0;o<r.length;o++){var s=r[o];"~"===s&&(s="\\textasciitilde"),n.push(Ke.makeSymbol(s,"Typewriter-Regular",e.mode,i,["mord","texttt"]))}return Ke.makeSpan(["mord","text"].concat(i.sizingClasses(t)),Ke.tryCombineChars(n),i)},mathmlBuilder:function(e,t){var r=new Ot.TextNode(yn(e)),n=new Ot.MathNode("mtext",[r]);return n.setAttribute("mathvariant","monospace"),n}});var yn=function(e){return e.body.replace(/ /g,e.star?"␣":" ")},wn=ct,xn=new RegExp("^(\\\\[a-zA-Z@]+)[ \r\n\t]*$"),kn=new RegExp("[̀-ͯ]+$"),Sn=function(){function e(e,t){this.input=void 0,this.settings=void 0,this.tokenRegex=void 0,this.catcodes=void 0,this.input=e,this.settings=t,this.tokenRegex=new RegExp("([ \r\n\t]+)|([!-\\[\\]-‧‪-퟿豈-￿][̀-ͯ]*|[\ud800-\udbff][\udc00-\udfff][̀-ͯ]*|\\\\verb\\*([^]).*?\\3|\\\\verb([^*a-zA-Z]).*?\\4|\\\\operatorname\\*|\\\\[a-zA-Z@]+[ \r\n\t]*|\\\\[^\ud800-\udfff])","g"),this.catcodes={"%":14}}var t=e.prototype;return t.setCatcode=function(e,t){this.catcodes[e]=t},t.lex=function(){var e=this.input,t=this.tokenRegex.lastIndex;if(t===e.length)return new i("EOF",new n(this,t,t));var r=this.tokenRegex.exec(e);if(null===r||r.index!==t)throw new s("Unexpected character: '"+e[t]+"'",new i(e[t],new n(this,t,t+1)));var o=r[2]||" ";if(14===this.catcodes[o]){var a=e.indexOf("\n",this.tokenRegex.lastIndex);return-1===a?(this.tokenRegex.lastIndex=e.length,this.settings.reportNonstrict("commentAtEnd","% comment has no terminating newline; LaTeX would fail because of commenting the end of math mode (e.g. $)")):this.tokenRegex.lastIndex=a+1,this.lex()}var l=o.match(xn);return l&&(o=l[1]),new i(o,new n(this,t,this.tokenRegex.lastIndex))},e}(),An=function(){function e(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.current=void 0,this.builtins=void 0,this.undefStack=void 0,this.current=t,this.builtins=e,this.undefStack=[]}var t=e.prototype;return t.beginGroup=function(){this.undefStack.push({})},t.endGroup=function(){if(0===this.undefStack.length)throw new s("Unbalanced namespace destruction: attempt to pop global namespace; please report this as a bug");var e=this.undefStack.pop();for(var t in e)e.hasOwnProperty(t)&&(void 0===e[t]?delete this.current[t]:this.current[t]=e[t])},t.has=function(e){return this.current.hasOwnProperty(e)||this.builtins.hasOwnProperty(e)},t.get=function(e){return this.current.hasOwnProperty(e)?this.current[e]:this.builtins[e]},t.set=function(e,t,r){if(void 0===r&&(r=!1),r){for(var n=0;n<this.undefStack.length;n++)delete this.undefStack[n][e];this.undefStack.length>0&&(this.undefStack[this.undefStack.length-1][e]=t)}else{var i=this.undefStack[this.undefStack.length-1];i&&!i.hasOwnProperty(e)&&(i[e]=this.current[e])}this.current[e]=t},e}(),Mn={},Cn=Mn;function Nn(e,t){Mn[e]=t}Nn("\\@firstoftwo",(function(e){return{tokens:e.consumeArgs(2)[0],numArgs:0}})),Nn("\\@secondoftwo",(function(e){return{tokens:e.consumeArgs(2)[1],numArgs:0}})),Nn("\\@ifnextchar",(function(e){var t=e.consumeArgs(3),r=e.future();return 1===t[0].length&&t[0][0].text===r.text?{tokens:t[1],numArgs:0}:{tokens:t[2],numArgs:0}})),Nn("\\@ifstar","\\@ifnextchar *{\\@firstoftwo{#1}}"),Nn("\\TextOrMath",(function(e){var t=e.consumeArgs(2);return"text"===e.mode?{tokens:t[0],numArgs:0}:{tokens:t[1],numArgs:0}}));var En={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,a:10,A:10,b:11,B:11,c:12,C:12,d:13,D:13,e:14,E:14,f:15,F:15};Nn("\\char",(function(e){var t,r=e.popToken(),n="";if("'"===r.text)t=8,r=e.popToken();else if('"'===r.text)t=16,r=e.popToken();else if("`"===r.text)if("\\"===(r=e.popToken()).text[0])n=r.text.charCodeAt(1);else{if("EOF"===r.text)throw new s("\\char` missing argument");n=r.text.charCodeAt(0)}else t=10;if(t){if(null==(n=En[r.text])||n>=t)throw new s("Invalid base-"+t+" digit "+r.text);for(var i;null!=(i=En[e.future().text])&&i<t;)n*=t,n+=i,e.popToken()}return"\\@char{"+n+"}"}));var Tn=function(e,t){var r=e.consumeArgs(1)[0];if(1!==r.length)throw new s("\\gdef's first argument must be a macro name");var n=r[0].text,i=0;for(r=e.consumeArgs(1)[0];1===r.length&&"#"===r[0].text;){if(1!==(r=e.consumeArgs(1)[0]).length)throw new s('Invalid argument number length "'+r.length+'"');if(!/^[1-9]$/.test(r[0].text))throw new s('Invalid argument number "'+r[0].text+'"');if(i++,parseInt(r[0].text)!==i)throw new s('Argument number "'+r[0].text+'" out of order');r=e.consumeArgs(1)[0]}return e.macros.set(n,{tokens:r,numArgs:i},t),""};Nn("\\gdef",(function(e){return Tn(e,!0)})),Nn("\\def",(function(e){return Tn(e,!1)})),Nn("\\global",(function(e){var t=e.consumeArgs(1)[0];if(1!==t.length)throw new s("Invalid command after \\global");var r=t[0].text;if("\\def"===r)return Tn(e,!0);throw new s("Invalid command '"+r+"' after \\global")}));var qn=function(e,t,r){var n=e.consumeArgs(1)[0];if(1!==n.length)throw new s("\\newcommand's first argument must be a macro name");var i=n[0].text,o=e.isDefined(i);if(o&&!t)throw new s("\\newcommand{"+i+"} attempting to redefine "+i+"; use \\renewcommand");if(!o&&!r)throw new s("\\renewcommand{"+i+"} when command "+i+" does not yet exist; use \\newcommand");var a=0;if(1===(n=e.consumeArgs(1)[0]).length&&"["===n[0].text){for(var l="",c=e.expandNextToken();"]"!==c.text&&"EOF"!==c.text;)l+=c.text,c=e.expandNextToken();if(!l.match(/^\s*[0-9]+\s*$/))throw new s("Invalid number of arguments: "+l);a=parseInt(l),n=e.consumeArgs(1)[0]}return e.macros.set(i,{tokens:n,numArgs:a}),""};Nn("\\newcommand",(function(e){return qn(e,!1,!0)})),Nn("\\renewcommand",(function(e){return qn(e,!0,!1)})),Nn("\\providecommand",(function(e){return qn(e,!0,!0)})),Nn("\\bgroup","{"),Nn("\\egroup","}"),Nn("\\lq","`"),Nn("\\rq","'"),Nn("\\aa","\\r a"),Nn("\\AA","\\r A"),Nn("\\textcopyright","\\html@mathml{\\textcircled{c}}{\\char`©}"),Nn("\\copyright","\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}"),Nn("\\textregistered","\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`®}"),Nn("ℬ","\\mathscr{B}"),Nn("ℰ","\\mathscr{E}"),Nn("ℱ","\\mathscr{F}"),Nn("ℋ","\\mathscr{H}"),Nn("ℐ","\\mathscr{I}"),Nn("ℒ","\\mathscr{L}"),Nn("ℳ","\\mathscr{M}"),Nn("ℛ","\\mathscr{R}"),Nn("ℭ","\\mathfrak{C}"),Nn("ℌ","\\mathfrak{H}"),Nn("ℨ","\\mathfrak{Z}"),Nn("\\Bbbk","\\Bbb{k}"),Nn("·","\\cdotp"),Nn("\\llap","\\mathllap{\\textrm{#1}}"),Nn("\\rlap","\\mathrlap{\\textrm{#1}}"),Nn("\\clap","\\mathclap{\\textrm{#1}}"),Nn("\\not",'\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}'),Nn("\\neq","\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`≠}}"),Nn("\\ne","\\neq"),Nn("≠","\\neq"),Nn("\\notin","\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}{\\mathrel{\\char`∉}}"),Nn("∉","\\notin"),Nn("≘","\\html@mathml{\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}}{\\mathrel{\\char`≘}}"),Nn("≙","\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`≘}}"),Nn("≚","\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`≚}}"),Nn("≛","\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}{\\mathrel{\\char`≛}}"),Nn("≝","\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}{\\mathrel{\\char`≝}}"),Nn("≞","\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}{\\mathrel{\\char`≞}}"),Nn("≟","\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`≟}}"),Nn("⟂","\\perp"),Nn("‼","\\mathclose{!\\mkern-0.8mu!}"),Nn("∌","\\notni"),Nn("⌜","\\ulcorner"),Nn("⌝","\\urcorner"),Nn("⌞","\\llcorner"),Nn("⌟","\\lrcorner"),Nn("©","\\copyright"),Nn("®","\\textregistered"),Nn("️","\\textregistered"),Nn("\\vdots","\\mathord{\\varvdots\\rule{0pt}{15pt}}"),Nn("⋮","\\vdots"),Nn("\\varGamma","\\mathit{\\Gamma}"),Nn("\\varDelta","\\mathit{\\Delta}"),Nn("\\varTheta","\\mathit{\\Theta}"),Nn("\\varLambda","\\mathit{\\Lambda}"),Nn("\\varXi","\\mathit{\\Xi}"),Nn("\\varPi","\\mathit{\\Pi}"),Nn("\\varSigma","\\mathit{\\Sigma}"),Nn("\\varUpsilon","\\mathit{\\Upsilon}"),Nn("\\varPhi","\\mathit{\\Phi}"),Nn("\\varPsi","\\mathit{\\Psi}"),Nn("\\varOmega","\\mathit{\\Omega}"),Nn("\\substack","\\begin{subarray}{c}#1\\end{subarray}"),Nn("\\colon","\\nobreak\\mskip2mu\\mathpunct{}\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu"),Nn("\\boxed","\\fbox{$\\displaystyle{#1}$}"),Nn("\\iff","\\DOTSB\\;\\Longleftrightarrow\\;"),Nn("\\implies","\\DOTSB\\;\\Longrightarrow\\;"),Nn("\\impliedby","\\DOTSB\\;\\Longleftarrow\\;");var zn={",":"\\dotsc","\\not":"\\dotsb","+":"\\dotsb","=":"\\dotsb","<":"\\dotsb",">":"\\dotsb","-":"\\dotsb","*":"\\dotsb",":":"\\dotsb","\\DOTSB":"\\dotsb","\\coprod":"\\dotsb","\\bigvee":"\\dotsb","\\bigwedge":"\\dotsb","\\biguplus":"\\dotsb","\\bigcap":"\\dotsb","\\bigcup":"\\dotsb","\\prod":"\\dotsb","\\sum":"\\dotsb","\\bigotimes":"\\dotsb","\\bigoplus":"\\dotsb","\\bigodot":"\\dotsb","\\bigsqcup":"\\dotsb","\\And":"\\dotsb","\\longrightarrow":"\\dotsb","\\Longrightarrow":"\\dotsb","\\longleftarrow":"\\dotsb","\\Longleftarrow":"\\dotsb","\\longleftrightarrow":"\\dotsb","\\Longleftrightarrow":"\\dotsb","\\mapsto":"\\dotsb","\\longmapsto":"\\dotsb","\\hookrightarrow":"\\dotsb","\\doteq":"\\dotsb","\\mathbin":"\\dotsb","\\mathrel":"\\dotsb","\\relbar":"\\dotsb","\\Relbar":"\\dotsb","\\xrightarrow":"\\dotsb","\\xleftarrow":"\\dotsb","\\DOTSI":"\\dotsi","\\int":"\\dotsi","\\oint":"\\dotsi","\\iint":"\\dotsi","\\iiint":"\\dotsi","\\iiiint":"\\dotsi","\\idotsint":"\\dotsi","\\DOTSX":"\\dotsx"};Nn("\\dots",(function(e){var t="\\dotso",r=e.expandAfterFuture().text;return r in zn?t=zn[r]:("\\not"===r.substr(0,4)||r in Y.math&&h.contains(["bin","rel"],Y.math[r].group))&&(t="\\dotsb"),t}));var On={")":!0,"]":!0,"\\rbrack":!0,"\\}":!0,"\\rbrace":!0,"\\rangle":!0,"\\rceil":!0,"\\rfloor":!0,"\\rgroup":!0,"\\rmoustache":!0,"\\right":!0,"\\bigr":!0,"\\biggr":!0,"\\Bigr":!0,"\\Biggr":!0,$:!0,";":!0,".":!0,",":!0};Nn("\\dotso",(function(e){return e.future().text in On?"\\ldots\\,":"\\ldots"})),Nn("\\dotsc",(function(e){var t=e.future().text;return t in On&&","!==t?"\\ldots\\,":"\\ldots"})),Nn("\\cdots",(function(e){return e.future().text in On?"\\@cdots\\,":"\\@cdots"})),Nn("\\dotsb","\\cdots"),Nn("\\dotsm","\\cdots"),Nn("\\dotsi","\\!\\cdots"),Nn("\\dotsx","\\ldots\\,"),Nn("\\DOTSI","\\relax"),Nn("\\DOTSB","\\relax"),Nn("\\DOTSX","\\relax"),Nn("\\tmspace","\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax"),Nn("\\,","\\tmspace+{3mu}{.1667em}"),Nn("\\thinspace","\\,"),Nn("\\>","\\mskip{4mu}"),Nn("\\:","\\tmspace+{4mu}{.2222em}"),Nn("\\medspace","\\:"),Nn("\\;","\\tmspace+{5mu}{.2777em}"),Nn("\\thickspace","\\;"),Nn("\\!","\\tmspace-{3mu}{.1667em}"),Nn("\\negthinspace","\\!"),Nn("\\negmedspace","\\tmspace-{4mu}{.2222em}"),Nn("\\negthickspace","\\tmspace-{5mu}{.277em}"),Nn("\\enspace","\\kern.5em "),Nn("\\enskip","\\hskip.5em\\relax"),Nn("\\quad","\\hskip1em\\relax"),Nn("\\qquad","\\hskip2em\\relax"),Nn("\\tag","\\@ifstar\\tag@literal\\tag@paren"),Nn("\\tag@paren","\\tag@literal{({#1})}"),Nn("\\tag@literal",(function(e){if(e.macros.get("\\df@tag"))throw new s("Multiple \\tag");return"\\gdef\\df@tag{\\text{#1}}"})),Nn("\\bmod","\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}\\mathbin{\\rm mod}\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}"),Nn("\\pod","\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)"),Nn("\\pmod","\\pod{{\\rm mod}\\mkern6mu#1}"),Nn("\\mod","\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}{\\rm mod}\\,\\,#1"),Nn("\\pmb","\\html@mathml{\\@binrel{#1}{\\mathrlap{#1}\\kern0.5px#1}}{\\mathbf{#1}}"),Nn("\\\\","\\newline"),Nn("\\TeX","\\textrm{\\html@mathml{T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX}{TeX}}");var _n=F["Main-Regular"]["T".charCodeAt(0)][1]-.7*F["Main-Regular"]["A".charCodeAt(0)][1]+"em";Nn("\\LaTeX","\\textrm{\\html@mathml{L\\kern-.36em\\raisebox{"+_n+"}{\\scriptstyle A}\\kern-.15em\\TeX}{LaTeX}}"),Nn("\\KaTeX","\\textrm{\\html@mathml{K\\kern-.17em\\raisebox{"+_n+"}{\\scriptstyle A}\\kern-.15em\\TeX}{KaTeX}}"),Nn("\\hspace","\\@ifstar\\@hspacer\\@hspace"),Nn("\\@hspace","\\hskip #1\\relax"),Nn("\\@hspacer","\\rule{0pt}{0pt}\\hskip #1\\relax"),Nn("\\ordinarycolon",":"),Nn("\\vcentcolon","\\mathrel{\\mathop\\ordinarycolon}"),Nn("\\dblcolon",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}{\\mathop{\\char"2237}}'),Nn("\\coloneqq",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2254}}'),Nn("\\Coloneqq",'\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2237\\char"3d}}'),Nn("\\coloneq",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"3a\\char"2212}}'),Nn("\\Coloneq",'\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"2237\\char"2212}}'),Nn("\\eqqcolon",'\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2255}}'),Nn("\\Eqqcolon",'\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"3d\\char"2237}}'),Nn("\\eqcolon",'\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2239}}'),Nn("\\Eqcolon",'\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"2212\\char"2237}}'),Nn("\\colonapprox",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"3a\\char"2248}}'),Nn("\\Colonapprox",'\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"2237\\char"2248}}'),Nn("\\colonsim",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"3a\\char"223c}}'),Nn("\\Colonsim",'\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"2237\\char"223c}}'),Nn("∷","\\dblcolon"),Nn("∹","\\eqcolon"),Nn("≔","\\coloneqq"),Nn("≕","\\eqqcolon"),Nn("⩴","\\Coloneqq"),Nn("\\ratio","\\vcentcolon"),Nn("\\coloncolon","\\dblcolon"),Nn("\\colonequals","\\coloneqq"),Nn("\\coloncolonequals","\\Coloneqq"),Nn("\\equalscolon","\\eqqcolon"),Nn("\\equalscoloncolon","\\Eqqcolon"),Nn("\\colonminus","\\coloneq"),Nn("\\coloncolonminus","\\Coloneq"),Nn("\\minuscolon","\\eqcolon"),Nn("\\minuscoloncolon","\\Eqcolon"),Nn("\\coloncolonapprox","\\Colonapprox"),Nn("\\coloncolonsim","\\Colonsim"),Nn("\\simcolon","\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}"),Nn("\\simcoloncolon","\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}"),Nn("\\approxcolon","\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}"),Nn("\\approxcoloncolon","\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}"),Nn("\\notni","\\html@mathml{\\not\\ni}{\\mathrel{\\char`∌}}"),Nn("\\limsup","\\DOTSB\\operatorname*{lim\\,sup}"),Nn("\\liminf","\\DOTSB\\operatorname*{lim\\,inf}"),Nn("\\gvertneqq","\\html@mathml{\\@gvertneqq}{≩}"),Nn("\\lvertneqq","\\html@mathml{\\@lvertneqq}{≨}"),Nn("\\ngeqq","\\html@mathml{\\@ngeqq}{≱}"),Nn("\\ngeqslant","\\html@mathml{\\@ngeqslant}{≱}"),Nn("\\nleqq","\\html@mathml{\\@nleqq}{≰}"),Nn("\\nleqslant","\\html@mathml{\\@nleqslant}{≰}"),Nn("\\nshortmid","\\html@mathml{\\@nshortmid}{∤}"),Nn("\\nshortparallel","\\html@mathml{\\@nshortparallel}{∦}"),Nn("\\nsubseteqq","\\html@mathml{\\@nsubseteqq}{⊈}"),Nn("\\nsupseteqq","\\html@mathml{\\@nsupseteqq}{⊉}"),Nn("\\varsubsetneq","\\html@mathml{\\@varsubsetneq}{⊊}"),Nn("\\varsubsetneqq","\\html@mathml{\\@varsubsetneqq}{⫋}"),Nn("\\varsupsetneq","\\html@mathml{\\@varsupsetneq}{⊋}"),Nn("\\varsupsetneqq","\\html@mathml{\\@varsupsetneqq}{⫌}"),Nn("\\llbracket","\\html@mathml{\\mathopen{[\\mkern-3.2mu[}}{\\mathopen{\\char`⟦}}"),Nn("\\rrbracket","\\html@mathml{\\mathclose{]\\mkern-3.2mu]}}{\\mathclose{\\char`⟧}}"),Nn("⟦","\\llbracket"),Nn("⟧","\\rrbracket"),Nn("\\lBrace","\\html@mathml{\\mathopen{\\{\\mkern-3.2mu[}}{\\mathopen{\\char`⦃}}"),Nn("\\rBrace","\\html@mathml{\\mathclose{]\\mkern-3.2mu\\}}}{\\mathclose{\\char`⦄}}"),Nn("⦃","\\lBrace"),Nn("⦄","\\rBrace"),Nn("\\darr","\\downarrow"),Nn("\\dArr","\\Downarrow"),Nn("\\Darr","\\Downarrow"),Nn("\\lang","\\langle"),Nn("\\rang","\\rangle"),Nn("\\uarr","\\uparrow"),Nn("\\uArr","\\Uparrow"),Nn("\\Uarr","\\Uparrow"),Nn("\\N","\\mathbb{N}"),Nn("\\R","\\mathbb{R}"),Nn("\\Z","\\mathbb{Z}"),Nn("\\alef","\\aleph"),Nn("\\alefsym","\\aleph"),Nn("\\Alpha","\\mathrm{A}"),Nn("\\Beta","\\mathrm{B}"),Nn("\\bull","\\bullet"),Nn("\\Chi","\\mathrm{X}"),Nn("\\clubs","\\clubsuit"),Nn("\\cnums","\\mathbb{C}"),Nn("\\Complex","\\mathbb{C}"),Nn("\\Dagger","\\ddagger"),Nn("\\diamonds","\\diamondsuit"),Nn("\\empty","\\emptyset"),Nn("\\Epsilon","\\mathrm{E}"),Nn("\\Eta","\\mathrm{H}"),Nn("\\exist","\\exists"),Nn("\\harr","\\leftrightarrow"),Nn("\\hArr","\\Leftrightarrow"),Nn("\\Harr","\\Leftrightarrow"),Nn("\\hearts","\\heartsuit"),Nn("\\image","\\Im"),Nn("\\infin","\\infty"),Nn("\\Iota","\\mathrm{I}"),Nn("\\isin","\\in"),Nn("\\Kappa","\\mathrm{K}"),Nn("\\larr","\\leftarrow"),Nn("\\lArr","\\Leftarrow"),Nn("\\Larr","\\Leftarrow"),Nn("\\lrarr","\\leftrightarrow"),Nn("\\lrArr","\\Leftrightarrow"),Nn("\\Lrarr","\\Leftrightarrow"),Nn("\\Mu","\\mathrm{M}"),Nn("\\natnums","\\mathbb{N}"),Nn("\\Nu","\\mathrm{N}"),Nn("\\Omicron","\\mathrm{O}"),Nn("\\plusmn","\\pm"),Nn("\\rarr","\\rightarrow"),Nn("\\rArr","\\Rightarrow"),Nn("\\Rarr","\\Rightarrow"),Nn("\\real","\\Re"),Nn("\\reals","\\mathbb{R}"),Nn("\\Reals","\\mathbb{R}"),Nn("\\Rho","\\mathrm{P}"),Nn("\\sdot","\\cdot"),Nn("\\sect","\\S"),Nn("\\spades","\\spadesuit"),Nn("\\sub","\\subset"),Nn("\\sube","\\subseteq"),Nn("\\supe","\\supseteq"),Nn("\\Tau","\\mathrm{T}"),Nn("\\thetasym","\\vartheta"),Nn("\\weierp","\\wp"),Nn("\\Zeta","\\mathrm{Z}"),Nn("\\argmin","\\DOTSB\\operatorname*{arg\\,min}"),Nn("\\argmax","\\DOTSB\\operatorname*{arg\\,max}"),Nn("\\plim","\\DOTSB\\mathop{\\operatorname{plim}}\\limits"),Nn("\\blue","\\textcolor{##6495ed}{#1}"),Nn("\\orange","\\textcolor{##ffa500}{#1}"),Nn("\\pink","\\textcolor{##ff00af}{#1}"),Nn("\\red","\\textcolor{##df0030}{#1}"),Nn("\\green","\\textcolor{##28ae7b}{#1}"),Nn("\\gray","\\textcolor{gray}{#1}"),Nn("\\purple","\\textcolor{##9d38bd}{#1}"),Nn("\\blueA","\\textcolor{##ccfaff}{#1}"),Nn("\\blueB","\\textcolor{##80f6ff}{#1}"),Nn("\\blueC","\\textcolor{##63d9ea}{#1}"),Nn("\\blueD","\\textcolor{##11accd}{#1}"),Nn("\\blueE","\\textcolor{##0c7f99}{#1}"),Nn("\\tealA","\\textcolor{##94fff5}{#1}"),Nn("\\tealB","\\textcolor{##26edd5}{#1}"),Nn("\\tealC","\\textcolor{##01d1c1}{#1}"),Nn("\\tealD","\\textcolor{##01a995}{#1}"),Nn("\\tealE","\\textcolor{##208170}{#1}"),Nn("\\greenA","\\textcolor{##b6ffb0}{#1}"),Nn("\\greenB","\\textcolor{##8af281}{#1}"),Nn("\\greenC","\\textcolor{##74cf70}{#1}"),Nn("\\greenD","\\textcolor{##1fab54}{#1}"),Nn("\\greenE","\\textcolor{##0d923f}{#1}"),Nn("\\goldA","\\textcolor{##ffd0a9}{#1}"),Nn("\\goldB","\\textcolor{##ffbb71}{#1}"),Nn("\\goldC","\\textcolor{##ff9c39}{#1}"),Nn("\\goldD","\\textcolor{##e07d10}{#1}"),Nn("\\goldE","\\textcolor{##a75a05}{#1}"),Nn("\\redA","\\textcolor{##fca9a9}{#1}"),Nn("\\redB","\\textcolor{##ff8482}{#1}"),Nn("\\redC","\\textcolor{##f9685d}{#1}"),Nn("\\redD","\\textcolor{##e84d39}{#1}"),Nn("\\redE","\\textcolor{##bc2612}{#1}"),Nn("\\maroonA","\\textcolor{##ffbde0}{#1}"),Nn("\\maroonB","\\textcolor{##ff92c6}{#1}"),Nn("\\maroonC","\\textcolor{##ed5fa6}{#1}"),Nn("\\maroonD","\\textcolor{##ca337c}{#1}"),Nn("\\maroonE","\\textcolor{##9e034e}{#1}"),Nn("\\purpleA","\\textcolor{##ddd7ff}{#1}"),Nn("\\purpleB","\\textcolor{##c6b9fc}{#1}"),Nn("\\purpleC","\\textcolor{##aa87ff}{#1}"),Nn("\\purpleD","\\textcolor{##7854ab}{#1}"),Nn("\\purpleE","\\textcolor{##543b78}{#1}"),Nn("\\mintA","\\textcolor{##f5f9e8}{#1}"),Nn("\\mintB","\\textcolor{##edf2df}{#1}"),Nn("\\mintC","\\textcolor{##e0e5cc}{#1}"),Nn("\\grayA","\\textcolor{##f6f7f7}{#1}"),Nn("\\grayB","\\textcolor{##f0f1f2}{#1}"),Nn("\\grayC","\\textcolor{##e3e5e6}{#1}"),Nn("\\grayD","\\textcolor{##d6d8da}{#1}"),Nn("\\grayE","\\textcolor{##babec2}{#1}"),Nn("\\grayF","\\textcolor{##888d93}{#1}"),Nn("\\grayG","\\textcolor{##626569}{#1}"),Nn("\\grayH","\\textcolor{##3b3e40}{#1}"),Nn("\\grayI","\\textcolor{##21242c}{#1}"),Nn("\\kaBlue","\\textcolor{##314453}{#1}"),Nn("\\kaGreen","\\textcolor{##71B307}{#1}");var In={"\\relax":!0,"^":!0,_:!0,"\\limits":!0,"\\nolimits":!0},Ln=function(){function e(e,t,r){this.settings=void 0,this.expansionCount=void 0,this.lexer=void 0,this.macros=void 0,this.stack=void 0,this.mode=void 0,this.settings=t,this.expansionCount=0,this.feed(e),this.macros=new An(Cn,t.macros),this.mode=r,this.stack=[]}var t=e.prototype;return t.feed=function(e){this.lexer=new Sn(e,this.settings)},t.switchMode=function(e){this.mode=e},t.beginGroup=function(){this.macros.beginGroup()},t.endGroup=function(){this.macros.endGroup()},t.future=function(){return 0===this.stack.length&&this.pushToken(this.lexer.lex()),this.stack[this.stack.length-1]},t.popToken=function(){return this.future(),this.stack.pop()},t.pushToken=function(e){this.stack.push(e)},t.pushTokens=function(e){var t;(t=this.stack).push.apply(t,e)},t.consumeSpaces=function(){for(;" "===this.future().text;)this.stack.pop()},t.consumeArgs=function(e){for(var t=[],r=0;r<e;++r){this.consumeSpaces();var n=this.popToken();if("{"===n.text){for(var i=[],o=1;0!==o;){var a=this.popToken();if(i.push(a),"{"===a.text)++o;else if("}"===a.text)--o;else if("EOF"===a.text)throw new s("End of input in macro argument",n)}i.pop(),i.reverse(),t[r]=i}else{if("EOF"===n.text)throw new s("End of input expecting macro argument");t[r]=[n]}}return t},t.expandOnce=function(){var e=this.popToken(),t=e.text,r=this._getExpansion(t);if(null==r)return this.pushToken(e),e;if(this.expansionCount++,this.expansionCount>this.settings.maxExpand)throw new s("Too many expansions: infinite loop or need to increase maxExpand setting");var n=r.tokens;if(r.numArgs)for(var i=this.consumeArgs(r.numArgs),o=(n=n.slice()).length-1;o>=0;--o){var a=n[o];if("#"===a.text){if(0===o)throw new s("Incomplete placeholder at end of macro body",a);if("#"===(a=n[--o]).text)n.splice(o+1,1);else{if(!/^[1-9]$/.test(a.text))throw new s("Not a valid argument number",a);var l;(l=n).splice.apply(l,[o,2].concat(i[+a.text-1]))}}}return this.pushTokens(n),n},t.expandAfterFuture=function(){return this.expandOnce(),this.future()},t.expandNextToken=function(){for(;;){var e=this.expandOnce();if(e instanceof i){if("\\relax"!==e.text)return this.stack.pop();this.stack.pop()}}throw new Error},t.expandMacro=function(e){if(this.macros.get(e)){var t=[],r=this.stack.length;for(this.pushToken(new i(e));this.stack.length>r;)this.expandOnce()instanceof i&&t.push(this.stack.pop());return t}},t.expandMacroAsText=function(e){var t=this.expandMacro(e);return t?t.map((function(e){return e.text})).join(""):t},t._getExpansion=function(e){var t=this.macros.get(e);if(null==t)return t;var r="function"==typeof t?t(this):t;if("string"==typeof r){var n=0;if(-1!==r.indexOf("#"))for(var i=r.replace(/##/g,"");-1!==i.indexOf("#"+(n+1));)++n;for(var o=new Sn(r,this.settings),s=[],a=o.lex();"EOF"!==a.text;)s.push(a),a=o.lex();return s.reverse(),{tokens:s,numArgs:n}}return r},t.isDefined=function(e){return this.macros.has(e)||wn.hasOwnProperty(e)||Y.math.hasOwnProperty(e)||Y.text.hasOwnProperty(e)||In.hasOwnProperty(e)},e}(),jn={"́":{text:"\\'",math:"\\acute"},"̀":{text:"\\`",math:"\\grave"},"̈":{text:'\\"',math:"\\ddot"},"̃":{text:"\\~",math:"\\tilde"},"̄":{text:"\\=",math:"\\bar"},"̆":{text:"\\u",math:"\\breve"},"̌":{text:"\\v",math:"\\check"},"̂":{text:"\\^",math:"\\hat"},"̇":{text:"\\.",math:"\\dot"},"̊":{text:"\\r",math:"\\mathring"},"̋":{text:"\\H"}},Dn={á:"á",à:"à",ä:"ä",ǟ:"ǟ",ã:"ã",ā:"ā",ă:"ă",ắ:"ắ",ằ:"ằ",ẵ:"ẵ",ǎ:"ǎ",â:"â",ấ:"ấ",ầ:"ầ",ẫ:"ẫ",ȧ:"ȧ",ǡ:"ǡ",å:"å",ǻ:"ǻ",ḃ:"ḃ",ć:"ć",č:"č",ĉ:"ĉ",ċ:"ċ",ď:"ď",ḋ:"ḋ",é:"é",è:"è",ë:"ë",ẽ:"ẽ",ē:"ē",ḗ:"ḗ",ḕ:"ḕ",ĕ:"ĕ",ě:"ě",ê:"ê",ế:"ế",ề:"ề",ễ:"ễ",ė:"ė",ḟ:"ḟ",ǵ:"ǵ",ḡ:"ḡ",ğ:"ğ",ǧ:"ǧ",ĝ:"ĝ",ġ:"ġ",ḧ:"ḧ",ȟ:"ȟ",ĥ:"ĥ",ḣ:"ḣ",í:"í",ì:"ì",ï:"ï",ḯ:"ḯ",ĩ:"ĩ",ī:"ī",ĭ:"ĭ",ǐ:"ǐ",î:"î",ǰ:"ǰ",ĵ:"ĵ",ḱ:"ḱ",ǩ:"ǩ",ĺ:"ĺ",ľ:"ľ",ḿ:"ḿ",ṁ:"ṁ",ń:"ń",ǹ:"ǹ",ñ:"ñ",ň:"ň",ṅ:"ṅ",ó:"ó",ò:"ò",ö:"ö",ȫ:"ȫ",õ:"õ",ṍ:"ṍ",ṏ:"ṏ",ȭ:"ȭ",ō:"ō",ṓ:"ṓ",ṑ:"ṑ",ŏ:"ŏ",ǒ:"ǒ",ô:"ô",ố:"ố",ồ:"ồ",ỗ:"ỗ",ȯ:"ȯ",ȱ:"ȱ",ő:"ő",ṕ:"ṕ",ṗ:"ṗ",ŕ:"ŕ",ř:"ř",ṙ:"ṙ",ś:"ś",ṥ:"ṥ",š:"š",ṧ:"ṧ",ŝ:"ŝ",ṡ:"ṡ",ẗ:"ẗ",ť:"ť",ṫ:"ṫ",ú:"ú",ù:"ù",ü:"ü",ǘ:"ǘ",ǜ:"ǜ",ǖ:"ǖ",ǚ:"ǚ",ũ:"ũ",ṹ:"ṹ",ū:"ū",ṻ:"ṻ",ŭ:"ŭ",ǔ:"ǔ",û:"û",ů:"ů",ű:"ű",ṽ:"ṽ",ẃ:"ẃ",ẁ:"ẁ",ẅ:"ẅ",ŵ:"ŵ",ẇ:"ẇ",ẘ:"ẘ",ẍ:"ẍ",ẋ:"ẋ",ý:"ý",ỳ:"ỳ",ÿ:"ÿ",ỹ:"ỹ",ȳ:"ȳ",ŷ:"ŷ",ẏ:"ẏ",ẙ:"ẙ",ź:"ź",ž:"ž",ẑ:"ẑ",ż:"ż",Á:"Á",À:"À",Ä:"Ä",Ǟ:"Ǟ",Ã:"Ã",Ā:"Ā",Ă:"Ă",Ắ:"Ắ",Ằ:"Ằ",Ẵ:"Ẵ",Ǎ:"Ǎ",Â:"Â",Ấ:"Ấ",Ầ:"Ầ",Ẫ:"Ẫ",Ȧ:"Ȧ",Ǡ:"Ǡ",Å:"Å",Ǻ:"Ǻ",Ḃ:"Ḃ",Ć:"Ć",Č:"Č",Ĉ:"Ĉ",Ċ:"Ċ",Ď:"Ď",Ḋ:"Ḋ",É:"É",È:"È",Ë:"Ë",Ẽ:"Ẽ",Ē:"Ē",Ḗ:"Ḗ",Ḕ:"Ḕ",Ĕ:"Ĕ",Ě:"Ě",Ê:"Ê",Ế:"Ế",Ề:"Ề",Ễ:"Ễ",Ė:"Ė",Ḟ:"Ḟ",Ǵ:"Ǵ",Ḡ:"Ḡ",Ğ:"Ğ",Ǧ:"Ǧ",Ĝ:"Ĝ",Ġ:"Ġ",Ḧ:"Ḧ",Ȟ:"Ȟ",Ĥ:"Ĥ",Ḣ:"Ḣ",Í:"Í",Ì:"Ì",Ï:"Ï",Ḯ:"Ḯ",Ĩ:"Ĩ",Ī:"Ī",Ĭ:"Ĭ",Ǐ:"Ǐ",Î:"Î",İ:"İ",Ĵ:"Ĵ",Ḱ:"Ḱ",Ǩ:"Ǩ",Ĺ:"Ĺ",Ľ:"Ľ",Ḿ:"Ḿ",Ṁ:"Ṁ",Ń:"Ń",Ǹ:"Ǹ",Ñ:"Ñ",Ň:"Ň",Ṅ:"Ṅ",Ó:"Ó",Ò:"Ò",Ö:"Ö",Ȫ:"Ȫ",Õ:"Õ",Ṍ:"Ṍ",Ṏ:"Ṏ",Ȭ:"Ȭ",Ō:"Ō",Ṓ:"Ṓ",Ṑ:"Ṑ",Ŏ:"Ŏ",Ǒ:"Ǒ",Ô:"Ô",Ố:"Ố",Ồ:"Ồ",Ỗ:"Ỗ",Ȯ:"Ȯ",Ȱ:"Ȱ",Ő:"Ő",Ṕ:"Ṕ",Ṗ:"Ṗ",Ŕ:"Ŕ",Ř:"Ř",Ṙ:"Ṙ",Ś:"Ś",Ṥ:"Ṥ",Š:"Š",Ṧ:"Ṧ",Ŝ:"Ŝ",Ṡ:"Ṡ",Ť:"Ť",Ṫ:"Ṫ",Ú:"Ú",Ù:"Ù",Ü:"Ü",Ǘ:"Ǘ",Ǜ:"Ǜ",Ǖ:"Ǖ",Ǚ:"Ǚ",Ũ:"Ũ",Ṹ:"Ṹ",Ū:"Ū",Ṻ:"Ṻ",Ŭ:"Ŭ",Ǔ:"Ǔ",Û:"Û",Ů:"Ů",Ű:"Ű",Ṽ:"Ṽ",Ẃ:"Ẃ",Ẁ:"Ẁ",Ẅ:"Ẅ",Ŵ:"Ŵ",Ẇ:"Ẇ",Ẍ:"Ẍ",Ẋ:"Ẋ",Ý:"Ý",Ỳ:"Ỳ",Ÿ:"Ÿ",Ỹ:"Ỹ",Ȳ:"Ȳ",Ŷ:"Ŷ",Ẏ:"Ẏ",Ź:"Ź",Ž:"Ž",Ẑ:"Ẑ",Ż:"Ż",ά:"ά",ὰ:"ὰ",ᾱ:"ᾱ",ᾰ:"ᾰ",έ:"έ",ὲ:"ὲ",ή:"ή",ὴ:"ὴ",ί:"ί",ὶ:"ὶ",ϊ:"ϊ",ΐ:"ΐ",ῒ:"ῒ",ῑ:"ῑ",ῐ:"ῐ",ό:"ό",ὸ:"ὸ",ύ:"ύ",ὺ:"ὺ",ϋ:"ϋ",ΰ:"ΰ",ῢ:"ῢ",ῡ:"ῡ",ῠ:"ῠ",ώ:"ώ",ὼ:"ὼ",Ύ:"Ύ",Ὺ:"Ὺ",Ϋ:"Ϋ",Ῡ:"Ῡ",Ῠ:"Ῠ",Ώ:"Ώ",Ὼ:"Ὼ"},Bn=function(){function e(e,t){this.mode=void 0,this.gullet=void 0,this.settings=void 0,this.leftrightDepth=void 0,this.nextToken=void 0,this.mode="math",this.gullet=new Ln(e,t,this.mode),this.settings=t,this.leftrightDepth=0}var t=e.prototype;return t.expect=function(e,t){if(void 0===t&&(t=!0),this.fetch().text!==e)throw new s("Expected '"+e+"', got '"+this.fetch().text+"'",this.fetch());t&&this.consume()},t.consume=function(){this.nextToken=null},t.fetch=function(){return null==this.nextToken&&(this.nextToken=this.gullet.expandNextToken()),this.nextToken},t.switchMode=function(e){this.mode=e,this.gullet.switchMode(e)},t.parse=function(){this.gullet.beginGroup(),this.settings.colorIsTextColor&&this.gullet.macros.set("\\color","\\textcolor");var e=this.parseExpression(!1);return this.expect("EOF"),this.gullet.endGroup(),e},t.parseExpression=function(t,r){for(var n=[];;){"math"===this.mode&&this.consumeSpaces();var i=this.fetch();if(-1!==e.endOfExpression.indexOf(i.text))break;if(r&&i.text===r)break;if(t&&wn[i.text]&&wn[i.text].infix)break;var o=this.parseAtom(r);if(!o)break;n.push(o)}return"text"===this.mode&&this.formLigatures(n),this.handleInfixNodes(n)},t.handleInfixNodes=function(e){for(var t,r=-1,n=0;n<e.length;n++){var i=et(e[n],"infix");if(i){if(-1!==r)throw new s("only one infix operator per group",i.token);r=n,t=i.replaceWith}}if(-1!==r&&t){var o,a,l=e.slice(0,r),c=e.slice(r+1);return o=1===l.length&&"ordgroup"===l[0].type?l[0]:{type:"ordgroup",mode:this.mode,body:l},a=1===c.length&&"ordgroup"===c[0].type?c[0]:{type:"ordgroup",mode:this.mode,body:c},["\\\\abovefrac"===t?this.callFunction(t,[o,e[r],a],[]):this.callFunction(t,[o,a],[])]}return e},t.handleSupSubscript=function(t){var r=this.fetch(),n=r.text;this.consume();var i=this.parseGroup(t,!1,e.SUPSUB_GREEDINESS,void 0,void 0,!0);if(!i)throw new s("Expected group after '"+n+"'",r);return i},t.formatUnsupportedCmd=function(e){for(var t=[],r=0;r<e.length;r++)t.push({type:"textord",mode:"text",text:e[r]});var n={type:"text",mode:this.mode,body:t};return{type:"color",mode:this.mode,color:this.settings.errorColor,body:[n]}},t.parseAtom=function(e){var t,r,n=this.parseGroup("atom",!1,null,e);if("text"===this.mode)return n;for(;;){this.consumeSpaces();var i=this.fetch();if("\\limits"===i.text||"\\nolimits"===i.text){var o=et(n,"op");if(o){var a="\\limits"===i.text;o.limits=a,o.alwaysHandleSupSub=!0}else{if(!(o=et(n,"operatorname"))||!o.alwaysHandleSupSub)throw new s("Limit controls must follow a math operator",i);var l="\\limits"===i.text;o.limits=l}this.consume()}else if("^"===i.text){if(t)throw new s("Double superscript",i);t=this.handleSupSubscript("superscript")}else if("_"===i.text){if(r)throw new s("Double subscript",i);r=this.handleSupSubscript("subscript")}else{if("'"!==i.text)break;if(t)throw new s("Double superscript",i);var c={type:"textord",mode:this.mode,text:"\\prime"},u=[c];for(this.consume();"'"===this.fetch().text;)u.push(c),this.consume();"^"===this.fetch().text&&u.push(this.handleSupSubscript("superscript")),t={type:"ordgroup",mode:this.mode,body:u}}}return t||r?{type:"supsub",mode:this.mode,base:n,sup:t,sub:r}:n},t.parseFunction=function(e,t,r){var n=this.fetch(),i=n.text,o=wn[i];if(!o)return null;if(this.consume(),null!=r&&o.greediness<=r)throw new s("Got function '"+i+"' with no arguments"+(t?" as "+t:""),n);if("text"===this.mode&&!o.allowedInText)throw new s("Can't use function '"+i+"' in text mode",n);if("math"===this.mode&&!1===o.allowedInMath)throw new s("Can't use function '"+i+"' in math mode",n);var a=this.parseArguments(i,o),l=a.args,c=a.optArgs;return this.callFunction(i,l,c,n,e)},t.callFunction=function(e,t,r,n,i){var o={funcName:e,parser:this,token:n,breakOnTokenText:i},a=wn[e];if(a&&a.handler)return a.handler(o,t,r);throw new s("No function handler for "+e)},t.parseArguments=function(e,t){var r=t.numArgs+t.numOptionalArgs;if(0===r)return{args:[],optArgs:[]};for(var n=t.greediness,i=[],o=[],a=0;a<r;a++){var l=t.argTypes&&t.argTypes[a],c=a<t.numOptionalArgs,u=a>0&&!c||0===a&&!c&&"math"===this.mode,h=this.parseGroupOfType("argument to '"+e+"'",l,c,n,u);if(!h){if(c){o.push(null);continue}throw new s("Expected group after '"+e+"'",this.fetch())}(c?o:i).push(h)}return{args:i,optArgs:o}},t.parseGroupOfType=function(e,t,r,n,i){switch(t){case"color":return i&&this.consumeSpaces(),this.parseColorGroup(r);case"size":return i&&this.consumeSpaces(),this.parseSizeGroup(r);case"url":return this.parseUrlGroup(r,i);case"math":case"text":return this.parseGroup(e,r,n,void 0,t,i);case"hbox":var o=this.parseGroup(e,r,n,void 0,"text",i);return o?{type:"styling",mode:o.mode,body:[o],style:"text"}:o;case"raw":if(i&&this.consumeSpaces(),r&&"{"===this.fetch().text)return null;var a=this.parseStringGroup("raw",r,!0);if(a)return{type:"raw",mode:"text",string:a.text};throw new s("Expected raw group",this.fetch());case"original":case null:case void 0:return this.parseGroup(e,r,n,void 0,void 0,i);default:throw new s("Unknown group type as "+e,this.fetch())}},t.consumeSpaces=function(){for(;" "===this.fetch().text;)this.consume()},t.parseStringGroup=function(e,t,r){var n=t?"[":"{",i=t?"]":"}",o=this.fetch();if(o.text!==n){if(t)return null;if(r&&"EOF"!==o.text&&/[^{}[\]]/.test(o.text))return this.consume(),o}var a=this.mode;this.mode="text",this.expect(n);for(var l,c="",u=this.fetch(),h=0,d=u;(l=this.fetch()).text!==i||r&&h>0;){switch(l.text){case"EOF":throw new s("Unexpected end of input in "+e,u.range(d,c));case n:h++;break;case i:h--}c+=(d=l).text,this.consume()}return this.expect(i),this.mode=a,u.range(d,c)},t.parseRegexGroup=function(e,t){var r=this.mode;this.mode="text";for(var n,i=this.fetch(),o=i,a="";"EOF"!==(n=this.fetch()).text&&e.test(a+n.text);)a+=(o=n).text,this.consume();if(""===a)throw new s("Invalid "+t+": '"+i.text+"'",i);return this.mode=r,i.range(o,a)},t.parseColorGroup=function(e){var t=this.parseStringGroup("color",e);if(!t)return null;var r=/^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(t.text);if(!r)throw new s("Invalid color: '"+t.text+"'",t);var n=r[0];return/^[0-9a-f]{6}$/i.test(n)&&(n="#"+n),{type:"color-token",mode:this.mode,color:n}},t.parseSizeGroup=function(e){var t,r=!1;if(!(t=e||"{"===this.fetch().text?this.parseStringGroup("size",e):this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/,"size")))return null;e||0!==t.text.length||(t.text="0pt",r=!0);var n=/([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(t.text);if(!n)throw new s("Invalid size: '"+t.text+"'",t);var i={number:+(n[1]+n[2]),unit:n[3]};if(!Re(i))throw new s("Invalid unit: '"+i.unit+"'",t);return{type:"size",mode:this.mode,value:i,isBlank:r}},t.parseUrlGroup=function(e,t){this.gullet.lexer.setCatcode("%",13);var r=this.parseStringGroup("url",e,!0);if(this.gullet.lexer.setCatcode("%",14),!r)return null;var n=r.text.replace(/\\([#$%&~_^{}])/g,"$1");return{type:"url",mode:this.mode,url:n}},t.parseGroup=function(t,r,i,o,a,l){var c=this.mode;a&&this.switchMode(a),l&&this.consumeSpaces();var u,h=this.fetch(),d=h.text;if(r?"["===d:"{"===d||"\\begingroup"===d){this.consume();var p=e.endOfGroup[d];this.gullet.beginGroup();var f=this.parseExpression(!1,p),m=this.fetch();this.expect(p),this.gullet.endGroup(),u={type:"ordgroup",mode:this.mode,loc:n.range(h,m),body:f,semisimple:"\\begingroup"===d||void 0}}else if(r)u=null;else if(null==(u=this.parseFunction(o,t,i)||this.parseSymbol())&&"\\"===d[0]&&!In.hasOwnProperty(d)){if(this.settings.throwOnError)throw new s("Undefined control sequence: "+d,h);u=this.formatUnsupportedCmd(d),this.consume()}return a&&this.switchMode(c),u},t.formLigatures=function(e){for(var t=e.length-1,r=0;r<t;++r){var i=e[r],o=i.text;"-"===o&&"-"===e[r+1].text&&(r+1<t&&"-"===e[r+2].text?(e.splice(r,3,{type:"textord",mode:"text",loc:n.range(i,e[r+2]),text:"---"}),t-=2):(e.splice(r,2,{type:"textord",mode:"text",loc:n.range(i,e[r+1]),text:"--"}),t-=1)),"'"!==o&&"`"!==o||e[r+1].text!==o||(e.splice(r,2,{type:"textord",mode:"text",loc:n.range(i,e[r+1]),text:o+o}),t-=1)}},t.parseSymbol=function(){var e=this.fetch(),t=e.text;if(/^\\verb[^a-zA-Z]/.test(t)){this.consume();var r=t.slice(5),i="*"===r.charAt(0);if(i&&(r=r.slice(1)),r.length<2||r.charAt(0)!==r.slice(-1))throw new s("\\verb assertion failed --\n                    please report what input caused this bug");return{type:"verb",mode:"text",body:r=r.slice(1,-1),star:i}}Dn.hasOwnProperty(t[0])&&!Y[this.mode][t[0]]&&(this.settings.strict&&"math"===this.mode&&this.settings.reportNonstrict("unicodeTextInMathMode",'Accented Unicode text character "'+t[0]+'" used in math mode',e),t=Dn[t[0]]+t.substr(1));var o,a=kn.exec(t);if(a&&("i"===(t=t.substring(0,a.index))?t="ı":"j"===t&&(t="ȷ")),Y[this.mode][t]){this.settings.strict&&"math"===this.mode&&Ne.indexOf(t)>=0&&this.settings.reportNonstrict("unicodeTextInMathMode",'Latin-1/Unicode text character "'+t[0]+'" used in math mode',e);var l,c=Y[this.mode][t].group,u=n.range(e);if(G.hasOwnProperty(c)){var h=c;l={type:"atom",mode:this.mode,family:h,loc:u,text:t}}else l={type:c,mode:this.mode,loc:u,text:t};o=l}else{if(!(t.charCodeAt(0)>=128))return null;this.settings.strict&&(A(t.charCodeAt(0))?"math"===this.mode&&this.settings.reportNonstrict("unicodeTextInMathMode",'Unicode text character "'+t[0]+'" used in math mode',e):this.settings.reportNonstrict("unknownSymbol",'Unrecognized Unicode character "'+t[0]+'" ('+t.charCodeAt(0)+")",e)),o={type:"textord",mode:"text",loc:n.range(e),text:t}}if(this.consume(),a)for(var d=0;d<a[0].length;d++){var p=a[0][d];if(!jn[p])throw new s("Unknown accent ' "+p+"'",e);var f=jn[p][this.mode];if(!f)throw new s("Accent "+p+" unsupported in "+this.mode+" mode",e);o={type:"accent",mode:this.mode,loc:n.range(e),label:f,isStretchy:!1,isShifty:!0,base:o}}return o},e}();Bn.endOfExpression=["}","\\endgroup","\\end","\\right","&"],Bn.endOfGroup={"[":"]","{":"}","\\begingroup":"\\endgroup"},Bn.SUPSUB_GREEDINESS=1;var Rn=function(e,t){if(!("string"==typeof e||e instanceof String))throw new TypeError("KaTeX can only parse string typed expression");var r=new Bn(e,t);delete r.gullet.macros.current["\\df@tag"];var n=r.parse();if(r.gullet.macros.get("\\df@tag")){if(!t.displayMode)throw new s("\\tag works only in display equations");r.gullet.feed("\\df@tag"),n=[{type:"tag",mode:"text",body:n,tag:r.parse()}]}return n},Pn=function(e,t,r){t.textContent="";var n=Un(e,r).toNode();t.appendChild(n)};"undefined"!=typeof document&&"CSS1Compat"!==document.compatMode&&("undefined"!=typeof console&&console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your website has a suitable doctype."),Pn=function(){throw new s("KaTeX doesn't work in quirks mode.")});var Fn=function(e,t,r){if(r.throwOnError||!(e instanceof s))throw e;var n=Ke.makeSpan(["katex-error"],[new j(t)]);return n.setAttribute("title",e.toString()),n.setAttribute("style","color:"+r.errorColor),n},Un=function(e,t){var r=new d(t);try{var n=Rn(e,r);return Ut(n,e,r)}catch(t){return Fn(t,e,r)}},$n={version:"0.11.1",render:Pn,renderToString:function(e,t){return Un(e,t).toMarkup()},ParseError:s,__parse:function(e,t){var r=new d(t);return Rn(e,r)},__renderToDomTree:Un,__renderToHTMLTree:function(e,t){var r=new d(t);try{return function(e,t,r){var n=Et(e,Pt(r)),i=Ke.makeSpan(["katex"],[n]);return Ft(i,r)}(Rn(e,r),0,r)}catch(t){return Fn(t,e,r)}},__setFontMetrics:function(e,t){F[e]=t},__defineSymbol:Z,__defineMacro:Nn,__domTree:{Span:O,Anchor:_,SymbolNode:j,SvgNode:D,PathNode:B,LineNode:R}};t.default=$n}]).default},e.exports=t()},"./node_modules/loglevel/lib/loglevel.js":function(e,t,r){var n,i;!function(o,s){"use strict";void 0===(i="function"==typeof(n=function(){var e=function(){},t="undefined",r=typeof window!==t&&typeof window.navigator!==t&&/Trident\/|MSIE /.test(window.navigator.userAgent),n=["trace","debug","info","warn","error"];function i(e,t){var r=e[t];if("function"==typeof r.bind)return r.bind(e);try{return Function.prototype.bind.call(r,e)}catch(t){return function(){return Function.prototype.apply.apply(r,[e,arguments])}}}function o(){console.log&&(console.log.apply?console.log.apply(console,arguments):Function.prototype.apply.apply(console.log,[console,arguments])),console.trace&&console.trace()}function s(n){return"debug"===n&&(n="log"),typeof console!==t&&("trace"===n&&r?o:void 0!==console[n]?i(console,n):void 0!==console.log?i(console,"log"):e)}function a(t,r){for(var i=0;i<n.length;i++){var o=n[i];this[o]=i<t?e:this.methodFactory(o,t,r)}this.log=this.debug}function l(e,r,n){return function(){typeof console!==t&&(a.call(this,r,n),this[e].apply(this,arguments))}}function c(e,t,r){return s(e)||l.apply(this,arguments)}function u(e,r,i){var o,s=this,l="loglevel";function u(e){var r=(n[e]||"silent").toUpperCase();if(typeof window!==t&&l){try{return void(window.localStorage[l]=r)}catch(e){}try{window.document.cookie=encodeURIComponent(l)+"="+r+";"}catch(e){}}}function h(){var e;if(typeof window!==t&&l){try{e=window.localStorage[l]}catch(e){}if(typeof e===t)try{var r=window.document.cookie,n=r.indexOf(encodeURIComponent(l)+"=");-1!==n&&(e=/^([^;]+)/.exec(r.slice(n))[1])}catch(e){}return void 0===s.levels[e]&&(e=void 0),e}}"string"==typeof e?l+=":"+e:"symbol"==typeof e&&(l=void 0),s.name=e,s.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},s.methodFactory=i||c,s.getLevel=function(){return o},s.setLevel=function(r,n){if("string"==typeof r&&void 0!==s.levels[r.toUpperCase()]&&(r=s.levels[r.toUpperCase()]),!("number"==typeof r&&r>=0&&r<=s.levels.SILENT))throw"log.setLevel() called with invalid level: "+r;if(o=r,!1!==n&&u(r),a.call(s,r,e),typeof console===t&&r<s.levels.SILENT)return"No console available for logging"},s.setDefaultLevel=function(e){h()||s.setLevel(e,!1)},s.enableAll=function(e){s.setLevel(s.levels.TRACE,e)},s.disableAll=function(e){s.setLevel(s.levels.SILENT,e)};var d=h();null==d&&(d=null==r?"WARN":r),s.setLevel(d,!1)}var h=new u,d={};h.getLogger=function(e){if("symbol"!=typeof e&&"string"!=typeof e||""===e)throw new TypeError("You must supply a name when creating a logger.");var t=d[e];return t||(t=d[e]=new u(e,h.getLevel(),h.methodFactory)),t};var p=typeof window!==t?window.log:void 0;return h.noConflict=function(){return typeof window!==t&&window.log===h&&(window.log=p),h},h.getLoggers=function(){return d},h.default=h,h})?n.call(t,r,t,e):n)||(e.exports=i)}()},"./node_modules/lz-string/libs/lz-string.js":(e,t,r)=>{var n,i=function(){var e=String.fromCharCode,t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$",n={};function i(e,t){if(!n[e]){n[e]={};for(var r=0;r<e.length;r++)n[e][e.charAt(r)]=r}return n[e][t]}var o={compressToBase64:function(e){if(null==e)return"";var r=o._compress(e,6,(function(e){return t.charAt(e)}));switch(r.length%4){default:case 0:return r;case 1:return r+"===";case 2:return r+"==";case 3:return r+"="}},decompressFromBase64:function(e){return null==e?"":""==e?null:o._decompress(e.length,32,(function(r){return i(t,e.charAt(r))}))},compressToUTF16:function(t){return null==t?"":o._compress(t,15,(function(t){return e(t+32)}))+" "},decompressFromUTF16:function(e){return null==e?"":""==e?null:o._decompress(e.length,16384,(function(t){return e.charCodeAt(t)-32}))},compressToUint8Array:function(e){for(var t=o.compress(e),r=new Uint8Array(2*t.length),n=0,i=t.length;n<i;n++){var s=t.charCodeAt(n);r[2*n]=s>>>8,r[2*n+1]=s%256}return r},decompressFromUint8Array:function(t){if(null==t)return o.decompress(t);for(var r=new Array(t.length/2),n=0,i=r.length;n<i;n++)r[n]=256*t[2*n]+t[2*n+1];var s=[];return r.forEach((function(t){s.push(e(t))})),o.decompress(s.join(""))},compressToEncodedURIComponent:function(e){return null==e?"":o._compress(e,6,(function(e){return r.charAt(e)}))},decompressFromEncodedURIComponent:function(e){return null==e?"":""==e?null:(e=e.replace(/ /g,"+"),o._decompress(e.length,32,(function(t){return i(r,e.charAt(t))})))},compress:function(t){return o._compress(t,16,(function(t){return e(t)}))},_compress:function(e,t,r){if(null==e)return"";var n,i,o,s={},a={},l="",c="",u="",h=2,d=3,p=2,f=[],m=0,g=0;for(o=0;o<e.length;o+=1)if(l=e.charAt(o),Object.prototype.hasOwnProperty.call(s,l)||(s[l]=d++,a[l]=!0),c=u+l,Object.prototype.hasOwnProperty.call(s,c))u=c;else{if(Object.prototype.hasOwnProperty.call(a,u)){if(u.charCodeAt(0)<256){for(n=0;n<p;n++)m<<=1,g==t-1?(g=0,f.push(r(m)),m=0):g++;for(i=u.charCodeAt(0),n=0;n<8;n++)m=m<<1|1&i,g==t-1?(g=0,f.push(r(m)),m=0):g++,i>>=1}else{for(i=1,n=0;n<p;n++)m=m<<1|i,g==t-1?(g=0,f.push(r(m)),m=0):g++,i=0;for(i=u.charCodeAt(0),n=0;n<16;n++)m=m<<1|1&i,g==t-1?(g=0,f.push(r(m)),m=0):g++,i>>=1}0==--h&&(h=Math.pow(2,p),p++),delete a[u]}else for(i=s[u],n=0;n<p;n++)m=m<<1|1&i,g==t-1?(g=0,f.push(r(m)),m=0):g++,i>>=1;0==--h&&(h=Math.pow(2,p),p++),s[c]=d++,u=String(l)}if(""!==u){if(Object.prototype.hasOwnProperty.call(a,u)){if(u.charCodeAt(0)<256){for(n=0;n<p;n++)m<<=1,g==t-1?(g=0,f.push(r(m)),m=0):g++;for(i=u.charCodeAt(0),n=0;n<8;n++)m=m<<1|1&i,g==t-1?(g=0,f.push(r(m)),m=0):g++,i>>=1}else{for(i=1,n=0;n<p;n++)m=m<<1|i,g==t-1?(g=0,f.push(r(m)),m=0):g++,i=0;for(i=u.charCodeAt(0),n=0;n<16;n++)m=m<<1|1&i,g==t-1?(g=0,f.push(r(m)),m=0):g++,i>>=1}0==--h&&(h=Math.pow(2,p),p++),delete a[u]}else for(i=s[u],n=0;n<p;n++)m=m<<1|1&i,g==t-1?(g=0,f.push(r(m)),m=0):g++,i>>=1;0==--h&&(h=Math.pow(2,p),p++)}for(i=2,n=0;n<p;n++)m=m<<1|1&i,g==t-1?(g=0,f.push(r(m)),m=0):g++,i>>=1;for(;;){if(m<<=1,g==t-1){f.push(r(m));break}g++}return f.join("")},decompress:function(e){return null==e?"":""==e?null:o._decompress(e.length,32768,(function(t){return e.charCodeAt(t)}))},_decompress:function(t,r,n){var i,o,s,a,l,c,u,h=[],d=4,p=4,f=3,m="",g=[],v={val:n(0),position:r,index:1};for(i=0;i<3;i+=1)h[i]=i;for(s=0,l=Math.pow(2,2),c=1;c!=l;)a=v.val&v.position,v.position>>=1,0==v.position&&(v.position=r,v.val=n(v.index++)),s|=(a>0?1:0)*c,c<<=1;switch(s){case 0:for(s=0,l=Math.pow(2,8),c=1;c!=l;)a=v.val&v.position,v.position>>=1,0==v.position&&(v.position=r,v.val=n(v.index++)),s|=(a>0?1:0)*c,c<<=1;u=e(s);break;case 1:for(s=0,l=Math.pow(2,16),c=1;c!=l;)a=v.val&v.position,v.position>>=1,0==v.position&&(v.position=r,v.val=n(v.index++)),s|=(a>0?1:0)*c,c<<=1;u=e(s);break;case 2:return""}for(h[3]=u,o=u,g.push(u);;){if(v.index>t)return"";for(s=0,l=Math.pow(2,f),c=1;c!=l;)a=v.val&v.position,v.position>>=1,0==v.position&&(v.position=r,v.val=n(v.index++)),s|=(a>0?1:0)*c,c<<=1;switch(u=s){case 0:for(s=0,l=Math.pow(2,8),c=1;c!=l;)a=v.val&v.position,v.position>>=1,0==v.position&&(v.position=r,v.val=n(v.index++)),s|=(a>0?1:0)*c,c<<=1;h[p++]=e(s),u=p-1,d--;break;case 1:for(s=0,l=Math.pow(2,16),c=1;c!=l;)a=v.val&v.position,v.position>>=1,0==v.position&&(v.position=r,v.val=n(v.index++)),s|=(a>0?1:0)*c,c<<=1;h[p++]=e(s),u=p-1,d--;break;case 2:return g.join("")}if(0==d&&(d=Math.pow(2,f),f++),h[u])m=h[u];else{if(u!==p)return null;m=o+o.charAt(0)}g.push(m),h[p++]=o+m.charAt(0),o=m,0==--d&&(d=Math.pow(2,f),f++)}}};return o}();void 0===(n=function(){return i}.call(t,r,t,e))||(e.exports=n)},"./node_modules/prando/dist/Prando.es.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n=function(){function e(t){this._value=NaN,this._seed="string"==typeof t?this.hashCode(t):"number"==typeof t?this.getSafeSeed(t):this.getSafeSeed(e.MIN+Math.floor((e.MAX-e.MIN)*Math.random())),this.reset()}return e.prototype.next=function(t,r){return void 0===t&&(t=0),void 0===r&&(r=1),this.recalculate(),this.map(this._value,e.MIN,e.MAX,t,r)},e.prototype.nextInt=function(t,r){return void 0===t&&(t=10),void 0===r&&(r=100),this.recalculate(),Math.floor(this.map(this._value,e.MIN,e.MAX,t,r+1))},e.prototype.nextString=function(e,t){void 0===e&&(e=16),void 0===t&&(t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");for(var r="";r.length<e;)r+=this.nextChar(t);return r},e.prototype.nextChar=function(e){return void 0===e&&(e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"),this.recalculate(),e.substr(this.nextInt(0,e.length-1),1)},e.prototype.nextArrayItem=function(e){return this.recalculate(),e[this.nextInt(0,e.length-1)]},e.prototype.nextBoolean=function(){return this.recalculate(),this._value>.5},e.prototype.skip=function(e){for(void 0===e&&(e=1);e-- >0;)this.recalculate()},e.prototype.reset=function(){this._value=this._seed},e.prototype.recalculate=function(){this._value=this.xorshift(this._value)},e.prototype.xorshift=function(e){return e^=e<<13,e^=e>>17,e^=e<<5},e.prototype.map=function(e,t,r,n,i){return(e-t)/(r-t)*(i-n)+n},e.prototype.hashCode=function(e){var t=0;if(e)for(var r=e.length,n=0;n<r;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0,t=this.xorshift(t);return this.getSafeSeed(t)},e.prototype.getSafeSeed=function(e){return 0===e?1:e},e.MIN=-2147483648,e.MAX=2147483647,e}()},"./node_modules/querystring/decode.js":e=>{"use strict";function t(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,r,n,i){r=r||"&",n=n||"=";var o={};if("string"!=typeof e||0===e.length)return o;var s=/\+/g;e=e.split(r);var a=1e3;i&&"number"==typeof i.maxKeys&&(a=i.maxKeys);var l=e.length;a>0&&l>a&&(l=a);for(var c=0;c<l;++c){var u,h,d,p,f=e[c].replace(s,"%20"),m=f.indexOf(n);m>=0?(u=f.substr(0,m),h=f.substr(m+1)):(u=f,h=""),d=decodeURIComponent(u),p=decodeURIComponent(h),t(o,d)?Array.isArray(o[d])?o[d].push(p):o[d]=[o[d],p]:o[d]=p}return o}},"./node_modules/querystring/encode.js":e=>{"use strict";var t=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,r,n,i){return r=r||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map((function(i){var o=encodeURIComponent(t(i))+n;return Array.isArray(e[i])?e[i].map((function(e){return o+encodeURIComponent(t(e))})).join(r):o+encodeURIComponent(t(e[i]))})).join(r):i?encodeURIComponent(t(i))+n+encodeURIComponent(t(e)):""}},"./node_modules/querystring/index.js":(e,t,r)=>{"use strict";t.decode=t.parse=r("./node_modules/querystring/decode.js"),t.encode=t.stringify=r("./node_modules/querystring/encode.js")},"./node_modules/sockjs-client/dist/sockjs.js":(e,t,r)=>{var n;e.exports=function(){function e(t,r,n){function i(s,a){if(!r[s]){if(!t[s]){if(o)return o(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var c=r[s]={exports:{}};t[s][0].call(c.exports,(function(e){return i(t[s][1][e]||e)}),c,c.exports,e,t,r,n)}return r[s].exports}for(var o=void 0,s=0;s<n.length;s++)i(n[s]);return i}return e}()({1:[function(e,t,n){(function(r){"use strict";var n=e("./transport-list");t.exports=e("./main")(n),"_sockjs_onload"in r&&setTimeout(r._sockjs_onload,1)}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./main":14,"./transport-list":16}],2:[function(e,t,r){"use strict";var n=e("inherits"),i=e("./event");function o(){i.call(this),this.initEvent("close",!1,!1),this.wasClean=!1,this.code=0,this.reason=""}n(o,i),t.exports=o},{"./event":4,inherits:57}],3:[function(e,t,r){"use strict";var n=e("inherits"),i=e("./eventtarget");function o(){i.call(this)}n(o,i),o.prototype.removeAllListeners=function(e){e?delete this._listeners[e]:this._listeners={}},o.prototype.once=function(e,t){var r=this,n=!1;function i(){r.removeListener(e,i),n||(n=!0,t.apply(this,arguments))}this.on(e,i)},o.prototype.emit=function(){var e=arguments[0],t=this._listeners[e];if(t){for(var r=arguments.length,n=new Array(r-1),i=1;i<r;i++)n[i-1]=arguments[i];for(var o=0;o<t.length;o++)t[o].apply(this,n)}},o.prototype.on=o.prototype.addListener=i.prototype.addEventListener,o.prototype.removeListener=i.prototype.removeEventListener,t.exports.EventEmitter=o},{"./eventtarget":5,inherits:57}],4:[function(e,t,r){"use strict";function n(e){this.type=e}n.prototype.initEvent=function(e,t,r){return this.type=e,this.bubbles=t,this.cancelable=r,this.timeStamp=+new Date,this},n.prototype.stopPropagation=function(){},n.prototype.preventDefault=function(){},n.CAPTURING_PHASE=1,n.AT_TARGET=2,n.BUBBLING_PHASE=3,t.exports=n},{}],5:[function(e,t,r){"use strict";function n(){this._listeners={}}n.prototype.addEventListener=function(e,t){e in this._listeners||(this._listeners[e]=[]);var r=this._listeners[e];-1===r.indexOf(t)&&(r=r.concat([t])),this._listeners[e]=r},n.prototype.removeEventListener=function(e,t){var r=this._listeners[e];if(r){var n=r.indexOf(t);-1===n||(r.length>1?this._listeners[e]=r.slice(0,n).concat(r.slice(n+1)):delete this._listeners[e])}},n.prototype.dispatchEvent=function(){var e=arguments[0],t=e.type,r=1===arguments.length?[e]:Array.apply(null,arguments);if(this["on"+t]&&this["on"+t].apply(this,r),t in this._listeners)for(var n=this._listeners[t],i=0;i<n.length;i++)n[i].apply(this,r)},t.exports=n},{}],6:[function(e,t,r){"use strict";var n=e("inherits"),i=e("./event");function o(e){i.call(this),this.initEvent("message",!1,!1),this.data=e}n(o,i),t.exports=o},{"./event":4,inherits:57}],7:[function(e,t,r){"use strict";var n=e("json3"),i=e("./utils/iframe");function o(e){this._transport=e,e.on("message",this._transportMessage.bind(this)),e.on("close",this._transportClose.bind(this))}o.prototype._transportClose=function(e,t){i.postMessage("c",n.stringify([e,t]))},o.prototype._transportMessage=function(e){i.postMessage("t",e)},o.prototype._send=function(e){this._transport.send(e)},o.prototype._close=function(){this._transport.close(),this._transport.removeAllListeners()},t.exports=o},{"./utils/iframe":47,json3:58}],8:[function(e,t,r){(function(r){"use strict";var n=e("./utils/url"),i=e("./utils/event"),o=e("json3"),s=e("./facade"),a=e("./info-iframe-receiver"),l=e("./utils/iframe"),c=e("./location"),u=function(){};"production"!==r.env.NODE_ENV&&(u=e("debug")("sockjs-client:iframe-bootstrap")),t.exports=function(e,t){var r,h={};t.forEach((function(e){e.facadeTransport&&(h[e.facadeTransport.transportName]=e.facadeTransport)})),h[a.transportName]=a,e.bootstrap_iframe=function(){var t;l.currentWindowId=c.hash.slice(1);var a=function(i){if(i.source===parent&&(void 0===r&&(r=i.origin),i.origin===r)){var a;try{a=o.parse(i.data)}catch(e){return void u("bad json",i.data)}if(a.windowId===l.currentWindowId)switch(a.type){case"s":var d;try{d=o.parse(a.data)}catch(e){u("bad json",a.data);break}var p=d[0],f=d[1],m=d[2],g=d[3];if(u(p,f,m,g),p!==e.version)throw new Error('Incompatible SockJS! Main site uses: "'+p+'", the iframe: "'+e.version+'".');if(!n.isOriginEqual(m,c.href)||!n.isOriginEqual(g,c.href))throw new Error("Can't connect to different domain from within an iframe. ("+c.href+", "+m+", "+g+")");t=new s(new h[f](m,g));break;case"m":t._send(a.data);break;case"c":t&&t._close(),t=null}}};i.attachEvent("message",a),l.postMessage("s")}}}).call(this,{env:{}})},{"./facade":7,"./info-iframe-receiver":10,"./location":13,"./utils/event":46,"./utils/iframe":47,"./utils/url":52,debug:55,json3:58}],9:[function(e,t,r){(function(r){"use strict";var n=e("events").EventEmitter,i=e("inherits"),o=e("json3"),s=e("./utils/object"),a=function(){};function l(e,t){n.call(this);var r=this,i=+new Date;this.xo=new t("GET",e),this.xo.once("finish",(function(e,t){var n,l;if(200===e){if(l=+new Date-i,t)try{n=o.parse(t)}catch(e){a("bad json",t)}s.isObject(n)||(n={})}r.emit("finish",n,l),r.removeAllListeners()}))}"production"!==r.env.NODE_ENV&&(a=e("debug")("sockjs-client:info-ajax")),i(l,n),l.prototype.close=function(){this.removeAllListeners(),this.xo.close()},t.exports=l}).call(this,{env:{}})},{"./utils/object":49,debug:55,events:3,inherits:57,json3:58}],10:[function(e,t,r){"use strict";var n=e("inherits"),i=e("events").EventEmitter,o=e("json3"),s=e("./transport/sender/xhr-local"),a=e("./info-ajax");function l(e){var t=this;i.call(this),this.ir=new a(e,s),this.ir.once("finish",(function(e,r){t.ir=null,t.emit("message",o.stringify([e,r]))}))}n(l,i),l.transportName="iframe-info-receiver",l.prototype.close=function(){this.ir&&(this.ir.close(),this.ir=null),this.removeAllListeners()},t.exports=l},{"./info-ajax":9,"./transport/sender/xhr-local":37,events:3,inherits:57,json3:58}],11:[function(e,t,n){(function(r,n){"use strict";var i=e("events").EventEmitter,o=e("inherits"),s=e("json3"),a=e("./utils/event"),l=e("./transport/iframe"),c=e("./info-iframe-receiver"),u=function(){};function h(e,t){var r=this;i.call(this);var o=function(){var n=r.ifr=new l(c.transportName,t,e);n.once("message",(function(e){if(e){var t;try{t=s.parse(e)}catch(t){return u("bad json",e),r.emit("finish"),void r.close()}var n=t[0],i=t[1];r.emit("finish",n,i)}r.close()})),n.once("close",(function(){r.emit("finish"),r.close()}))};n.document.body?o():a.attachEvent("load",o)}"production"!==r.env.NODE_ENV&&(u=e("debug")("sockjs-client:info-iframe")),o(h,i),h.enabled=function(){return l.enabled()},h.prototype.close=function(){this.ifr&&this.ifr.close(),this.removeAllListeners(),this.ifr=null},t.exports=h}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./info-iframe-receiver":10,"./transport/iframe":22,"./utils/event":46,debug:55,events:3,inherits:57,json3:58}],12:[function(e,t,r){(function(r){"use strict";var n=e("events").EventEmitter,i=e("inherits"),o=e("./utils/url"),s=e("./transport/sender/xdr"),a=e("./transport/sender/xhr-cors"),l=e("./transport/sender/xhr-local"),c=e("./transport/sender/xhr-fake"),u=e("./info-iframe"),h=e("./info-ajax"),d=function(){};function p(e,t){d(e);var r=this;n.call(this),setTimeout((function(){r.doXhr(e,t)}),0)}"production"!==r.env.NODE_ENV&&(d=e("debug")("sockjs-client:info-receiver")),i(p,n),p._getReceiver=function(e,t,r){return r.sameOrigin?new h(t,l):a.enabled?new h(t,a):s.enabled&&r.sameScheme?new h(t,s):u.enabled()?new u(e,t):new h(t,c)},p.prototype.doXhr=function(e,t){var r=this,n=o.addPath(e,"/info");d("doXhr",n),this.xo=p._getReceiver(e,n,t),this.timeoutRef=setTimeout((function(){d("timeout"),r._cleanup(!1),r.emit("finish")}),p.timeout),this.xo.once("finish",(function(e,t){d("finish",e,t),r._cleanup(!0),r.emit("finish",e,t)}))},p.prototype._cleanup=function(e){d("_cleanup"),clearTimeout(this.timeoutRef),this.timeoutRef=null,!e&&this.xo&&this.xo.close(),this.xo=null},p.prototype.close=function(){d("close"),this.removeAllListeners(),this._cleanup(!1)},p.timeout=8e3,t.exports=p}).call(this,{env:{}})},{"./info-ajax":9,"./info-iframe":11,"./transport/sender/xdr":34,"./transport/sender/xhr-cors":35,"./transport/sender/xhr-fake":36,"./transport/sender/xhr-local":37,"./utils/url":52,debug:55,events:3,inherits:57}],13:[function(e,t,n){(function(e){"use strict";t.exports=e.location||{origin:"http://localhost:80",protocol:"http:",host:"localhost",port:80,href:"http://localhost/",hash:""}}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],14:[function(e,t,n){(function(r,n){"use strict";e("./shims");var i,o=e("url-parse"),s=e("inherits"),a=e("json3"),l=e("./utils/random"),c=e("./utils/escape"),u=e("./utils/url"),h=e("./utils/event"),d=e("./utils/transport"),p=e("./utils/object"),f=e("./utils/browser"),m=e("./utils/log"),g=e("./event/event"),v=e("./event/eventtarget"),b=e("./location"),y=e("./event/close"),w=e("./event/trans-message"),x=e("./info-receiver"),k=function(){};function S(e,t,r){if(!(this instanceof S))return new S(e,t,r);if(arguments.length<1)throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");v.call(this),this.readyState=S.CONNECTING,this.extensions="",this.protocol="",(r=r||{}).protocols_whitelist&&m.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead."),this._transportsWhitelist=r.transports,this._transportOptions=r.transportOptions||{},this._timeout=r.timeout||0;var n=r.sessionId||8;if("function"==typeof n)this._generateSessionId=n;else{if("number"!=typeof n)throw new TypeError("If sessionId is used in the options, it needs to be a number or a function.");this._generateSessionId=function(){return l.string(n)}}this._server=r.server||l.numberString(1e3);var i=new o(e);if(!i.host||!i.protocol)throw new SyntaxError("The URL '"+e+"' is invalid");if(i.hash)throw new SyntaxError("The URL must not contain a fragment");if("http:"!==i.protocol&&"https:"!==i.protocol)throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '"+i.protocol+"' is not allowed.");var s="https:"===i.protocol;if("https:"===b.protocol&&!s&&!u.isLoopbackAddr(i.hostname))throw new Error("SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS");t?Array.isArray(t)||(t=[t]):t=[];var a=t.sort();a.forEach((function(e,t){if(!e)throw new SyntaxError("The protocols entry '"+e+"' is invalid.");if(t<a.length-1&&e===a[t+1])throw new SyntaxError("The protocols entry '"+e+"' is duplicated.")}));var c=u.getOrigin(b.href);this._origin=c?c.toLowerCase():null,i.set("pathname",i.pathname.replace(/\/+$/,"")),this.url=i.href,k("using url",this.url),this._urlInfo={nullOrigin:!f.hasDomain(),sameOrigin:u.isOriginEqual(this.url,b.href),sameScheme:u.isSchemeEqual(this.url,b.href)},this._ir=new x(this.url,this._urlInfo),this._ir.once("finish",this._receiveInfo.bind(this))}function A(e){return 1e3===e||e>=3e3&&e<=4999}"production"!==r.env.NODE_ENV&&(k=e("debug")("sockjs-client:main")),s(S,v),S.prototype.close=function(e,t){if(e&&!A(e))throw new Error("InvalidAccessError: Invalid code");if(t&&t.length>123)throw new SyntaxError("reason argument has an invalid length");if(this.readyState!==S.CLOSING&&this.readyState!==S.CLOSED){var r=!0;this._close(e||1e3,t||"Normal closure",r)}},S.prototype.send=function(e){if("string"!=typeof e&&(e=""+e),this.readyState===S.CONNECTING)throw new Error("InvalidStateError: The connection has not been established yet");this.readyState===S.OPEN&&this._transport.send(c.quote(e))},S.version=e("./version"),S.CONNECTING=0,S.OPEN=1,S.CLOSING=2,S.CLOSED=3,S.prototype._receiveInfo=function(e,t){if(k("_receiveInfo",t),this._ir=null,e){this._rto=this.countRTO(t),this._transUrl=e.base_url?e.base_url:this.url,e=p.extend(e,this._urlInfo),k("info",e);var r=i.filterToEnabled(this._transportsWhitelist,e);this._transports=r.main,k(this._transports.length+" enabled transports"),this._connect()}else this._close(1002,"Cannot connect to server")},S.prototype._connect=function(){for(var e=this._transports.shift();e;e=this._transports.shift()){if(k("attempt",e.transportName),e.needBody&&(!n.document.body||void 0!==n.document.readyState&&"complete"!==n.document.readyState&&"interactive"!==n.document.readyState))return k("waiting for body"),this._transports.unshift(e),void h.attachEvent("load",this._connect.bind(this));var t=Math.max(this._timeout,this._rto*e.roundTrips||5e3);this._transportTimeoutId=setTimeout(this._transportTimeout.bind(this),t),k("using timeout",t);var r=u.addPath(this._transUrl,"/"+this._server+"/"+this._generateSessionId()),i=this._transportOptions[e.transportName];k("transport url",r);var o=new e(r,this._transUrl,i);return o.on("message",this._transportMessage.bind(this)),o.once("close",this._transportClose.bind(this)),o.transportName=e.transportName,void(this._transport=o)}this._close(2e3,"All transports failed",!1)},S.prototype._transportTimeout=function(){k("_transportTimeout"),this.readyState===S.CONNECTING&&(this._transport&&this._transport.close(),this._transportClose(2007,"Transport timed out"))},S.prototype._transportMessage=function(e){k("_transportMessage",e);var t,r=this,n=e.slice(0,1),i=e.slice(1);switch(n){case"o":return void this._open();case"h":return this.dispatchEvent(new g("heartbeat")),void k("heartbeat",this.transport)}if(i)try{t=a.parse(i)}catch(e){k("bad json",i)}if(void 0!==t)switch(n){case"a":Array.isArray(t)&&t.forEach((function(e){k("message",r.transport,e),r.dispatchEvent(new w(e))}));break;case"m":k("message",this.transport,t),this.dispatchEvent(new w(t));break;case"c":Array.isArray(t)&&2===t.length&&this._close(t[0],t[1],!0)}else k("empty payload",i)},S.prototype._transportClose=function(e,t){k("_transportClose",this.transport,e,t),this._transport&&(this._transport.removeAllListeners(),this._transport=null,this.transport=null),A(e)||2e3===e||this.readyState!==S.CONNECTING?this._close(e,t):this._connect()},S.prototype._open=function(){k("_open",this._transport&&this._transport.transportName,this.readyState),this.readyState===S.CONNECTING?(this._transportTimeoutId&&(clearTimeout(this._transportTimeoutId),this._transportTimeoutId=null),this.readyState=S.OPEN,this.transport=this._transport.transportName,this.dispatchEvent(new g("open")),k("connected",this.transport)):this._close(1006,"Server lost session")},S.prototype._close=function(e,t,r){k("_close",this.transport,e,t,r,this.readyState);var n=!1;if(this._ir&&(n=!0,this._ir.close(),this._ir=null),this._transport&&(this._transport.close(),this._transport=null,this.transport=null),this.readyState===S.CLOSED)throw new Error("InvalidStateError: SockJS has already been closed");this.readyState=S.CLOSING,setTimeout(function(){this.readyState=S.CLOSED,n&&this.dispatchEvent(new g("error"));var i=new y("close");i.wasClean=r||!1,i.code=e||1e3,i.reason=t,this.dispatchEvent(i),this.onmessage=this.onclose=this.onerror=null,k("disconnected")}.bind(this),0)},S.prototype.countRTO=function(e){return e>100?4*e:300+e},t.exports=function(t){return i=d(t),e("./iframe-bootstrap")(S,t),S}}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./event/close":2,"./event/event":4,"./event/eventtarget":5,"./event/trans-message":6,"./iframe-bootstrap":8,"./info-receiver":12,"./location":13,"./shims":15,"./utils/browser":44,"./utils/escape":45,"./utils/event":46,"./utils/log":48,"./utils/object":49,"./utils/random":50,"./utils/transport":51,"./utils/url":52,"./version":53,debug:55,inherits:57,json3:58,"url-parse":61}],15:[function(e,t,r){"use strict";var n,i=Array.prototype,o=Object.prototype,s=Function.prototype,a=String.prototype,l=i.slice,c=o.toString,u=function(e){return"[object Function]"===o.toString.call(e)},h=function(e){return"[object Array]"===c.call(e)},d=function(e){return"[object String]"===c.call(e)},p=Object.defineProperty&&function(){try{return Object.defineProperty({},"x",{}),!0}catch(e){return!1}}();n=p?function(e,t,r,n){!n&&t in e||Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:!0,value:r})}:function(e,t,r,n){!n&&t in e||(e[t]=r)};var f=function(e,t,r){for(var i in t)o.hasOwnProperty.call(t,i)&&n(e,i,t[i],r)},m=function(e){if(null==e)throw new TypeError("can't convert "+e+" to object");return Object(e)};function g(e){var t=+e;return t!=t?t=0:0!==t&&t!==1/0&&t!==-1/0&&(t=(t>0||-1)*Math.floor(Math.abs(t))),t}function v(e){return e>>>0}function b(){}f(s,{bind:function(e){var t=this;if(!u(t))throw new TypeError("Function.prototype.bind called on incompatible "+t);for(var r=l.call(arguments,1),n=function(){if(this instanceof a){var n=t.apply(this,r.concat(l.call(arguments)));return Object(n)===n?n:this}return t.apply(e,r.concat(l.call(arguments)))},i=Math.max(0,t.length-r.length),o=[],s=0;s<i;s++)o.push("$"+s);var a=Function("binder","return function ("+o.join(",")+"){ return binder.apply(this, arguments); }")(n);return t.prototype&&(b.prototype=t.prototype,a.prototype=new b,b.prototype=null),a}}),f(Array,{isArray:h});var y,w,x,k=Object("a"),S="a"!==k[0]||!(0 in k);f(i,{forEach:function(e){var t=m(this),r=S&&d(this)?this.split(""):t,n=arguments[1],i=-1,o=r.length>>>0;if(!u(e))throw new TypeError;for(;++i<o;)i in r&&e.call(n,r[i],i,t)}},(y=i.forEach,w=!0,x=!0,y&&(y.call("foo",(function(e,t,r){"object"!=typeof r&&(w=!1)})),y.call([1],(function(){x="string"==typeof this}),"x")),!(y&&w&&x)));var A=Array.prototype.indexOf&&-1!==[0,1].indexOf(1,2);f(i,{indexOf:function(e){var t=S&&d(this)?this.split(""):m(this),r=t.length>>>0;if(!r)return-1;var n=0;for(arguments.length>1&&(n=g(arguments[1])),n=n>=0?n:Math.max(0,r+n);n<r;n++)if(n in t&&t[n]===e)return n;return-1}},A);var M,C=a.split;2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||".".split(/()()/).length>1?(M=void 0===/()??/.exec("")[1],a.split=function(e,t){var r=this;if(void 0===e&&0===t)return[];if("[object RegExp]"!==c.call(e))return C.call(this,e,t);var n,o,s,a,l=[],u=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.extended?"x":"")+(e.sticky?"y":""),h=0;for(e=new RegExp(e.source,u+"g"),r+="",M||(n=new RegExp("^"+e.source+"$(?!\\s)",u)),t=void 0===t?-1>>>0:v(t);(o=e.exec(r))&&!((s=o.index+o[0].length)>h&&(l.push(r.slice(h,o.index)),!M&&o.length>1&&o[0].replace(n,(function(){for(var e=1;e<arguments.length-2;e++)void 0===arguments[e]&&(o[e]=void 0)})),o.length>1&&o.index<r.length&&i.push.apply(l,o.slice(1)),a=o[0].length,h=s,l.length>=t));)e.lastIndex===o.index&&e.lastIndex++;return h===r.length?!a&&e.test("")||l.push(""):l.push(r.slice(h)),l.length>t?l.slice(0,t):l}):"0".split(void 0,0).length&&(a.split=function(e,t){return void 0===e&&0===t?[]:C.call(this,e,t)});var N=a.substr,E="".substr&&"b"!=="0b".substr(-1);f(a,{substr:function(e,t){return N.call(this,e<0&&(e=this.length+e)<0?0:e,t)}},E)},{}],16:[function(e,t,r){"use strict";t.exports=[e("./transport/websocket"),e("./transport/xhr-streaming"),e("./transport/xdr-streaming"),e("./transport/eventsource"),e("./transport/lib/iframe-wrap")(e("./transport/eventsource")),e("./transport/htmlfile"),e("./transport/lib/iframe-wrap")(e("./transport/htmlfile")),e("./transport/xhr-polling"),e("./transport/xdr-polling"),e("./transport/lib/iframe-wrap")(e("./transport/xhr-polling")),e("./transport/jsonp-polling")]},{"./transport/eventsource":20,"./transport/htmlfile":21,"./transport/jsonp-polling":23,"./transport/lib/iframe-wrap":26,"./transport/websocket":38,"./transport/xdr-polling":39,"./transport/xdr-streaming":40,"./transport/xhr-polling":41,"./transport/xhr-streaming":42}],17:[function(e,t,n){(function(r,n){"use strict";var i=e("events").EventEmitter,o=e("inherits"),s=e("../../utils/event"),a=e("../../utils/url"),l=n.XMLHttpRequest,c=function(){};function u(e,t,r,n){c(e,t);var o=this;i.call(this),setTimeout((function(){o._start(e,t,r,n)}),0)}"production"!==r.env.NODE_ENV&&(c=e("debug")("sockjs-client:browser:xhr")),o(u,i),u.prototype._start=function(e,t,r,n){var i=this;try{this.xhr=new l}catch(e){}if(!this.xhr)return c("no xhr"),this.emit("finish",0,"no xhr support"),void this._cleanup();t=a.addQuery(t,"t="+ +new Date),this.unloadRef=s.unloadAdd((function(){c("unload cleanup"),i._cleanup(!0)}));try{this.xhr.open(e,t,!0),this.timeout&&"timeout"in this.xhr&&(this.xhr.timeout=this.timeout,this.xhr.ontimeout=function(){c("xhr timeout"),i.emit("finish",0,""),i._cleanup(!1)})}catch(e){return c("exception",e),this.emit("finish",0,""),void this._cleanup(!1)}if(n&&n.noCredentials||!u.supportsCORS||(c("withCredentials"),this.xhr.withCredentials=!0),n&&n.headers)for(var o in n.headers)this.xhr.setRequestHeader(o,n.headers[o]);this.xhr.onreadystatechange=function(){if(i.xhr){var e,t,r=i.xhr;switch(c("readyState",r.readyState),r.readyState){case 3:try{t=r.status,e=r.responseText}catch(e){}c("status",t),1223===t&&(t=204),200===t&&e&&e.length>0&&(c("chunk"),i.emit("chunk",t,e));break;case 4:t=r.status,c("status",t),1223===t&&(t=204),12005!==t&&12029!==t||(t=0),c("finish",t,r.responseText),i.emit("finish",t,r.responseText),i._cleanup(!1)}}};try{i.xhr.send(r)}catch(e){i.emit("finish",0,""),i._cleanup(!1)}},u.prototype._cleanup=function(e){if(c("cleanup"),this.xhr){if(this.removeAllListeners(),s.unloadDel(this.unloadRef),this.xhr.onreadystatechange=function(){},this.xhr.ontimeout&&(this.xhr.ontimeout=null),e)try{this.xhr.abort()}catch(e){}this.unloadRef=this.xhr=null}},u.prototype.close=function(){c("close"),this._cleanup(!0)},u.enabled=!!l;var h=["Active"].concat("Object").join("X");!u.enabled&&h in n&&(c("overriding xmlhttprequest"),l=function(){try{return new n[h]("Microsoft.XMLHTTP")}catch(e){return null}},u.enabled=!!new l);var d=!1;try{d="withCredentials"in new l}catch(e){}u.supportsCORS=d,t.exports=u}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/event":46,"../../utils/url":52,debug:55,events:3,inherits:57}],18:[function(e,t,n){(function(e){t.exports=e.EventSource}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],19:[function(e,t,n){(function(e){"use strict";var r=e.WebSocket||e.MozWebSocket;t.exports=r?function(e){return new r(e)}:void 0}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],20:[function(e,t,r){"use strict";var n=e("inherits"),i=e("./lib/ajax-based"),o=e("./receiver/eventsource"),s=e("./sender/xhr-cors"),a=e("eventsource");function l(e){if(!l.enabled())throw new Error("Transport created when disabled");i.call(this,e,"/eventsource",o,s)}n(l,i),l.enabled=function(){return!!a},l.transportName="eventsource",l.roundTrips=2,t.exports=l},{"./lib/ajax-based":24,"./receiver/eventsource":29,"./sender/xhr-cors":35,eventsource:18,inherits:57}],21:[function(e,t,r){"use strict";var n=e("inherits"),i=e("./receiver/htmlfile"),o=e("./sender/xhr-local"),s=e("./lib/ajax-based");function a(e){if(!i.enabled)throw new Error("Transport created when disabled");s.call(this,e,"/htmlfile",i,o)}n(a,s),a.enabled=function(e){return i.enabled&&e.sameOrigin},a.transportName="htmlfile",a.roundTrips=2,t.exports=a},{"./lib/ajax-based":24,"./receiver/htmlfile":30,"./sender/xhr-local":37,inherits:57}],22:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),i=e("json3"),o=e("events").EventEmitter,s=e("../version"),a=e("../utils/url"),l=e("../utils/iframe"),c=e("../utils/event"),u=e("../utils/random"),h=function(){};function d(e,t,r){if(!d.enabled())throw new Error("Transport created when disabled");o.call(this);var n=this;this.origin=a.getOrigin(r),this.baseUrl=r,this.transUrl=t,this.transport=e,this.windowId=u.string(8);var i=a.addPath(r,"/iframe.html")+"#"+this.windowId;h(e,t,i),this.iframeObj=l.createIframe(i,(function(e){h("err callback"),n.emit("close",1006,"Unable to load an iframe ("+e+")"),n.close()})),this.onmessageCallback=this._message.bind(this),c.attachEvent("message",this.onmessageCallback)}"production"!==r.env.NODE_ENV&&(h=e("debug")("sockjs-client:transport:iframe")),n(d,o),d.prototype.close=function(){if(h("close"),this.removeAllListeners(),this.iframeObj){c.detachEvent("message",this.onmessageCallback);try{this.postMessage("c")}catch(e){}this.iframeObj.cleanup(),this.iframeObj=null,this.onmessageCallback=this.iframeObj=null}},d.prototype._message=function(e){if(h("message",e.data),a.isOriginEqual(e.origin,this.origin)){var t;try{t=i.parse(e.data)}catch(t){return void h("bad json",e.data)}if(t.windowId===this.windowId)switch(t.type){case"s":this.iframeObj.loaded(),this.postMessage("s",i.stringify([s,this.transport,this.transUrl,this.baseUrl]));break;case"t":this.emit("message",t.data);break;case"c":var r;try{r=i.parse(t.data)}catch(e){return void h("bad json",t.data)}this.emit("close",r[0],r[1]),this.close()}else h("mismatched window id",t.windowId,this.windowId)}else h("not same origin",e.origin,this.origin)},d.prototype.postMessage=function(e,t){h("postMessage",e,t),this.iframeObj.post(i.stringify({windowId:this.windowId,type:e,data:t||""}),this.origin)},d.prototype.send=function(e){h("send",e),this.postMessage("m",e)},d.enabled=function(){return l.iframeEnabled},d.transportName="iframe",d.roundTrips=2,t.exports=d}).call(this,{env:{}})},{"../utils/event":46,"../utils/iframe":47,"../utils/random":50,"../utils/url":52,"../version":53,debug:55,events:3,inherits:57,json3:58}],23:[function(e,t,n){(function(r){"use strict";var n=e("inherits"),i=e("./lib/sender-receiver"),o=e("./receiver/jsonp"),s=e("./sender/jsonp");function a(e){if(!a.enabled())throw new Error("Transport created when disabled");i.call(this,e,"/jsonp",s,o)}n(a,i),a.enabled=function(){return!!r.document},a.transportName="jsonp-polling",a.roundTrips=1,a.needBody=!0,t.exports=a}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./lib/sender-receiver":28,"./receiver/jsonp":31,"./sender/jsonp":33,inherits:57}],24:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),i=e("../../utils/url"),o=e("./sender-receiver"),s=function(){};function a(e){return function(t,r,n){s("create ajax sender",t,r);var o={};"string"==typeof r&&(o.headers={"Content-type":"text/plain"});var a=i.addPath(t,"/xhr_send"),l=new e("POST",a,r,o);return l.once("finish",(function(e){if(s("finish",e),l=null,200!==e&&204!==e)return n(new Error("http status "+e));n()})),function(){s("abort"),l.close(),l=null;var e=new Error("Aborted");e.code=1e3,n(e)}}}function l(e,t,r,n){o.call(this,e,t,a(n),r,n)}"production"!==r.env.NODE_ENV&&(s=e("debug")("sockjs-client:ajax-based")),n(l,o),t.exports=l}).call(this,{env:{}})},{"../../utils/url":52,"./sender-receiver":28,debug:55,inherits:57}],25:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),i=e("events").EventEmitter,o=function(){};function s(e,t){o(e),i.call(this),this.sendBuffer=[],this.sender=t,this.url=e}"production"!==r.env.NODE_ENV&&(o=e("debug")("sockjs-client:buffered-sender")),n(s,i),s.prototype.send=function(e){o("send",e),this.sendBuffer.push(e),this.sendStop||this.sendSchedule()},s.prototype.sendScheduleWait=function(){o("sendScheduleWait");var e,t=this;this.sendStop=function(){o("sendStop"),t.sendStop=null,clearTimeout(e)},e=setTimeout((function(){o("timeout"),t.sendStop=null,t.sendSchedule()}),25)},s.prototype.sendSchedule=function(){o("sendSchedule",this.sendBuffer.length);var e=this;if(this.sendBuffer.length>0){var t="["+this.sendBuffer.join(",")+"]";this.sendStop=this.sender(this.url,t,(function(t){e.sendStop=null,t?(o("error",t),e.emit("close",t.code||1006,"Sending error: "+t),e.close()):e.sendScheduleWait()})),this.sendBuffer=[]}},s.prototype._cleanup=function(){o("_cleanup"),this.removeAllListeners()},s.prototype.close=function(){o("close"),this._cleanup(),this.sendStop&&(this.sendStop(),this.sendStop=null)},t.exports=s}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],26:[function(e,t,n){(function(r){"use strict";var n=e("inherits"),i=e("../iframe"),o=e("../../utils/object");t.exports=function(e){function t(t,r){i.call(this,e.transportName,t,r)}return n(t,i),t.enabled=function(t,n){if(!r.document)return!1;var s=o.extend({},n);return s.sameOrigin=!0,e.enabled(s)&&i.enabled()},t.transportName="iframe-"+e.transportName,t.needBody=!0,t.roundTrips=i.roundTrips+e.roundTrips-1,t.facadeTransport=e,t}}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/object":49,"../iframe":22,inherits:57}],27:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),i=e("events").EventEmitter,o=function(){};function s(e,t,r){o(t),i.call(this),this.Receiver=e,this.receiveUrl=t,this.AjaxObject=r,this._scheduleReceiver()}"production"!==r.env.NODE_ENV&&(o=e("debug")("sockjs-client:polling")),n(s,i),s.prototype._scheduleReceiver=function(){o("_scheduleReceiver");var e=this,t=this.poll=new this.Receiver(this.receiveUrl,this.AjaxObject);t.on("message",(function(t){o("message",t),e.emit("message",t)})),t.once("close",(function(r,n){o("close",r,n,e.pollIsClosing),e.poll=t=null,e.pollIsClosing||("network"===n?e._scheduleReceiver():(e.emit("close",r||1006,n),e.removeAllListeners()))}))},s.prototype.abort=function(){o("abort"),this.removeAllListeners(),this.pollIsClosing=!0,this.poll&&this.poll.abort()},t.exports=s}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],28:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),i=e("../../utils/url"),o=e("./buffered-sender"),s=e("./polling"),a=function(){};function l(e,t,r,n,l){var c=i.addPath(e,t);a(c);var u=this;o.call(this,e,r),this.poll=new s(n,c,l),this.poll.on("message",(function(e){a("poll message",e),u.emit("message",e)})),this.poll.once("close",(function(e,t){a("poll close",e,t),u.poll=null,u.emit("close",e,t),u.close()}))}"production"!==r.env.NODE_ENV&&(a=e("debug")("sockjs-client:sender-receiver")),n(l,o),l.prototype.close=function(){o.prototype.close.call(this),a("close"),this.removeAllListeners(),this.poll&&(this.poll.abort(),this.poll=null)},t.exports=l}).call(this,{env:{}})},{"../../utils/url":52,"./buffered-sender":25,"./polling":27,debug:55,inherits:57}],29:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),i=e("events").EventEmitter,o=e("eventsource"),s=function(){};function a(e){s(e),i.call(this);var t=this,r=this.es=new o(e);r.onmessage=function(e){s("message",e.data),t.emit("message",decodeURI(e.data))},r.onerror=function(e){s("error",r.readyState,e);var n=2!==r.readyState?"network":"permanent";t._cleanup(),t._close(n)}}"production"!==r.env.NODE_ENV&&(s=e("debug")("sockjs-client:receiver:eventsource")),n(a,i),a.prototype.abort=function(){s("abort"),this._cleanup(),this._close("user")},a.prototype._cleanup=function(){s("cleanup");var e=this.es;e&&(e.onmessage=e.onerror=null,e.close(),this.es=null)},a.prototype._close=function(e){s("close",e);var t=this;setTimeout((function(){t.emit("close",null,e),t.removeAllListeners()}),200)},t.exports=a}).call(this,{env:{}})},{debug:55,events:3,eventsource:18,inherits:57}],30:[function(e,t,n){(function(r,n){"use strict";var i=e("inherits"),o=e("../../utils/iframe"),s=e("../../utils/url"),a=e("events").EventEmitter,l=e("../../utils/random"),c=function(){};function u(e){c(e),a.call(this);var t=this;o.polluteGlobalNamespace(),this.id="a"+l.string(6),e=s.addQuery(e,"c="+decodeURIComponent(o.WPrefix+"."+this.id)),c("using htmlfile",u.htmlfileEnabled);var r=u.htmlfileEnabled?o.createHtmlfile:o.createIframe;n[o.WPrefix][this.id]={start:function(){c("start"),t.iframeObj.loaded()},message:function(e){c("message",e),t.emit("message",e)},stop:function(){c("stop"),t._cleanup(),t._close("network")}},this.iframeObj=r(e,(function(){c("callback"),t._cleanup(),t._close("permanent")}))}"production"!==r.env.NODE_ENV&&(c=e("debug")("sockjs-client:receiver:htmlfile")),i(u,a),u.prototype.abort=function(){c("abort"),this._cleanup(),this._close("user")},u.prototype._cleanup=function(){c("_cleanup"),this.iframeObj&&(this.iframeObj.cleanup(),this.iframeObj=null),delete n[o.WPrefix][this.id]},u.prototype._close=function(e){c("_close",e),this.emit("close",null,e),this.removeAllListeners()},u.htmlfileEnabled=!1;var h=["Active"].concat("Object").join("X");if(h in n)try{u.htmlfileEnabled=!!new n[h]("htmlfile")}catch(e){}u.enabled=u.htmlfileEnabled||o.iframeEnabled,t.exports=u}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:55,events:3,inherits:57}],31:[function(e,t,n){(function(r,n){"use strict";var i=e("../../utils/iframe"),o=e("../../utils/random"),s=e("../../utils/browser"),a=e("../../utils/url"),l=e("inherits"),c=e("events").EventEmitter,u=function(){};function h(e){u(e);var t=this;c.call(this),i.polluteGlobalNamespace(),this.id="a"+o.string(6);var r=a.addQuery(e,"c="+encodeURIComponent(i.WPrefix+"."+this.id));n[i.WPrefix][this.id]=this._callback.bind(this),this._createScript(r),this.timeoutId=setTimeout((function(){u("timeout"),t._abort(new Error("JSONP script loaded abnormally (timeout)"))}),h.timeout)}"production"!==r.env.NODE_ENV&&(u=e("debug")("sockjs-client:receiver:jsonp")),l(h,c),h.prototype.abort=function(){if(u("abort"),n[i.WPrefix][this.id]){var e=new Error("JSONP user aborted read");e.code=1e3,this._abort(e)}},h.timeout=35e3,h.scriptErrorTimeout=1e3,h.prototype._callback=function(e){u("_callback",e),this._cleanup(),this.aborting||(e&&(u("message",e),this.emit("message",e)),this.emit("close",null,"network"),this.removeAllListeners())},h.prototype._abort=function(e){u("_abort",e),this._cleanup(),this.aborting=!0,this.emit("close",e.code,e.message),this.removeAllListeners()},h.prototype._cleanup=function(){if(u("_cleanup"),clearTimeout(this.timeoutId),this.script2&&(this.script2.parentNode.removeChild(this.script2),this.script2=null),this.script){var e=this.script;e.parentNode.removeChild(e),e.onreadystatechange=e.onerror=e.onload=e.onclick=null,this.script=null}delete n[i.WPrefix][this.id]},h.prototype._scriptError=function(){u("_scriptError");var e=this;this.errorTimer||(this.errorTimer=setTimeout((function(){e.loadedOkay||e._abort(new Error("JSONP script loaded abnormally (onerror)"))}),h.scriptErrorTimeout))},h.prototype._createScript=function(e){u("_createScript",e);var t,r=this,i=this.script=n.document.createElement("script");if(i.id="a"+o.string(8),i.src=e,i.type="text/javascript",i.charset="UTF-8",i.onerror=this._scriptError.bind(this),i.onload=function(){u("onload"),r._abort(new Error("JSONP script loaded abnormally (onload)"))},i.onreadystatechange=function(){if(u("onreadystatechange",i.readyState),/loaded|closed/.test(i.readyState)){if(i&&i.htmlFor&&i.onclick){r.loadedOkay=!0;try{i.onclick()}catch(e){}}i&&r._abort(new Error("JSONP script loaded abnormally (onreadystatechange)"))}},void 0===i.async&&n.document.attachEvent)if(s.isOpera())(t=this.script2=n.document.createElement("script")).text="try{var a = document.getElementById('"+i.id+"'); if(a)a.onerror();}catch(x){};",i.async=t.async=!1;else{try{i.htmlFor=i.id,i.event="onclick"}catch(e){}i.async=!0}void 0!==i.async&&(i.async=!0);var a=n.document.getElementsByTagName("head")[0];a.insertBefore(i,a.firstChild),t&&a.insertBefore(t,a.firstChild)},t.exports=h}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:55,events:3,inherits:57}],32:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),i=e("events").EventEmitter,o=function(){};function s(e,t){o(e),i.call(this);var r=this;this.bufferPosition=0,this.xo=new t("POST",e,null),this.xo.on("chunk",this._chunkHandler.bind(this)),this.xo.once("finish",(function(e,t){o("finish",e,t),r._chunkHandler(e,t),r.xo=null;var n=200===e?"network":"permanent";o("close",n),r.emit("close",null,n),r._cleanup()}))}"production"!==r.env.NODE_ENV&&(o=e("debug")("sockjs-client:receiver:xhr")),n(s,i),s.prototype._chunkHandler=function(e,t){if(o("_chunkHandler",e),200===e&&t)for(var r=-1;;this.bufferPosition+=r+1){var n=t.slice(this.bufferPosition);if(-1===(r=n.indexOf("\n")))break;var i=n.slice(0,r);i&&(o("message",i),this.emit("message",i))}},s.prototype._cleanup=function(){o("_cleanup"),this.removeAllListeners()},s.prototype.abort=function(){o("abort"),this.xo&&(this.xo.close(),o("close"),this.emit("close",null,"user"),this.xo=null),this._cleanup()},t.exports=s}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],33:[function(e,t,n){(function(r,n){"use strict";var i,o,s=e("../../utils/random"),a=e("../../utils/url"),l=function(){};function c(e){l("createIframe",e);try{return n.document.createElement('<iframe name="'+e+'">')}catch(r){var t=n.document.createElement("iframe");return t.name=e,t}}function u(){l("createForm"),(i=n.document.createElement("form")).style.display="none",i.style.position="absolute",i.method="POST",i.enctype="application/x-www-form-urlencoded",i.acceptCharset="UTF-8",(o=n.document.createElement("textarea")).name="d",i.appendChild(o),n.document.body.appendChild(i)}"production"!==r.env.NODE_ENV&&(l=e("debug")("sockjs-client:sender:jsonp")),t.exports=function(e,t,r){l(e,t),i||u();var n="a"+s.string(8);i.target=n,i.action=a.addQuery(a.addPath(e,"/jsonp_send"),"i="+n);var h=c(n);h.id=n,h.style.display="none",i.appendChild(h);try{o.value=t}catch(e){}i.submit();var d=function(e){l("completed",n,e),h.onerror&&(h.onreadystatechange=h.onerror=h.onload=null,setTimeout((function(){l("cleaning up",n),h.parentNode.removeChild(h),h=null}),500),o.value="",r(e))};return h.onerror=function(){l("onerror",n),d()},h.onload=function(){l("onload",n),d()},h.onreadystatechange=function(e){l("onreadystatechange",n,h.readyState,e),"complete"===h.readyState&&d()},function(){l("aborted",n),d(new Error("Aborted"))}}}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/random":50,"../../utils/url":52,debug:55}],34:[function(e,t,n){(function(r,n){"use strict";var i=e("events").EventEmitter,o=e("inherits"),s=e("../../utils/event"),a=e("../../utils/browser"),l=e("../../utils/url"),c=function(){};function u(e,t,r){c(e,t);var n=this;i.call(this),setTimeout((function(){n._start(e,t,r)}),0)}"production"!==r.env.NODE_ENV&&(c=e("debug")("sockjs-client:sender:xdr")),o(u,i),u.prototype._start=function(e,t,r){c("_start");var i=this,o=new n.XDomainRequest;t=l.addQuery(t,"t="+ +new Date),o.onerror=function(){c("onerror"),i._error()},o.ontimeout=function(){c("ontimeout"),i._error()},o.onprogress=function(){c("progress",o.responseText),i.emit("chunk",200,o.responseText)},o.onload=function(){c("load"),i.emit("finish",200,o.responseText),i._cleanup(!1)},this.xdr=o,this.unloadRef=s.unloadAdd((function(){i._cleanup(!0)}));try{this.xdr.open(e,t),this.timeout&&(this.xdr.timeout=this.timeout),this.xdr.send(r)}catch(e){this._error()}},u.prototype._error=function(){this.emit("finish",0,""),this._cleanup(!1)},u.prototype._cleanup=function(e){if(c("cleanup",e),this.xdr){if(this.removeAllListeners(),s.unloadDel(this.unloadRef),this.xdr.ontimeout=this.xdr.onerror=this.xdr.onprogress=this.xdr.onload=null,e)try{this.xdr.abort()}catch(e){}this.unloadRef=this.xdr=null}},u.prototype.close=function(){c("close"),this._cleanup(!0)},u.enabled=!(!n.XDomainRequest||!a.hasDomain()),t.exports=u}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/event":46,"../../utils/url":52,debug:55,events:3,inherits:57}],35:[function(e,t,r){"use strict";var n=e("inherits"),i=e("../driver/xhr");function o(e,t,r,n){i.call(this,e,t,r,n)}n(o,i),o.enabled=i.enabled&&i.supportsCORS,t.exports=o},{"../driver/xhr":17,inherits:57}],36:[function(e,t,r){"use strict";var n=e("events").EventEmitter;function i(){var e=this;n.call(this),this.to=setTimeout((function(){e.emit("finish",200,"{}")}),i.timeout)}e("inherits")(i,n),i.prototype.close=function(){clearTimeout(this.to)},i.timeout=2e3,t.exports=i},{events:3,inherits:57}],37:[function(e,t,r){"use strict";var n=e("inherits"),i=e("../driver/xhr");function o(e,t,r){i.call(this,e,t,r,{noCredentials:!0})}n(o,i),o.enabled=i.enabled,t.exports=o},{"../driver/xhr":17,inherits:57}],38:[function(e,t,r){(function(r){"use strict";var n=e("../utils/event"),i=e("../utils/url"),o=e("inherits"),s=e("events").EventEmitter,a=e("./driver/websocket"),l=function(){};function c(e,t,r){if(!c.enabled())throw new Error("Transport created when disabled");s.call(this),l("constructor",e);var o=this,u=i.addPath(e,"/websocket");u="https"===u.slice(0,5)?"wss"+u.slice(5):"ws"+u.slice(4),this.url=u,this.ws=new a(this.url,[],r),this.ws.onmessage=function(e){l("message event",e.data),o.emit("message",e.data)},this.unloadRef=n.unloadAdd((function(){l("unload"),o.ws.close()})),this.ws.onclose=function(e){l("close event",e.code,e.reason),o.emit("close",e.code,e.reason),o._cleanup()},this.ws.onerror=function(e){l("error event",e),o.emit("close",1006,"WebSocket connection broken"),o._cleanup()}}"production"!==r.env.NODE_ENV&&(l=e("debug")("sockjs-client:websocket")),o(c,s),c.prototype.send=function(e){var t="["+e+"]";l("send",t),this.ws.send(t)},c.prototype.close=function(){l("close");var e=this.ws;this._cleanup(),e&&e.close()},c.prototype._cleanup=function(){l("_cleanup");var e=this.ws;e&&(e.onmessage=e.onclose=e.onerror=null),n.unloadDel(this.unloadRef),this.unloadRef=this.ws=null,this.removeAllListeners()},c.enabled=function(){return l("enabled"),!!a},c.transportName="websocket",c.roundTrips=2,t.exports=c}).call(this,{env:{}})},{"../utils/event":46,"../utils/url":52,"./driver/websocket":19,debug:55,events:3,inherits:57}],39:[function(e,t,r){"use strict";var n=e("inherits"),i=e("./lib/ajax-based"),o=e("./xdr-streaming"),s=e("./receiver/xhr"),a=e("./sender/xdr");function l(e){if(!a.enabled)throw new Error("Transport created when disabled");i.call(this,e,"/xhr",s,a)}n(l,i),l.enabled=o.enabled,l.transportName="xdr-polling",l.roundTrips=2,t.exports=l},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"./xdr-streaming":40,inherits:57}],40:[function(e,t,r){"use strict";var n=e("inherits"),i=e("./lib/ajax-based"),o=e("./receiver/xhr"),s=e("./sender/xdr");function a(e){if(!s.enabled)throw new Error("Transport created when disabled");i.call(this,e,"/xhr_streaming",o,s)}n(a,i),a.enabled=function(e){return!e.cookie_needed&&!e.nullOrigin&&s.enabled&&e.sameScheme},a.transportName="xdr-streaming",a.roundTrips=2,t.exports=a},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,inherits:57}],41:[function(e,t,r){"use strict";var n=e("inherits"),i=e("./lib/ajax-based"),o=e("./receiver/xhr"),s=e("./sender/xhr-cors"),a=e("./sender/xhr-local");function l(e){if(!a.enabled&&!s.enabled)throw new Error("Transport created when disabled");i.call(this,e,"/xhr",o,s)}n(l,i),l.enabled=function(e){return!e.nullOrigin&&(!(!a.enabled||!e.sameOrigin)||s.enabled)},l.transportName="xhr-polling",l.roundTrips=2,t.exports=l},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],42:[function(e,t,n){(function(r){"use strict";var n=e("inherits"),i=e("./lib/ajax-based"),o=e("./receiver/xhr"),s=e("./sender/xhr-cors"),a=e("./sender/xhr-local"),l=e("../utils/browser");function c(e){if(!a.enabled&&!s.enabled)throw new Error("Transport created when disabled");i.call(this,e,"/xhr_streaming",o,s)}n(c,i),c.enabled=function(e){return!e.nullOrigin&&!l.isOpera()&&s.enabled},c.transportName="xhr-streaming",c.roundTrips=2,c.needBody=!!r.document,t.exports=c}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../utils/browser":44,"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],43:[function(e,t,n){(function(e){"use strict";e.crypto&&e.crypto.getRandomValues?t.exports.randomBytes=function(t){var r=new Uint8Array(t);return e.crypto.getRandomValues(r),r}:t.exports.randomBytes=function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=Math.floor(256*Math.random());return t}}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],44:[function(e,t,n){(function(e){"use strict";t.exports={isOpera:function(){return e.navigator&&/opera/i.test(e.navigator.userAgent)},isKonqueror:function(){return e.navigator&&/konqueror/i.test(e.navigator.userAgent)},hasDomain:function(){if(!e.document)return!0;try{return!!e.document.domain}catch(e){return!1}}}}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],45:[function(e,t,r){"use strict";var n,i=e("json3"),o=/[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,s=function(e){var t,r={},n=[];for(t=0;t<65536;t++)n.push(String.fromCharCode(t));return e.lastIndex=0,n.join("").replace(e,(function(e){return r[e]="\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4),""})),e.lastIndex=0,r};t.exports={quote:function(e){var t=i.stringify(e);return o.lastIndex=0,o.test(t)?(n||(n=s(o)),t.replace(o,(function(e){return n[e]}))):t}}},{json3:58}],46:[function(e,t,n){(function(r){"use strict";var n=e("./random"),i={},o=!1,s=r.chrome&&r.chrome.app&&r.chrome.app.runtime;t.exports={attachEvent:function(e,t){void 0!==r.addEventListener?r.addEventListener(e,t,!1):r.document&&r.attachEvent&&(r.document.attachEvent("on"+e,t),r.attachEvent("on"+e,t))},detachEvent:function(e,t){void 0!==r.addEventListener?r.removeEventListener(e,t,!1):r.document&&r.detachEvent&&(r.document.detachEvent("on"+e,t),r.detachEvent("on"+e,t))},unloadAdd:function(e){if(s)return null;var t=n.string(8);return i[t]=e,o&&setTimeout(this.triggerUnloadCallbacks,0),t},unloadDel:function(e){e in i&&delete i[e]},triggerUnloadCallbacks:function(){for(var e in i)i[e](),delete i[e]}};var a=function(){o||(o=!0,t.exports.triggerUnloadCallbacks())};s||t.exports.attachEvent("unload",a)}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./random":50}],47:[function(e,t,n){(function(r,n){"use strict";var i=e("./event"),o=e("json3"),s=e("./browser"),a=function(){};"production"!==r.env.NODE_ENV&&(a=e("debug")("sockjs-client:utils:iframe")),t.exports={WPrefix:"_jp",currentWindowId:null,polluteGlobalNamespace:function(){t.exports.WPrefix in n||(n[t.exports.WPrefix]={})},postMessage:function(e,r){n.parent!==n?n.parent.postMessage(o.stringify({windowId:t.exports.currentWindowId,type:e,data:r||""}),"*"):a("Cannot postMessage, no parent window.",e,r)},createIframe:function(e,t){var r,o,s=n.document.createElement("iframe"),l=function(){a("unattach"),clearTimeout(r);try{s.onload=null}catch(e){}s.onerror=null},c=function(){a("cleanup"),s&&(l(),setTimeout((function(){s&&s.parentNode.removeChild(s),s=null}),0),i.unloadDel(o))},u=function(e){a("onerror",e),s&&(c(),t(e))},h=function(e,t){a("post",e,t),setTimeout((function(){try{s&&s.contentWindow&&s.contentWindow.postMessage(e,t)}catch(e){}}),0)};return s.src=e,s.style.display="none",s.style.position="absolute",s.onerror=function(){u("onerror")},s.onload=function(){a("onload"),clearTimeout(r),r=setTimeout((function(){u("onload timeout")}),2e3)},n.document.body.appendChild(s),r=setTimeout((function(){u("timeout")}),15e3),o=i.unloadAdd(c),{post:h,cleanup:c,loaded:l}},createHtmlfile:function(e,r){var o,s,l,c=["Active"].concat("Object").join("X"),u=new n[c]("htmlfile"),h=function(){clearTimeout(o),l.onerror=null},d=function(){u&&(h(),i.unloadDel(s),l.parentNode.removeChild(l),l=u=null,CollectGarbage())},p=function(e){a("onerror",e),u&&(d(),r(e))},f=function(e,t){try{setTimeout((function(){l&&l.contentWindow&&l.contentWindow.postMessage(e,t)}),0)}catch(e){}};u.open(),u.write('<html><script>document.domain="'+n.document.domain+'";<\/script></html>'),u.close(),u.parentWindow[t.exports.WPrefix]=n[t.exports.WPrefix];var m=u.createElement("div");return u.body.appendChild(m),l=u.createElement("iframe"),m.appendChild(l),l.src=e,l.onerror=function(){p("onerror")},o=setTimeout((function(){p("timeout")}),15e3),s=i.unloadAdd(d),{post:f,cleanup:d,loaded:h}}},t.exports.iframeEnabled=!1,n.document&&(t.exports.iframeEnabled=("function"==typeof n.postMessage||"object"==typeof n.postMessage)&&!s.isKonqueror())}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./browser":44,"./event":46,debug:55,json3:58}],48:[function(e,t,n){(function(e){"use strict";var r={};["log","debug","warn"].forEach((function(t){var n;try{n=e.console&&e.console[t]&&e.console[t].apply}catch(e){}r[t]=n?function(){return e.console[t].apply(e.console,arguments)}:"log"===t?function(){}:r.log})),t.exports=r}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],49:[function(e,t,r){"use strict";t.exports={isObject:function(e){var t=typeof e;return"function"===t||"object"===t&&!!e},extend:function(e){if(!this.isObject(e))return e;for(var t,r,n=1,i=arguments.length;n<i;n++)for(r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}}},{}],50:[function(e,t,r){"use strict";var n=e("crypto"),i="abcdefghijklmnopqrstuvwxyz012345";t.exports={string:function(e){for(var t=i.length,r=n.randomBytes(e),o=[],s=0;s<e;s++)o.push(i.substr(r[s]%t,1));return o.join("")},number:function(e){return Math.floor(Math.random()*e)},numberString:function(e){var t=(""+(e-1)).length;return(new Array(t+1).join("0")+this.number(e)).slice(-t)}}},{crypto:43}],51:[function(e,t,r){(function(r){"use strict";var n=function(){};"production"!==r.env.NODE_ENV&&(n=e("debug")("sockjs-client:utils:transport")),t.exports=function(e){return{filterToEnabled:function(t,r){var i={main:[],facade:[]};return t?"string"==typeof t&&(t=[t]):t=[],e.forEach((function(e){e&&("websocket"!==e.transportName||!1!==r.websocket?t.length&&-1===t.indexOf(e.transportName)?n("not in whitelist",e.transportName):e.enabled(r)?(n("enabled",e.transportName),i.main.push(e),e.facadeTransport&&i.facade.push(e.facadeTransport)):n("disabled",e.transportName):n("disabled from server","websocket"))})),i}}}}).call(this,{env:{}})},{debug:55}],52:[function(e,t,r){(function(r){"use strict";var n=e("url-parse"),i=function(){};"production"!==r.env.NODE_ENV&&(i=e("debug")("sockjs-client:utils:url")),t.exports={getOrigin:function(e){if(!e)return null;var t=new n(e);if("file:"===t.protocol)return null;var r=t.port;return r||(r="https:"===t.protocol?"443":"80"),t.protocol+"//"+t.hostname+":"+r},isOriginEqual:function(e,t){var r=this.getOrigin(e)===this.getOrigin(t);return i("same",e,t,r),r},isSchemeEqual:function(e,t){return e.split(":")[0]===t.split(":")[0]},addPath:function(e,t){var r=e.split("?");return r[0]+t+(r[1]?"?"+r[1]:"")},addQuery:function(e,t){return e+(-1===e.indexOf("?")?"?"+t:"&"+t)},isLoopbackAddr:function(e){return/^127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(e)||/^\[::1\]$/.test(e)}}}).call(this,{env:{}})},{debug:55,"url-parse":61}],53:[function(e,t,r){t.exports="1.5.0"},{}],54:[function(e,t,r){var n=1e3,i=60*n,o=60*i,s=24*o,a=7*s,l=365.25*s;function c(e){if(!((e=String(e)).length>100)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(t){var r=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return r*l;case"weeks":case"week":case"w":return r*a;case"days":case"day":case"d":return r*s;case"hours":case"hour":case"hrs":case"hr":case"h":return r*o;case"minutes":case"minute":case"mins":case"min":case"m":return r*i;case"seconds":case"second":case"secs":case"sec":case"s":return r*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}}}function u(e){var t=Math.abs(e);return t>=s?Math.round(e/s)+"d":t>=o?Math.round(e/o)+"h":t>=i?Math.round(e/i)+"m":t>=n?Math.round(e/n)+"s":e+"ms"}function h(e){var t=Math.abs(e);return t>=s?d(e,t,s,"day"):t>=o?d(e,t,o,"hour"):t>=i?d(e,t,i,"minute"):t>=n?d(e,t,n,"second"):e+" ms"}function d(e,t,r,n){var i=t>=1.5*r;return Math.round(e/r)+" "+n+(i?"s":"")}t.exports=function(e,t){t=t||{};var r=typeof e;if("string"===r&&e.length>0)return c(e);if("number"===r&&isFinite(e))return t.long?h(e):u(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},{}],55:[function(e,t,r){(function(n){"use strict";function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))}function s(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),this.useColors){var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var n=0,i=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(n++,"%c"===e&&(i=n))})),e.splice(i,0,r)}}function a(){var e;return"object"===("undefined"==typeof console?"undefined":i(console))&&console.log&&(e=console).log.apply(e,arguments)}function l(e){try{e?r.storage.setItem("debug",e):r.storage.removeItem("debug")}catch(e){}}function c(){var e;try{e=r.storage.getItem("debug")}catch(e){}return!e&&void 0!==n&&"env"in n&&(e=n.env.DEBUG),e}function u(){try{return localStorage}catch(e){}}r.log=a,r.formatArgs=s,r.save=l,r.load=c,r.useColors=o,r.storage=u(),r.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=e("./common")(r),t.exports.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}).call(this,{env:{}})},{"./common":56}],56:[function(e,t,r){"use strict";function n(t){function r(e){for(var t=0,r=0;r<e.length;r++)t=(t<<5)-t+e.charCodeAt(r),t|=0;return n.colors[Math.abs(t)%n.colors.length]}function n(e){var t;function s(){if(s.enabled){for(var e=arguments.length,r=new Array(e),i=0;i<e;i++)r[i]=arguments[i];var o=s,a=Number(new Date),l=a-(t||a);o.diff=l,o.prev=t,o.curr=a,t=a,r[0]=n.coerce(r[0]),"string"!=typeof r[0]&&r.unshift("%O");var c=0;r[0]=r[0].replace(/%([a-zA-Z%])/g,(function(e,t){if("%%"===e)return e;c++;var i=n.formatters[t];if("function"==typeof i){var s=r[c];e=i.call(o,s),r.splice(c,1),c--}return e})),n.formatArgs.call(o,r),(o.log||n.log).apply(o,r)}}return s.namespace=e,s.enabled=n.enabled(e),s.useColors=n.useColors(),s.color=r(e),s.destroy=i,s.extend=o,"function"==typeof n.init&&n.init(s),n.instances.push(s),s}function i(){var e=n.instances.indexOf(this);return-1!==e&&(n.instances.splice(e,1),!0)}function o(e,t){return n(this.namespace+(void 0===t?":":t)+e)}function s(e){var t;n.save(e),n.names=[],n.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(t=0;t<i;t++)r[t]&&("-"===(e=r[t].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.substr(1)+"$")):n.names.push(new RegExp("^"+e+"$")));for(t=0;t<n.instances.length;t++){var o=n.instances[t];o.enabled=n.enabled(o.namespace)}}function a(){n.enable("")}function l(e){if("*"===e[e.length-1])return!0;var t,r;for(t=0,r=n.skips.length;t<r;t++)if(n.skips[t].test(e))return!1;for(t=0,r=n.names.length;t<r;t++)if(n.names[t].test(e))return!0;return!1}function c(e){return e instanceof Error?e.stack||e.message:e}return n.debug=n,n.default=n,n.coerce=c,n.disable=a,n.enable=s,n.enabled=l,n.humanize=e("ms"),Object.keys(t).forEach((function(e){n[e]=t[e]})),n.instances=[],n.names=[],n.skips=[],n.formatters={},n.selectColor=r,n.enable(n.load()),n}t.exports=n},{ms:54}],57:[function(e,t,r){"function"==typeof Object.create?t.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},{}],58:[function(e,t,i){(function(e){(function(){var r="function"==typeof n&&n.amd,o={function:!0,object:!0},s=o[typeof i]&&i&&!i.nodeType&&i,a=o[typeof window]&&window||this,l=s&&o[typeof t]&&t&&!t.nodeType&&"object"==typeof e&&e;function c(e,t){e||(e=a.Object()),t||(t=a.Object());var r=e.Number||a.Number,n=e.String||a.String,i=e.Object||a.Object,s=e.Date||a.Date,l=e.SyntaxError||a.SyntaxError,u=e.TypeError||a.TypeError,h=e.Math||a.Math,d=e.JSON||a.JSON;"object"==typeof d&&d&&(t.stringify=d.stringify,t.parse=d.parse);var p,f=i.prototype,m=f.toString,g=f.hasOwnProperty;function v(e,t){try{e()}catch(e){t&&t()}}var b=new s(-0xc782b5b800cec);function y(e){if(null!=y[e])return y[e];var i;if("bug-string-char-index"==e)i="a"!="a"[0];else if("json"==e)i=y("json-stringify")&&y("date-serialization")&&y("json-parse");else if("date-serialization"==e){if(i=y("json-stringify")&&b){var o=t.stringify;v((function(){i='"-271821-04-20T00:00:00.000Z"'==o(new s(-864e13))&&'"+275760-09-13T00:00:00.000Z"'==o(new s(864e13))&&'"-000001-01-01T00:00:00.000Z"'==o(new s(-621987552e5))&&'"1969-12-31T23:59:59.999Z"'==o(new s(-1))}))}}else{var a,l='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if("json-stringify"==e){var c="function"==typeof(o=t.stringify);c&&((a=function(){return 1}).toJSON=a,v((function(){c="0"===o(0)&&"0"===o(new r)&&'""'==o(new n)&&o(m)===p&&o(p)===p&&o()===p&&"1"===o(a)&&"[1]"==o([a])&&"[null]"==o([p])&&"null"==o(null)&&"[null,null,null]"==o([p,m,null])&&o({a:[a,!0,!1,null,"\0\b\n\f\r\t"]})==l&&"1"===o(null,a)&&"[\n 1,\n 2\n]"==o([1,2],null,1)}),(function(){c=!1}))),i=c}if("json-parse"==e){var u,h=t.parse;"function"==typeof h&&v((function(){0!==h("0")||h(!1)||(a=h(l),(u=5==a.a.length&&1===a.a[0])&&(v((function(){u=!h('"\t"')})),u&&v((function(){u=1!==h("01")})),u&&v((function(){u=1!==h("1.")}))))}),(function(){u=!1})),i=u}}return y[e]=!!i}if(v((function(){b=-109252==b.getUTCFullYear()&&0===b.getUTCMonth()&&1===b.getUTCDate()&&10==b.getUTCHours()&&37==b.getUTCMinutes()&&6==b.getUTCSeconds()&&708==b.getUTCMilliseconds()})),y["bug-string-char-index"]=y["date-serialization"]=y.json=y["json-stringify"]=y["json-parse"]=null,!y("json")){var w="[object Function]",x="[object Date]",k="[object Number]",S="[object String]",A="[object Array]",M="[object Boolean]",C=y("bug-string-char-index"),N=function(e,t){var r,n,i,s=0;for(i in(r=function(){this.valueOf=0}).prototype.valueOf=0,n=new r)g.call(n,i)&&s++;return r=n=null,s?N=function(e,t){var r,n,i=m.call(e)==w;for(r in e)i&&"prototype"==r||!g.call(e,r)||(n="constructor"===r)||t(r);(n||g.call(e,r="constructor"))&&t(r)}:(n=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],N=function(e,t){var r,i,s=m.call(e)==w,a=!s&&"function"!=typeof e.constructor&&o[typeof e.hasOwnProperty]&&e.hasOwnProperty||g;for(r in e)s&&"prototype"==r||!a.call(e,r)||t(r);for(i=n.length;r=n[--i];)a.call(e,r)&&t(r)}),N(e,t)};if(!y("json-stringify")&&!y("date-serialization")){var E={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"},T="000000",q=function(e,t){return(T+(t||0)).slice(-e)},z=function(e){var t,r,n,i,o,s,a,l,c;if(b)t=function(e){r=e.getUTCFullYear(),n=e.getUTCMonth(),i=e.getUTCDate(),s=e.getUTCHours(),a=e.getUTCMinutes(),l=e.getUTCSeconds(),c=e.getUTCMilliseconds()};else{var u=h.floor,d=[0,31,59,90,120,151,181,212,243,273,304,334],p=function(e,t){return d[t]+365*(e-1970)+u((e-1969+(t=+(t>1)))/4)-u((e-1901+t)/100)+u((e-1601+t)/400)};t=function(e){for(i=u(e/864e5),r=u(i/365.2425)+1970-1;p(r+1,0)<=i;r++);for(n=u((i-p(r,0))/30.42);p(r,n+1)<=i;n++);i=1+i-p(r,n),s=u((o=(e%864e5+864e5)%864e5)/36e5)%24,a=u(o/6e4)%60,l=u(o/1e3)%60,c=o%1e3}}return(z=function(e){return e>-1/0&&e<1/0?(t(e),e=(r<=0||r>=1e4?(r<0?"-":"+")+q(6,r<0?-r:r):q(4,r))+"-"+q(2,n+1)+"-"+q(2,i)+"T"+q(2,s)+":"+q(2,a)+":"+q(2,l)+"."+q(3,c)+"Z",r=n=i=s=a=l=c=null):e=null,e})(e)};if(y("json-stringify")&&!y("date-serialization")){function O(e){return z(this)}var _=t.stringify;t.stringify=function(e,t,r){var n=s.prototype.toJSON;s.prototype.toJSON=O;var i=_(e,t,r);return s.prototype.toJSON=n,i}}else{var I="\\u00",L=function(e){var t=e.charCodeAt(0),r=E[t];return r||I+q(2,t.toString(16))},j=/[\x00-\x1f\x22\x5c]/g,D=function(e){return j.lastIndex=0,'"'+(j.test(e)?e.replace(j,L):e)+'"'},B=function(e,t,r,n,i,o,a){var l,c,h,d,f,g,b,y,w;if(v((function(){l=t[e]})),"object"==typeof l&&l&&(l.getUTCFullYear&&m.call(l)==x&&l.toJSON===s.prototype.toJSON?l=z(l):"function"==typeof l.toJSON&&(l=l.toJSON(e))),r&&(l=r.call(t,e,l)),l==p)return l===p?l:"null";switch("object"==(c=typeof l)&&(h=m.call(l)),h||c){case"boolean":case M:return""+l;case"number":case k:return l>-1/0&&l<1/0?""+l:"null";case"string":case S:return D(""+l)}if("object"==typeof l){for(b=a.length;b--;)if(a[b]===l)throw u();if(a.push(l),d=[],y=o,o+=i,h==A){for(g=0,b=l.length;g<b;g++)f=B(g,l,r,n,i,o,a),d.push(f===p?"null":f);w=d.length?i?"[\n"+o+d.join(",\n"+o)+"\n"+y+"]":"["+d.join(",")+"]":"[]"}else N(n||l,(function(e){var t=B(e,l,r,n,i,o,a);t!==p&&d.push(D(e)+":"+(i?" ":"")+t)})),w=d.length?i?"{\n"+o+d.join(",\n"+o)+"\n"+y+"}":"{"+d.join(",")+"}":"{}";return a.pop(),w}};t.stringify=function(e,t,r){var n,i,s,a;if(o[typeof t]&&t)if((a=m.call(t))==w)i=t;else if(a==A){s={};for(var l,c=0,u=t.length;c<u;)l=t[c++],"[object String]"!=(a=m.call(l))&&"[object Number]"!=a||(s[l]=1)}if(r)if((a=m.call(r))==k){if((r-=r%1)>0)for(r>10&&(r=10),n="";n.length<r;)n+=" "}else a==S&&(n=r.length<=10?r:r.slice(0,10));return B("",((l={})[""]=e,l),i,s,n,"",[])}}}if(!y("json-parse")){var R,P,F=n.fromCharCode,U={92:"\\",34:'"',47:"/",98:"\b",116:"\t",110:"\n",102:"\f",114:"\r"},$=function(){throw R=P=null,l()},H=function(){for(var e,t,r,n,i,o=P,s=o.length;R<s;)switch(i=o.charCodeAt(R)){case 9:case 10:case 13:case 32:R++;break;case 123:case 125:case 91:case 93:case 58:case 44:return e=C?o.charAt(R):o[R],R++,e;case 34:for(e="@",R++;R<s;)if((i=o.charCodeAt(R))<32)$();else if(92==i)switch(i=o.charCodeAt(++R)){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:e+=U[i],R++;break;case 117:for(t=++R,r=R+4;R<r;R++)(i=o.charCodeAt(R))>=48&&i<=57||i>=97&&i<=102||i>=65&&i<=70||$();e+=F("0x"+o.slice(t,R));break;default:$()}else{if(34==i)break;for(i=o.charCodeAt(R),t=R;i>=32&&92!=i&&34!=i;)i=o.charCodeAt(++R);e+=o.slice(t,R)}if(34==o.charCodeAt(R))return R++,e;$();default:if(t=R,45==i&&(n=!0,i=o.charCodeAt(++R)),i>=48&&i<=57){for(48==i&&(i=o.charCodeAt(R+1))>=48&&i<=57&&$(),n=!1;R<s&&(i=o.charCodeAt(R))>=48&&i<=57;R++);if(46==o.charCodeAt(R)){for(r=++R;r<s&&!((i=o.charCodeAt(r))<48||i>57);r++);r==R&&$(),R=r}if(101==(i=o.charCodeAt(R))||69==i){for(43!=(i=o.charCodeAt(++R))&&45!=i||R++,r=R;r<s&&!((i=o.charCodeAt(r))<48||i>57);r++);r==R&&$(),R=r}return+o.slice(t,R)}n&&$();var a=o.slice(R,R+4);if("true"==a)return R+=4,!0;if("fals"==a&&101==o.charCodeAt(R+4))return R+=5,!1;if("null"==a)return R+=4,null;$()}return"$"},V=function(e){var t,r;if("$"==e&&$(),"string"==typeof e){if("@"==(C?e.charAt(0):e[0]))return e.slice(1);if("["==e){for(t=[];"]"!=(e=H());)r?","==e?"]"==(e=H())&&$():$():r=!0,","==e&&$(),t.push(V(e));return t}if("{"==e){for(t={};"}"!=(e=H());)r?","==e?"}"==(e=H())&&$():$():r=!0,","!=e&&"string"==typeof e&&"@"==(C?e.charAt(0):e[0])&&":"==H()||$(),t[e.slice(1)]=V(H());return t}$()}return e},G=function(e,t,r){var n=W(e,t,r);n===p?delete e[t]:e[t]=n},W=function(e,t,r){var n,i=e[t];if("object"==typeof i&&i)if(m.call(i)==A)for(n=i.length;n--;)G(m,N,i,n,r);else N(i,(function(e){G(i,e,r)}));return r.call(e,t,i)};t.parse=function(e,t){var r,n;return R=0,P=""+e,r=V(H()),"$"!=H()&&$(),R=P=null,t&&m.call(t)==w?W(((n={})[""]=r,n),"",t):r}}}return t.runInContext=c,t}if(!l||l.global!==l&&l.window!==l&&l.self!==l||(a=l),s&&!r)c(a,s);else{var u=a.JSON,h=a.JSON3,d=!1,p=c(a,a.JSON3={noConflict:function(){return d||(d=!0,a.JSON=u,a.JSON3=h,u=h=null),p}});a.JSON={parse:p.parse,stringify:p.stringify}}r&&n((function(){return p}))}).call(this)}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],59:[function(e,t,r){"use strict";var n,i=Object.prototype.hasOwnProperty;function o(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(e){return null}}function s(e){for(var t,r=/([^=?&]+)=?([^&]*)/g,n={};t=r.exec(e);){var i=o(t[1]),s=o(t[2]);null===i||null===s||i in n||(n[i]=s)}return n}function a(e,t){t=t||"";var r,o,s=[];for(o in"string"!=typeof t&&(t="?"),e)if(i.call(e,o)){if((r=e[o])||null!==r&&r!==n&&!isNaN(r)||(r=""),o=encodeURIComponent(o),r=encodeURIComponent(r),null===o||null===r)continue;s.push(o+"="+r)}return s.length?t+s.join("&"):""}r.stringify=a,r.parse=s},{}],60:[function(e,t,r){"use strict";t.exports=function(e,t){if(t=t.split(":")[0],!(e=+e))return!1;switch(t){case"http":case"ws":return 80!==e;case"https":case"wss":return 443!==e;case"ftp":return 21!==e;case"gopher":return 70!==e;case"file":return!1}return 0!==e}},{}],61:[function(e,t,n){(function(r){"use strict";var n=e("requires-port"),i=e("querystringify"),o=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,s=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i,a=new RegExp("^[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]+");function l(e){return(e||"").toString().replace(a,"")}var c=[["#","hash"],["?","query"],function(e){return e.replace("\\","/")},["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d+)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],u={hash:1,query:1};function h(e){var t,n=("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:{}).location||{},i={},s=typeof(e=e||n);if("blob:"===e.protocol)i=new f(unescape(e.pathname),{});else if("string"===s)for(t in i=new f(e,{}),u)delete i[t];else if("object"===s){for(t in e)t in u||(i[t]=e[t]);void 0===i.slashes&&(i.slashes=o.test(e.href))}return i}function d(e){e=l(e);var t=s.exec(e);return{protocol:t[1]?t[1].toLowerCase():"",slashes:!!t[2],rest:t[3]}}function p(e,t){if(""===e)return t;for(var r=(t||"/").split("/").slice(0,-1).concat(e.split("/")),n=r.length,i=r[n-1],o=!1,s=0;n--;)"."===r[n]?r.splice(n,1):".."===r[n]?(r.splice(n,1),s++):s&&(0===n&&(o=!0),r.splice(n,1),s--);return o&&r.unshift(""),"."!==i&&".."!==i||r.push(""),r.join("/")}function f(e,t,r){if(e=l(e),!(this instanceof f))return new f(e,t,r);var o,s,a,u,m,g,v=c.slice(),b=typeof t,y=this,w=0;for("object"!==b&&"string"!==b&&(r=t,t=null),r&&"function"!=typeof r&&(r=i.parse),t=h(t),o=!(s=d(e||"")).protocol&&!s.slashes,y.slashes=s.slashes||o&&t.slashes,y.protocol=s.protocol||t.protocol||"",e=s.rest,s.slashes||(v[3]=[/(.*)/,"pathname"]);w<v.length;w++)"function"!=typeof(u=v[w])?(a=u[0],g=u[1],a!=a?y[g]=e:"string"==typeof a?~(m=e.indexOf(a))&&("number"==typeof u[2]?(y[g]=e.slice(0,m),e=e.slice(m+u[2])):(y[g]=e.slice(m),e=e.slice(0,m))):(m=a.exec(e))&&(y[g]=m[1],e=e.slice(0,m.index)),y[g]=y[g]||o&&u[3]&&t[g]||"",u[4]&&(y[g]=y[g].toLowerCase())):e=u(e);r&&(y.query=r(y.query)),o&&t.slashes&&"/"!==y.pathname.charAt(0)&&(""!==y.pathname||""!==t.pathname)&&(y.pathname=p(y.pathname,t.pathname)),n(y.port,y.protocol)||(y.host=y.hostname,y.port=""),y.username=y.password="",y.auth&&(u=y.auth.split(":"),y.username=u[0]||"",y.password=u[1]||""),y.origin=y.protocol&&y.host&&"file:"!==y.protocol?y.protocol+"//"+y.host:"null",y.href=y.toString()}function m(e,t,r){var o=this;switch(e){case"query":"string"==typeof t&&t.length&&(t=(r||i.parse)(t)),o[e]=t;break;case"port":o[e]=t,n(t,o.protocol)?t&&(o.host=o.hostname+":"+t):(o.host=o.hostname,o[e]="");break;case"hostname":o[e]=t,o.port&&(t+=":"+o.port),o.host=t;break;case"host":o[e]=t,/:\d+$/.test(t)?(t=t.split(":"),o.port=t.pop(),o.hostname=t.join(":")):(o.hostname=t,o.port="");break;case"protocol":o.protocol=t.toLowerCase(),o.slashes=!r;break;case"pathname":case"hash":if(t){var s="pathname"===e?"/":"#";o[e]=t.charAt(0)!==s?s+t:t}else o[e]=t;break;default:o[e]=t}for(var a=0;a<c.length;a++){var l=c[a];l[4]&&(o[l[1]]=o[l[1]].toLowerCase())}return o.origin=o.protocol&&o.host&&"file:"!==o.protocol?o.protocol+"//"+o.host:"null",o.href=o.toString(),o}function g(e){e&&"function"==typeof e||(e=i.stringify);var t,r=this,n=r.protocol;n&&":"!==n.charAt(n.length-1)&&(n+=":");var o=n+(r.slashes?"//":"");return r.username&&(o+=r.username,r.password&&(o+=":"+r.password),o+="@"),o+=r.host+r.pathname,(t="object"==typeof r.query?e(r.query):r.query)&&(o+="?"!==t.charAt(0)?"?"+t:t),r.hash&&(o+=r.hash),o}f.prototype={set:m,toString:g},f.extractProtocol=d,f.location=h,f.trimLeft=l,f.qs=i,t.exports=f}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{querystringify:59,"requires-port":60}]},{},[1])(1)},"./src/ts/MathGen.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>c});var n,i=r("./node_modules/prando/dist/Prando.es.js"),o=r("./node_modules/katex/dist/katex.js"),s=r("./node_modules/decimal.js/decimal.js"),a=r("./node_modules/fraction.js/fraction.js"),l=r.n(a);!function(e){e[e.Addition=0]="Addition",e[e.Subtraction=1]="Subtraction",e[e.Multiplication=2]="Multiplication",e[e.Division=3]="Division",e[e.Long=4]="Long"}(n||(n={}));const c=class{constructor(e,t){this.minNumber=1,this.maxNumber=99,this.ATTEMPT_LIMIT=4,this.uniqueProblems=[],this._prando=new i.default(e+t)}get Prando(){return this._prando}mkAdditionBasics(e,t,r,i,o=1){let a=new s.Decimal(this._prando.nextInt(e,t)),l=new s.Decimal(this._prando.nextInt(e,t)),c=[n.Addition,a,l];return o>this.ATTEMPT_LIMIT?"SKIP":this.uniqueProblems.filter((e=>e.join()===c.join())).length>0?this.mkAdditionBasics(e,t,r,i,++o):(this.uniqueProblems.push(c),r&&i?String.raw`\begin{aligned}${a}&\cr\underline{+\enspace${l}}&\cr\boxed{${a.add(l)}}&\end{aligned}`:r?String.raw`\begin{aligned}${a}& \\ \underline{+\enspace${l}}&\end{aligned}`:i?String.raw`${a} + ${l} = \boxed{${a.add(l)}}`:String.raw`${a} + ${l} =`)}mkAdditionDecimals(e,t,r,i,o,a=1){let l=new s.Decimal(Number(this._prando.next(e,t).toFixed(i))),c=new s.Decimal(Number(this._prando.next(e,t).toFixed(i))),u=[n.Addition,l,c];return a>this.ATTEMPT_LIMIT?"SKIP":this.uniqueProblems.filter((e=>e.join()===u.join())).length>0?this.mkAdditionDecimals(e,t,r,i,o,++a):(this.uniqueProblems.push(u),r&&o?String.raw`\begin{aligned}${l.toFixed(i)}&\cr\underline{+\enspace${c.toFixed(i)}}&\cr\boxed{${l.add(c).toFixed(i)}}&\end{aligned}`:r?String.raw`\begin{aligned}${l.toFixed(i)}& \\ \underline{+\enspace${c.toFixed(i)}}&\end{aligned}`:o?String.raw`${l} + ${c} = \boxed{${l.add(c)}}`:String.raw`${l} + ${c} =`)}mkAdditionFractions(e,t,r,i,o,a,c=1){let u=new s.Decimal(this._prando.nextInt(e,t)),h=new s.Decimal(this._prando.nextInt(r,i)),d=new s.Decimal(this._prando.nextInt(e,t)),p=new s.Decimal(this._prando.nextInt(r,i));o&&(p=h);let f=[n.Addition,u,h,d,p];if(c>this.ATTEMPT_LIMIT)return"SKIP";if(this.uniqueProblems.filter((e=>e.join()===f.join())).length>0)return this.mkAdditionFractions(e,t,r,i,o,a,++c);if(this.uniqueProblems.push(f),a){let e=new(l())(u.toNumber(),h.toNumber()).add(new(l())(d.toNumber(),p.toNumber())).toFraction().split("/");switch(e.length){case 1:return String.raw`\dfrac{${u}}{${h}} + \dfrac{${d}}{${p}} = \boxed{${e[0]}}`;case 2:return String.raw`\dfrac{${u}}{${h}} + \dfrac{${d}}{${p}} = \boxed{\dfrac{${e[0]}}{${e[1]}}}`}}return String.raw`\dfrac{${u}}{${h}} + \dfrac{${d}}{${p}} = `}mkSubtractionBasics(e,t,r,i,o,a=1){let l=new s.Decimal(this._prando.nextInt(this.minNumber,this.maxNumber)),c=new s.Decimal(this._prando.nextInt(this.minNumber,this.maxNumber)),u=[n.Subtraction,l,c];return a>this.ATTEMPT_LIMIT?"SKIP":this.uniqueProblems.filter((e=>e.join()===u.join())).length>0?this.mkSubtractionBasics(e,t,r,i,o,++a):(this.uniqueProblems.push(u),!r&&l.minus(c).lessThan(0)&&([l,c]=[c,l]),i&&o?String.raw`\begin{aligned}${l}&\cr\underline{-\enspace${c}}&\cr\boxed{${l.minus(c)}}&\end{aligned}`:i?String.raw`\begin{aligned}${l}& \\ \underline{-\enspace${c}}&\end{aligned}`:o?String.raw`${l} - ${c} = \boxed{${l.minus(c)}}`:String.raw`${l} - ${c} =`)}mkSubtractionDecimals(e,t,r,i,o,a,l=1){let c=new s.Decimal(Number(this._prando.next(e,t).toFixed(o))),u=new s.Decimal(Number(this._prando.next(e,t).toFixed(o))),h=[n.Subtraction,c,u];return l>this.ATTEMPT_LIMIT?"SKIP":this.uniqueProblems.filter((e=>e.join()===h.join())).length>0?this.mkSubtractionDecimals(e,t,r,i,o,a,++l):(this.uniqueProblems.push(h),!r&&c.minus(u).lessThan(0)&&([c,u]=[u,c]),i&&a?String.raw`\begin{aligned}${c.toFixed(o)}&\cr\underline{-\enspace${u.toFixed(o)}}&\cr\boxed{${c.minus(u).toFixed(o)}}&\end{aligned}`:i?String.raw`\begin{aligned}${c.toFixed(o)}& \\ \underline{-\enspace${u.toFixed(o)}}&\end{aligned}`:a?String.raw`${c} - ${u} = \boxed{${c.minus(u)}}`:String.raw`${c} - ${u} =`)}mkSubtractionFractions(e,t,r,i,o,a,c,u=1){let h=new s.Decimal(this._prando.nextInt(e,t)),d=new s.Decimal(this._prando.nextInt(r,i)),p=new s.Decimal(this._prando.nextInt(e,t)),f=new s.Decimal(this._prando.nextInt(r,i));a&&(f=d);let m=[n.Subtraction,h,d,p,f];if(u>this.ATTEMPT_LIMIT)return"SKIP";if(this.uniqueProblems.filter((e=>e.join()===m.join())).length>0)return this.mkSubtractionFractions(e,t,r,i,o,a,c,++u);if(this.uniqueProblems.push(m),!o&&h.dividedBy(d).minus(p.dividedBy(f)).lessThan(0)&&([h,d,p,f]=[p,f,h,d]),c){let e=new(l())(h.toNumber(),d.toNumber()).sub(new(l())(p.toNumber(),f.toNumber())).toFraction().split("/");switch(e.length){case 1:return String.raw`\dfrac{${h}}{${d}} - \dfrac{${p}}{${f}} = \boxed{${e[0]}}`;case 2:return String.raw`\dfrac{${h}}{${d}} - \dfrac{${p}}{${f}} = \boxed{\dfrac{${e[0]}}{${e[1]}}}`}}return String.raw`\dfrac{${h}}{${d}} - \dfrac{${p}}{${f}} = `}mkMultiplicationBasics(e,t,r,i,o=1){let a=new s.Decimal(this._prando.nextInt(this.minNumber,this.maxNumber)),l=new s.Decimal(this._prando.nextInt(this.minNumber,this.maxNumber)),c=[n.Multiplication,a,l];return o>this.ATTEMPT_LIMIT?"SKIP":this.uniqueProblems.filter((e=>e.join()===c.join())).length>0?this.mkMultiplicationBasics(e,t,r,i,++o):(this.uniqueProblems.push(c),r&&i?String.raw`\begin{aligned}${a}& \\ \underline{\times\enspace${l}}& \\ \boxed{${a.times(l)}}&\end{aligned}`:r?String.raw`\begin{aligned}${a}& \\ \underline{\times\enspace${l}}&\end{aligned}`:i?String.raw`${a} \times ${l} = \boxed{${a.times(l)}}`:String.raw`${a} \times ${l} =`)}mkMultiplicationDecimals(e,t,r,i,o,a=1){let l=new s.Decimal(Number(this._prando.next(e,t).toFixed(i))),c=new s.Decimal(Number(this._prando.next(e,t).toFixed(i))),u=[n.Multiplication,l,c];return a>this.ATTEMPT_LIMIT?"SKIP":this.uniqueProblems.filter((e=>e.join()===u.join())).length>0?this.mkMultiplicationDecimals(e,t,r,i,o,++a):(this.uniqueProblems.push(u),r&&o?String.raw`\begin{aligned}${l}&\cr\underline{\times\enspace${c}}&\cr\boxed{${l.times(c)}}&\end{aligned}`:r?String.raw`\begin{aligned}${l}& \\ \underline{\times\enspace${c}}&\end{aligned}`:o?String.raw`${l} \times ${c} = \boxed{${l.times(c)}}`:String.raw`${l} \times ${c} =`)}mkMultiplicationFractions(e,t,r,i,o,a=1){let c=new s.Decimal(this._prando.nextInt(e,t)),u=new s.Decimal(this._prando.nextInt(r,i)),h=new s.Decimal(this._prando.nextInt(e,t)),d=new s.Decimal(this._prando.nextInt(r,i)),p=[n.Multiplication,c,u,h,d];if(a>this.ATTEMPT_LIMIT)return"SKIP";if(this.uniqueProblems.filter((e=>e.join()===p.join())).length>0)return this.mkMultiplicationFractions(e,t,r,i,o,++a);if(this.uniqueProblems.push(p),o){let e=new(l())(c.toNumber(),u.toNumber()).mul(new(l())(h.toNumber(),d.toNumber())).toFraction().split("/");switch(e.length){case 1:return String.raw`\dfrac{${c}}{${u}} \times \dfrac{${h}}{${d}} = \boxed{${e[0]}}`;case 2:return String.raw`\dfrac{${c}}{${u}} \times \dfrac{${h}}{${d}} = \boxed{\dfrac{${e[0]}}{${e[1]}}}`}}return String.raw`\dfrac{${c}}{${u}} \times \dfrac{${h}}{${d}} = `}mkDivisionBasic(e,t,r,i,o,a,l=1){let c=new s.Decimal(this._prando.nextInt(e,t)),u=new s.Decimal(this._prando.nextInt(r,i)),h=u.times(c);o&&(h=h.add(u.minus(c).abs()));let d=[n.Division,u,c];return l>this.ATTEMPT_LIMIT?"SKIP":this.uniqueProblems.filter((e=>e.join()===d.join())).length>0?this.mkDivisionBasic(e,t,r,i,o,a,++l):(this.uniqueProblems.push(d),o&&a?String.raw`${h} \div ${c} = \boxed{${h.dividedBy(c).floor()} \enspace r${h.modulo(c)}}`:a?String.raw`${h} \div ${c} = \boxed{${u}}`:String.raw`${h} \div ${c} =`)}mkDivisionDecimals(e,t,r,i,o,a,l,c=1){let u=new s.Decimal(this._prando.next(e,t).toFixed(a)),h=new s.Decimal(this._prando.next(r,i).toFixed(a));o||(u=u.floor());let d=h.times(u),p=[n.Division,h,u];return c>this.ATTEMPT_LIMIT?"SKIP":this.uniqueProblems.filter((e=>e.join()===p.join())).length>0?this.mkDivisionDecimals(e,t,r,i,o,a,l,++c):(this.uniqueProblems.push(p),l?String.raw`${d} \div ${u} = \boxed{${h}}`:String.raw`${d} \div ${u} =`)}mkDivisionFractions(e,t,r,i,o,a=1){let c=new s.Decimal(this._prando.nextInt(e,t)),u=new s.Decimal(this._prando.nextInt(r,i)),h=new s.Decimal(this._prando.nextInt(e,t)),d=new s.Decimal(this._prando.nextInt(r,i)),p=[n.Division,c,u,h,d];if(a>this.ATTEMPT_LIMIT)return"SKIP";if(this.uniqueProblems.filter((e=>e.join()===p.join())).length>0)return this.mkDivisionFractions(e,t,r,i,o,++a);if(this.uniqueProblems.push(p),o){let e=new(l())(c.toNumber(),u.toNumber()).div(new(l())(h.toNumber(),d.toNumber())).toFraction().split("/");switch(e.length){case 1:return String.raw`\dfrac{${c}}{${u}} \div \dfrac{${h}}{${d}} = \boxed{${e[0]}}`;case 2:return String.raw`\dfrac{${c}}{${u}} \div \dfrac{${h}}{${d}} = \boxed{\dfrac{${e[0]}}{${e[1]}}}`}}return String.raw`\dfrac{${c}}{${u}} \div \dfrac{${h}}{${d}} = `}mkLongBasics(e,t,r,i,o,a,l=1){let c=new s.Decimal(this._prando.nextInt(e,t)),u=new s.Decimal(this._prando.nextInt(r,i)),h=u.times(c);o&&(h=h.add(u.minus(c).abs()));let d=[n.Long,u,c];return l>this.ATTEMPT_LIMIT?"SKIP":this.uniqueProblems.filter((e=>e.join()===d.join())).length>0?this.mkLongBasics(e,t,r,i,o,a,++l):(this.uniqueProblems.push(d),o&&a?String.raw`\begin{aligned}\boxed{${h.dividedBy(c).floor()} \enspace r${h.modulo(c)}}&\cr${c}\thinspace\overline{\smash{)}\thinspace${h}\thinspace}\end{aligned}`:a?String.raw`\begin{aligned}\boxed{${u}}&\cr${c}\thinspace\overline{\smash{)}\thinspace${h}\thinspace}\end{aligned}`:String.raw`\space\newline${c}\thinspace\overline{\smash{)}\thinspace${h}\thinspace}`)}mkLongDecimals(e,t,r,i,o,a,l,c=1){let u=new s.Decimal(this._prando.next(e,t).toFixed(a)),h=new s.Decimal(this._prando.next(r,i).toFixed(a));o||(u=u.floor());let d=h.times(u),p=[n.Division,h,u];return c>this.ATTEMPT_LIMIT?"SKIP":this.uniqueProblems.filter((e=>e.join()===p.join())).length>0?this.mkLongDecimals(e,t,r,i,o,a,l,++c):(this.uniqueProblems.push(p),l?String.raw`\begin{aligned}\boxed{${h}}&\cr${u}\thinspace\overline{\smash{)}\thinspace${d}\thinspace}\end{aligned}`:String.raw`\space\newline${u}\thinspace\overline{\smash{)}\thinspace${d}\thinspace}`)}render(e,t,r){o.render(e,t,r)}}},"./src/ts/index.ts":(e,t,r)=>{"use strict";r.r(t);var n=r("./node_modules/prando/dist/Prando.es.js"),i=r("./src/ts/MathGen.ts"),o=r("./node_modules/lz-string/libs/lz-string.js"),s=r.n(o);new class{constructor(){var e,t,r,o,s;this.$math=document.getElementById("math"),this.$seedKey=document.getElementById("seed-key"),this.$seedGenerator=document.getElementById("seed-generator"),this.$parameters=document.getElementById("parameters"),this.$seedSubmit=document.getElementById("seed-submit"),this.$seedRandom=document.getElementById("seed-random"),this.$menuAnswers=document.getElementById("answers"),this.$menuNoAnswers=document.getElementById("no-answers"),this.$parametersSubmit=document.getElementById("parameters-submit"),this.$$configItem=[...document.getElementsByClassName("config-item")],this.DEFAULT_PARAMETERS="AwkRjYE5knLraT7IWjrWJ5l/0sC9cg==",this.configs=new Map,this.configFlags=[],this.configFinal="";let a=new URLSearchParams(window.location.search);this.$seedKey.value=null!==(e=a.get("key"))&&void 0!==e?e:(new n.default).nextString(8),this.$seedGenerator.value=null!==(r=null===(t=a.get("seed"))||void 0===t?void 0:t.substr(0,16))&&void 0!==r?r:(new n.default).nextString(16),this.$parameters.value=null!==(o=a.get("parameters"))&&void 0!==o?o:this.DEFAULT_PARAMETERS,this.answersMode=null!==(s=a.has("answers"))&&void 0!==s&&s,this.MathGen=new i.default(this.$seedKey.value,this.$seedGenerator.value),this.readConfig(),this.mkMathProblems()}readConfig(){var e;let t=s().decompressFromBase64(this.$parameters.value),r=null==t?void 0:t.substr(6),n=0,i=parseInt(null!==(e=null==t?void 0:t.substr(0,6))&&void 0!==e?e:"",36),o=0;this.$$configItem.forEach((e=>{var t;switch(e.type){case"checkbox":i>>o&1?(e.checked=!0,this.configs.set(e.id,1)):(e.checked=!1,this.configs.set(e.id,0)),o++;break;case"number":let s=parseInt(null!==(t=null==r?void 0:r.charAt(n))&&void 0!==t?t:"",36);n++,"1"===(null==r?void 0:r.charAt(n))&&(s*=-1),n++,e.value=s.toString(),this.configs.set(e.id,s)}})),this.$seedGenerator.addEventListener("keypress",(e=>{"Enter"===e.key&&this.setSeed()})),this.$seedSubmit.addEventListener("click",(()=>this.setSeed())),this.$seedRandom.addEventListener("click",(()=>this.setRandomSeed())),this.$menuAnswers.addEventListener("click",(()=>this.getAnswers(!0))),this.$menuNoAnswers.addEventListener("click",(()=>this.getAnswers(!1))),this.$$configItem.forEach((e=>e.addEventListener("click",(()=>this.configItem_change())))),this.$parametersSubmit.addEventListener("click",(()=>this.setParameters())),this.configItem_change()}setSeed(){let e=new URLSearchParams(window.location.search);e.set("key",this.$seedKey.value),e.set("seed",this.$seedGenerator.value),e.set("parameters",this.$parameters.value),window.location.search=e.toString()}setRandomSeed(){let e=new URLSearchParams(window.location.search);e.delete("seed"),e.set("key",this.$seedKey.value),e.set("parameters",this.$parameters.value),window.location.search=e.toString()}getAnswers(e){let t=new URLSearchParams(window.location.search);t.set("key",this.$seedKey.value),t.set("seed",this.$seedGenerator.value),t.set("parameters",this.$parameters.value),e?t.set("answers",""):t.delete("answers"),window.location.search=t.toString()}configItem_change(){this.configFlags=[];let e=0,t=0;this.$$configItem.forEach((r=>{switch(r.type){case"checkbox":r.checked&&(e|=1<<t),t++;break;case"number":isNaN(parseInt(r.value))&&(r.value="0"),parseInt(r.value)>35&&(r.value="35");let n=parseInt(r.value,10);"conf-min-number"===r.id?this.MathGen.minNumber=n:"conf-max-number"===r.id&&(this.MathGen.maxNumber=n);let i="0";n<0&&(i="1",n=Math.abs(n)),this.configFlags.push(n.toString(36).substr(-1),i)}})),this.configFinal=s().compressToBase64(e.toString(36).padStart(6,"0")+this.configFlags.join("")),this.$parameters.value=this.configFinal}setParameters(){this.configItem_change();let e=new URLSearchParams(window.location.search);e.set("parameters",this.configFinal),window.location.search=e.toString()}mkMathProblems(){let e,t=[];this.configs.get("conf-addi-basic")&&t.push(0),this.configs.get("conf-addi-deci")&&t.push(1),this.configs.get("conf-addi-frac")&&t.push(2),this.configs.get("conf-subt-basic")&&t.push(3),this.configs.get("conf-subt-deci")&&t.push(4),this.configs.get("conf-subt-frac")&&t.push(5),this.configs.get("conf-mult-basic")&&t.push(6),this.configs.get("conf-mult-deci")&&t.push(7),this.configs.get("conf-mult-frac")&&t.push(8),this.configs.get("conf-divi-basic")&&t.push(9),this.configs.get("conf-divi-deci")&&t.push(10),this.configs.get("conf-divi-frac")&&t.push(11),this.configs.get("conf-long-basic")&&t.push(12),this.configs.get("conf-long-deci")&&t.push(13);for(let r=0;r<24;r++){let r,n=this.MathGen.Prando.nextArrayItem(t);switch(e=document.createElement("div"),e.classList.add("problem"),this.answersMode&&e.classList.add("problem--answer"),n){case 0:r=this.MathGen.mkAdditionBasics(this.configs.get("conf-addi-basic-min"),this.configs.get("conf-addi-basic-max"),!!this.configs.get("conf-addi-basic-vert"),this.answersMode);break;case 1:r=this.MathGen.mkAdditionDecimals(this.configs.get("conf-addi-deci-min"),this.configs.get("conf-addi-deci-max"),!!this.configs.get("conf-addi-deci-vert"),this.configs.get("conf-addi-deci-placevals"),this.answersMode);break;case 2:r=this.MathGen.mkAdditionFractions(this.configs.get("conf-addi-frac-numer-min"),this.configs.get("conf-addi-frac-numer-max"),this.configs.get("conf-addi-frac-denom-min"),this.configs.get("conf-addi-frac-denom-max"),!!this.configs.get("conf-addi-frac-denom-same"),this.answersMode);break;case 3:r=this.MathGen.mkSubtractionBasics(this.configs.get("conf-addi-basic-min"),this.configs.get("conf-addi-basic-max"),!!this.configs.get("conf-subt-basic-negatives"),!!this.configs.get("conf-addi-basic-vert"),this.answersMode);break;case 4:r=this.MathGen.mkSubtractionDecimals(this.configs.get("conf-subt-deci-min"),this.configs.get("conf-subt-deci-max"),!!this.configs.get("conf-subt-deci-negatives"),!!this.configs.get("conf-subt-deci-vert"),this.configs.get("conf-subt-deci-placevals"),this.answersMode);break;case 5:r=this.MathGen.mkSubtractionFractions(this.configs.get("conf-subt-frac-numer-min"),this.configs.get("conf-subt-frac-numer-max"),this.configs.get("conf-subt-frac-denom-min"),this.configs.get("conf-subt-frac-denom-max"),!!this.configs.get("conf-subt-frac-negatives"),!!this.configs.get("conf-subt-frac-denom-same"),this.answersMode);break;case 6:r=this.MathGen.mkMultiplicationBasics(this.configs.get("conf-mult-basic-min"),this.configs.get("conf-mult-basic-max"),!!this.configs.get("conf-mult-basic-vert"),this.answersMode);break;case 7:r=this.MathGen.mkMultiplicationDecimals(this.configs.get("conf-mult-deci-min"),this.configs.get("conf-mult-deci-max"),!!this.configs.get("conf-mult-deci-vert"),this.configs.get("conf-mult-deci-placevals"),this.answersMode);break;case 8:r=this.MathGen.mkMultiplicationFractions(this.configs.get("conf-mult-frac-numer-min"),this.configs.get("conf-mult-frac-numer-max"),this.configs.get("conf-mult-frac-denom-min"),this.configs.get("conf-mult-frac-denom-max"),this.answersMode);break;case 9:r=this.MathGen.mkDivisionBasic(this.configs.get("conf-divi-basic-divisor-min"),this.configs.get("conf-divi-basic-divisor-max"),this.configs.get("conf-divi-basic-quotient-min"),this.configs.get("conf-divi-basic-quotient-max"),!!this.configs.get("conf-subt-basic-remainders"),this.answersMode);break;case 10:r=this.MathGen.mkDivisionDecimals(this.configs.get("conf-divi-deci-divisor-min"),this.configs.get("conf-divi-deci-divisor-max"),this.configs.get("conf-divi-deci-quotient-min"),this.configs.get("conf-divi-deci-quotient-max"),!!this.configs.get("conf-subt-deci-decimal-divisor"),this.configs.get("conf-divi-deci-placevals"),this.answersMode);break;case 11:r=this.MathGen.mkDivisionFractions(this.configs.get("conf-divi-frac-numer-min"),this.configs.get("conf-divi-frac-numer-max"),this.configs.get("conf-divi-frac-denom-min"),this.configs.get("conf-divi-frac-denom-max"),this.answersMode);break;case 12:r=this.MathGen.mkLongBasics(this.configs.get("conf-long-basic-divisor-min"),this.configs.get("conf-long-basic-divisor-max"),this.configs.get("conf-long-basic-quotient-min"),this.configs.get("conf-long-basic-quotient-max"),!!this.configs.get("conf-long-basic-remainders"),this.answersMode);break;case 13:r=this.MathGen.mkLongDecimals(this.configs.get("conf-long-deci-divisor-min"),this.configs.get("conf-long-deci-divisor-max"),this.configs.get("conf-long-deci-quotient-min"),this.configs.get("conf-long-deci-quotient-max"),!!this.configs.get("conf-long-deci-decimal-divisor"),this.configs.get("conf-long-deci-placevals"),this.answersMode);break;default:r="SKIP"}this.MathGen.render(r,e),this.$math.insertAdjacentElement("beforeend",e)}}}},"./node_modules/url/node_modules/punycode/punycode.js":function(e,t,r){var n;e=r.nmd(e),function(i){t&&t.nodeType,e&&e.nodeType;var o="object"==typeof r.g&&r.g;o.global!==o&&o.window!==o&&o.self;var s,a=2147483647,l=36,c=/^xn--/,u=/[^\x20-\x7E]/,h=/[\x2E\u3002\uFF0E\uFF61]/g,d={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},p=Math.floor,f=String.fromCharCode;function m(e){throw RangeError(d[e])}function g(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function v(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+g((e=e.replace(h,".")).split("."),t).join(".")}function b(e){for(var t,r,n=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(r=e.charCodeAt(i++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),i--):n.push(t);return n}function y(e){return g(e,(function(e){var t="";return e>65535&&(t+=f((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=f(e)})).join("")}function w(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function x(e,t,r){var n=0;for(e=r?p(e/700):e>>1,e+=p(e/t);e>455;n+=l)e=p(e/35);return p(n+36*e/(e+38))}function k(e){var t,r,n,i,o,s,c,u,h,d,f,g=[],v=e.length,b=0,w=128,k=72;for((r=e.lastIndexOf("-"))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&m("not-basic"),g.push(e.charCodeAt(n));for(i=r>0?r+1:0;i<v;){for(o=b,s=1,c=l;i>=v&&m("invalid-input"),((u=(f=e.charCodeAt(i++))-48<10?f-22:f-65<26?f-65:f-97<26?f-97:l)>=l||u>p((a-b)/s))&&m("overflow"),b+=u*s,!(u<(h=c<=k?1:c>=k+26?26:c-k));c+=l)s>p(a/(d=l-h))&&m("overflow"),s*=d;k=x(b-o,t=g.length+1,0==o),p(b/t)>a-w&&m("overflow"),w+=p(b/t),b%=t,g.splice(b++,0,w)}return y(g)}function S(e){var t,r,n,i,o,s,c,u,h,d,g,v,y,k,S,A=[];for(v=(e=b(e)).length,t=128,r=0,o=72,s=0;s<v;++s)(g=e[s])<128&&A.push(f(g));for(n=i=A.length,i&&A.push("-");n<v;){for(c=a,s=0;s<v;++s)(g=e[s])>=t&&g<c&&(c=g);for(c-t>p((a-r)/(y=n+1))&&m("overflow"),r+=(c-t)*y,t=c,s=0;s<v;++s)if((g=e[s])<t&&++r>a&&m("overflow"),g==t){for(u=r,h=l;!(u<(d=h<=o?1:h>=o+26?26:h-o));h+=l)S=u-d,k=l-d,A.push(f(w(d+S%k,0))),u=p(S/k);A.push(f(w(u,0))),o=x(r,y,n==i),r=0,++n}++r,++t}return A.join("")}s={version:"1.3.2",ucs2:{decode:b,encode:y},decode:k,encode:S,toASCII:function(e){return v(e,(function(e){return u.test(e)?"xn--"+S(e):e}))},toUnicode:function(e){return v(e,(function(e){return c.test(e)?k(e.slice(4).toLowerCase()):e}))}},void 0===(n=function(){return s}.call(t,r,t,e))||(e.exports=n)}()},"./node_modules/url/url.js":(e,t,r)=>{"use strict";var n=r("./node_modules/url/node_modules/punycode/punycode.js"),i=r("./node_modules/url/util.js");function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=y,t.resolve=function(e,t){return y(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?y(e,!1,!0).resolveObject(t):t},t.format=function(e){i.isString(e)&&(e=y(e));return e instanceof o?e.format():o.prototype.format.call(e)},t.Url=o;var s=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,l=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,c=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),u=["'"].concat(c),h=["%","/","?",";","#"].concat(u),d=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,f=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},b=r("./node_modules/querystring/index.js");function y(e,t,r){if(e&&i.isObject(e)&&e instanceof o)return e;var n=new o;return n.parse(e,t,r),n}o.prototype.parse=function(e,t,r){if(!i.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var o=e.indexOf("?"),a=-1!==o&&o<e.indexOf("#")?"?":"#",c=e.split(a);c[0]=c[0].replace(/\\/g,"/");var y=e=c.join(a);if(y=y.trim(),!r&&1===e.split("#").length){var w=l.exec(y);if(w)return this.path=y,this.href=y,this.pathname=w[1],w[2]?(this.search=w[2],this.query=t?b.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var x=s.exec(y);if(x){var k=(x=x[0]).toLowerCase();this.protocol=k,y=y.substr(x.length)}if(r||x||y.match(/^\/\/[^@\/]+@[^@\/]+/)){var S="//"===y.substr(0,2);!S||x&&g[x]||(y=y.substr(2),this.slashes=!0)}if(!g[x]&&(S||x&&!v[x])){for(var A,M,C=-1,N=0;N<d.length;N++){-1!==(E=y.indexOf(d[N]))&&(-1===C||E<C)&&(C=E)}-1!==(M=-1===C?y.lastIndexOf("@"):y.lastIndexOf("@",C))&&(A=y.slice(0,M),y=y.slice(M+1),this.auth=decodeURIComponent(A)),C=-1;for(N=0;N<h.length;N++){var E;-1!==(E=y.indexOf(h[N]))&&(-1===C||E<C)&&(C=E)}-1===C&&(C=y.length),this.host=y.slice(0,C),y=y.slice(C),this.parseHost(),this.hostname=this.hostname||"";var T="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!T)for(var q=this.hostname.split(/\./),z=(N=0,q.length);N<z;N++){var O=q[N];if(O&&!O.match(p)){for(var _="",I=0,L=O.length;I<L;I++)O.charCodeAt(I)>127?_+="x":_+=O[I];if(!_.match(p)){var j=q.slice(0,N),D=q.slice(N+1),B=O.match(f);B&&(j.push(B[1]),D.unshift(B[2])),D.length&&(y="/"+D.join(".")+y),this.hostname=j.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),T||(this.hostname=n.toASCII(this.hostname));var R=this.port?":"+this.port:"",P=this.hostname||"";this.host=P+R,this.href+=this.host,T&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==y[0]&&(y="/"+y))}if(!m[k])for(N=0,z=u.length;N<z;N++){var F=u[N];if(-1!==y.indexOf(F)){var U=encodeURIComponent(F);U===F&&(U=escape(F)),y=y.split(F).join(U)}}var $=y.indexOf("#");-1!==$&&(this.hash=y.substr($),y=y.slice(0,$));var H=y.indexOf("?");if(-1!==H?(this.search=y.substr(H),this.query=y.substr(H+1),t&&(this.query=b.parse(this.query)),y=y.slice(0,H)):t&&(this.search="",this.query={}),y&&(this.pathname=y),v[k]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){R=this.pathname||"";var V=this.search||"";this.path=R+V}return this.href=this.format(),this},o.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",r=this.pathname||"",n=this.hash||"",o=!1,s="";this.host?o=e+this.host:this.hostname&&(o=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&i.isObject(this.query)&&Object.keys(this.query).length&&(s=b.stringify(this.query));var a=this.search||s&&"?"+s||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||v[t])&&!1!==o?(o="//"+(o||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):o||(o=""),n&&"#"!==n.charAt(0)&&(n="#"+n),a&&"?"!==a.charAt(0)&&(a="?"+a),t+o+(r=r.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(a=a.replace("#","%23"))+n},o.prototype.resolve=function(e){return this.resolveObject(y(e,!1,!0)).format()},o.prototype.resolveObject=function(e){if(i.isString(e)){var t=new o;t.parse(e,!1,!0),e=t}for(var r=new o,n=Object.keys(this),s=0;s<n.length;s++){var a=n[s];r[a]=this[a]}if(r.hash=e.hash,""===e.href)return r.href=r.format(),r;if(e.slashes&&!e.protocol){for(var l=Object.keys(e),c=0;c<l.length;c++){var u=l[c];"protocol"!==u&&(r[u]=e[u])}return v[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(e.protocol&&e.protocol!==r.protocol){if(!v[e.protocol]){for(var h=Object.keys(e),d=0;d<h.length;d++){var p=h[d];r[p]=e[p]}return r.href=r.format(),r}if(r.protocol=e.protocol,e.host||g[e.protocol])r.pathname=e.pathname;else{for(var f=(e.pathname||"").split("/");f.length&&!(e.host=f.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==f[0]&&f.unshift(""),f.length<2&&f.unshift(""),r.pathname=f.join("/")}if(r.search=e.search,r.query=e.query,r.host=e.host||"",r.auth=e.auth,r.hostname=e.hostname||e.host,r.port=e.port,r.pathname||r.search){var m=r.pathname||"",b=r.search||"";r.path=m+b}return r.slashes=r.slashes||e.slashes,r.href=r.format(),r}var y=r.pathname&&"/"===r.pathname.charAt(0),w=e.host||e.pathname&&"/"===e.pathname.charAt(0),x=w||y||r.host&&e.pathname,k=x,S=r.pathname&&r.pathname.split("/")||[],A=(f=e.pathname&&e.pathname.split("/")||[],r.protocol&&!v[r.protocol]);if(A&&(r.hostname="",r.port=null,r.host&&(""===S[0]?S[0]=r.host:S.unshift(r.host)),r.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===f[0]?f[0]=e.host:f.unshift(e.host)),e.host=null),x=x&&(""===f[0]||""===S[0])),w)r.host=e.host||""===e.host?e.host:r.host,r.hostname=e.hostname||""===e.hostname?e.hostname:r.hostname,r.search=e.search,r.query=e.query,S=f;else if(f.length)S||(S=[]),S.pop(),S=S.concat(f),r.search=e.search,r.query=e.query;else if(!i.isNullOrUndefined(e.search)){if(A)r.hostname=r.host=S.shift(),(T=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=T.shift(),r.host=r.hostname=T.shift());return r.search=e.search,r.query=e.query,i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!S.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var M=S.slice(-1)[0],C=(r.host||e.host||S.length>1)&&("."===M||".."===M)||""===M,N=0,E=S.length;E>=0;E--)"."===(M=S[E])?S.splice(E,1):".."===M?(S.splice(E,1),N++):N&&(S.splice(E,1),N--);if(!x&&!k)for(;N--;N)S.unshift("..");!x||""===S[0]||S[0]&&"/"===S[0].charAt(0)||S.unshift(""),C&&"/"!==S.join("/").substr(-1)&&S.push("");var T,q=""===S[0]||S[0]&&"/"===S[0].charAt(0);A&&(r.hostname=r.host=q?"":S.length?S.shift():"",(T=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=T.shift(),r.host=r.hostname=T.shift()));return(x=x||r.host&&S.length)&&!q&&S.unshift(""),S.length?r.pathname=S.join("/"):(r.pathname=null,r.path=null),i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=e.auth||r.auth,r.slashes=r.slashes||e.slashes,r.href=r.format(),r},o.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},"./node_modules/url/util.js":e=>{"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},"./node_modules/webpack-dev-server/client/clients/BaseClient.js":e=>{"use strict";function t(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var r,n,i;return r=e,i=[{key:"getClientPath",value:function(e){throw new Error("Client needs implementation")}}],(n=null)&&t(r.prototype,n),i&&t(r,i),e}()},"./node_modules/webpack-dev-server/client/clients/SockJSClient.js":(e,t,r)=>{"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=l(e);if(t){var i=l(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return a(this,r)}}function a(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var c=r("./node_modules/sockjs-client/dist/sockjs.js"),u=r("./node_modules/webpack-dev-server/client/clients/BaseClient.js");e.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}(l,e);var t,r,n,a=s(l);function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this)).sock=new c(e),t.sock.onerror=function(e){},t}return t=l,n=[{key:"getClientPath",value:function(e){return"./node_modules/webpack-dev-server/client/clients/SockJSClient.js"}}],(r=[{key:"onOpen",value:function(e){this.sock.onopen=e}},{key:"onClose",value:function(e){this.sock.onclose=e}},{key:"onMessage",value:function(e){this.sock.onmessage=function(t){e(t.data)}}}])&&i(t.prototype,r),n&&i(t,n),l}(u)},"./node_modules/webpack-dev-server/client/index.js?http://localhost:8080":(e,t,r)=>{"use strict";var n=r("./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js"),i=r("./node_modules/webpack-dev-server/client/socket.js"),o=r("./node_modules/webpack-dev-server/client/overlay.js"),s=r("./node_modules/webpack-dev-server/client/utils/log.js"),a=s.log,l=s.setLogLevel,c=r("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),u=r("./node_modules/webpack-dev-server/client/utils/reloadApp.js"),h=r("./node_modules/webpack-dev-server/client/utils/createSocketUrl.js"),d={isUnloading:!1,currentHash:""},p={hot:!1,hotReload:!0,liveReload:!1,initial:!0,useWarningOverlay:!1,useErrorOverlay:!1,useProgress:!1},f=h("?http://localhost:8080");if(self.addEventListener("beforeunload",(function(){d.isUnloading=!0})),"undefined"!=typeof window){var m=window.location.search.toLowerCase();p.hotReload=-1===m.indexOf("hotreload=false")}i(f,{hot:function(){p.hot=!0,a.info("[WDS] Hot Module Replacement enabled.")},liveReload:function(){p.liveReload=!0,a.info("[WDS] Live Reloading enabled.")},invalid:function(){a.info("[WDS] App updated. Recompiling..."),(p.useWarningOverlay||p.useErrorOverlay)&&o.clear(),c("Invalid")},hash:function(e){d.currentHash=e},"still-ok":function(){a.info("[WDS] Nothing changed."),(p.useWarningOverlay||p.useErrorOverlay)&&o.clear(),c("StillOk")},"log-level":function(e){var t=r("./node_modules/webpack/hot sync ^\\.\\/log$");-1!==t.keys().indexOf("./log")&&t("./log").setLogLevel(e),l(e)},overlay:function(e){"undefined"!=typeof document&&("boolean"==typeof e?(p.useWarningOverlay=!1,p.useErrorOverlay=e):e&&(p.useWarningOverlay=e.warnings,p.useErrorOverlay=e.errors))},progress:function(e){"undefined"!=typeof document&&(p.useProgress=e)},"progress-update":function(e){p.useProgress&&a.info("[WDS] ".concat(e.percent,"% - ").concat(e.msg,".")),c("Progress",e)},ok:function(){if(c("Ok"),(p.useWarningOverlay||p.useErrorOverlay)&&o.clear(),p.initial)return p.initial=!1;u(p,d)},"content-changed":function(){a.info("[WDS] Content base changed. Reloading..."),self.location.reload()},warnings:function(e){a.warn("[WDS] Warnings while compiling.");var t=e.map((function(e){return n(e)}));c("Warnings",t);for(var r=0;r<t.length;r++)a.warn(t[r]);if(p.useWarningOverlay&&o.showMessage(e),p.initial)return p.initial=!1;u(p,d)},errors:function(e){a.error("[WDS] Errors while compiling. Reload prevented.");var t=e.map((function(e){return n(e)}));c("Errors",t);for(var r=0;r<t.length;r++)a.error(t[r]);p.useErrorOverlay&&o.showMessage(e),p.initial=!1},error:function(e){a.error(e)},close:function(){a.error("[WDS] Disconnected!"),c("Close")}})},"./node_modules/webpack-dev-server/client/overlay.js":(e,t,r)=>{"use strict";var n=r("./node_modules/ansi-html/index.js"),i=new(0,r("./node_modules/html-entities/lib/index.js").AllHtmlEntities),o={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},s=null,a=null,l=null;function c(e){var t,r;a?e(a):(l=e,s||(t=function(){var e,t;(t=(e=s).contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",t.style.position="fixed",t.style.boxSizing="border-box",t.style.left=0,t.style.top=0,t.style.right=0,t.style.bottom=0,t.style.width="100vw",t.style.height="100vh",t.style.backgroundColor="rgba(0, 0, 0, 0.85)",t.style.color="#E8E8E8",t.style.fontFamily="Menlo, Consolas, monospace",t.style.fontSize="large",t.style.padding="2rem",t.style.lineHeight="1.2",t.style.whiteSpace="pre-wrap",t.style.overflow="auto",e.contentDocument.body.appendChild(t),l(a=t)},(r=document.createElement("iframe")).id="webpack-dev-server-client-overlay",r.src="about:blank",r.style.position="fixed",r.style.left=0,r.style.top=0,r.style.right=0,r.style.bottom=0,r.style.width="100vw",r.style.height="100vh",r.style.border="none",r.style.zIndex=9999999999,r.onload=t,s=r,document.body.appendChild(s)))}n.setColors(o),e.exports={clear:function(){a&&(document.body.removeChild(s),a=null,s=null,l=null)},showMessage:function(e){c((function(t){t.innerHTML='<span style="color: #'.concat(o.red,'">Failed to compile.</span><br><br>').concat(n(i.encode(e[0])))}))}}},"./node_modules/webpack-dev-server/client/socket.js":(e,t,r)=>{"use strict";var n=r("./node_modules/webpack-dev-server/client/clients/SockJSClient.js"),i=void 0!==n?n:r("./node_modules/webpack-dev-server/client/clients/SockJSClient.js"),o=0,s=null,a=function(e,t){(s=new i(e)).onOpen((function(){o=0})),s.onClose((function(){if(0===o&&t.close(),s=null,o<=10){var r=1e3*Math.pow(2,o)+100*Math.random();o+=1,setTimeout((function(){a(e,t)}),r)}})),s.onMessage((function(e){var r=JSON.parse(e);t[r.type]&&t[r.type](r.data)}))};e.exports=a},"./node_modules/webpack-dev-server/client/utils/createSocketUrl.js":(e,t,r)=>{"use strict";var n=r("./node_modules/url/url.js"),i=r("./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");e.exports=function(e,t){var r;if("string"==typeof e&&""!==e)r=n.parse(e.substr(1).replace("&","?"),!0);else{var o=i();r=n.parse(o||"/",!0,!0)}return function(e,t){var r=e.auth,i=e.query,o=e.hostname,s=e.protocol,a=e.port;a&&"0"!==a||(a=t.port);"0.0.0.0"!==o&&"::"!==o||!t.hostname||0!==t.protocol.indexOf("http")||(o=t.hostname);!o||"127.0.0.1"===o||"https:"!==t.protocol&&"0.0.0.0"!==e.hostname||(s=t.protocol);var l=i.sockHost||o,c=i.sockPath||"/sockjs-node",u=i.sockPort||a;"location"===u&&(u=t.port);return n.format({protocol:s,auth:r,hostname:l,port:u,pathname:c})}(r,t="string"==typeof t&&""!==t?n.parse(t):self.location)}},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":e=>{"use strict";e.exports=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],t=e[e.length-1];if(t)return t.getAttribute("src");throw new Error("[WDS] Failed to get current script source.")}},"./node_modules/webpack-dev-server/client/utils/log.js":(e,t,r)=>{"use strict";var n=r("./node_modules/loglevel/lib/loglevel.js").getLogger("webpack-dev-server"),i="info";n.setDefaultLevel(i),e.exports={log:n,setLogLevel:function(e){switch(e){case i:case"warn":case"error":case"debug":case"trace":n.setLevel(e);break;case"warning":n.setLevel("warn");break;case"none":case"silent":n.disableAll();break;default:n.error("[WDS] Unknown clientLogLevel '".concat(e,"'"))}}}},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":(e,t,r)=>{"use strict";var n=r("./node_modules/webpack-dev-server/client/utils/log.js").log;e.exports=function(e,t){var i=e.hotReload,o=e.hot,s=e.liveReload,a=t.isUnloading,l=t.currentHash;if(!a&&i)if(o)n.info("[WDS] App hot update..."),r("./node_modules/webpack/hot/emitter.js").emit("webpackHotUpdate",l),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(l),"*");else if(s)var c=self,u=self.setInterval((function(){("about:"!==c.location.protocol||(c=c.parent).parent===c)&&h(c,u)}));function h(e,t){clearInterval(t),n.info("[WDS] App updated. Reloading..."),e.location.reload()}}},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":e=>{"use strict";e.exports=function(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:t},"*")}},"./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js":e=>{"use strict";e.exports=function(){return/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g}},"./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js":(e,t,r)=>{"use strict";var n=r("./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js")();e.exports=function(e){return"string"==typeof e?e.replace(n,""):e}},"./node_modules/webpack/hot/emitter.js":(e,t,r)=>{var n=r("./node_modules/events/events.js");e.exports=new n},"./node_modules/webpack/hot/log.js":e=>{var t="info";function r(){}function n(e){return"info"===t&&"info"===e||["info","warning"].indexOf(t)>=0&&"warning"===e||["info","warning","error"].indexOf(t)>=0&&"error"===e}function i(e){return function(t,r){n(t)&&e(r)}}e.exports=function(e,t){n(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var o=console.group||r,s=console.groupCollapsed||r,a=console.groupEnd||r;e.exports.group=i(o),e.exports.groupCollapsed=i(s),e.exports.groupEnd=i(a),e.exports.setLogLevel=function(e){t=e},e.exports.formatError=function(e){var t=e.message,r=e.stack;return r?r.indexOf(t)<0?t+"\n"+r:r:t}},"./node_modules/webpack/hot sync ^\\.\\/log$":(e,t,r)=>{var n={"./log":"./node_modules/webpack/hot/log.js"};function i(e){var t=o(e);return r(t)}function o(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}i.keys=function(){return Object.keys(n)},i.resolve=o,e.exports=i,i.id="./node_modules/webpack/hot sync ^\\.\\/log$"}},t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.loaded=!0,i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),r("./src/ts/index.ts"),r("./node_modules/webpack-dev-server/client/index.js?http://localhost:8080")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,